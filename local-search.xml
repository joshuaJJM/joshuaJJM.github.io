<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo-fluid 美化指南</title>
    <link href="/2025/08/28/hexo-fluid%20%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/"/>
    <url>/2025/08/28/hexo-fluid%20%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-fluid-美化指南"><a href="#hexo-fluid-美化指南" class="headerlink" title="hexo-fluid 美化指南"></a>hexo-fluid 美化指南</h1><p><a href="https://www.luogu.com.cn/article/0m9egybe">洛谷同文链接</a></p><p>注意：本文仅介绍 hexo-fluid 的美化方法，不介绍搭建方法。</p><p>注意：所有改动都要重新部署才能生效。（大概？）<br>方法：在博客根目录执行指令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>确认可以之后执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean<br>hexo g<br>hexo d<br>hexo s<br></code></pre></td></tr></table></figure><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><del>众所周知</del>作为 oier，大部分人都会有一个博客。</p><p>但是当你真的搭建了一个博客之后，会发现好像和网上其他大佬的博客相差很远。</p><p>这时候，你就需要美化你的博客了。</p><h1 id="搭建-基础设置"><a href="#搭建-基础设置" class="headerlink" title="搭建 &amp; 基础设置"></a>搭建 &amp; 基础设置</h1><p>这里不涉及搭建方法，如果要学习如何搭建，可以阅读一篇洛谷上的搭建指南（我自己没写，但是未来考虑写一个），比如<a href="https://www.luogu.com/article/payxm0u7">这个</a>。</p><p>对于一些博客内置的基础设置，可以尝试通过<a href="https://hexo.fluid-dev.com/docs/guide/">官方技术文档</a>进行设置。</p><p>对于官方文档，建议自习地从头到尾读一遍。</p><p>重要的几个：</p><ul><li>在 <code>_config.fluid.yml</code> 中搜索关键词 <code>math</code> ，将 <code>enable</code> 设为 <code>true</code>，才能开启数学公式的渲染。</li></ul><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><p>这里的美化方法都<del>经过实战检测</del>其实就是直接看你现在在的这个博客，效果就是这样。</p><h2 id="前置定义"><a href="#前置定义" class="headerlink" title="前置定义"></a>前置定义</h2><p>本文中一旦出现关键词 <code>custom_js</code>，那么都指这个部分：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/ejubf9il.png"></p><p>一旦出现关键词 <code>custom_css</code>，那么都指这个部分：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/xshbhxvw.png"></p><h2 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h2><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>敬请期待</p><h3 id="统计访问次数"><a href="#统计访问次数" class="headerlink" title="统计访问次数"></a>统计访问次数</h3><p>fluid 自带的教程（<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%B1%95%E7%A4%BA-pv-%E4%B8%8E-uv-%E7%BB%9F%E8%AE%A1">这里</a>）中的两种方式我自己是试过的，但是都没什么效果。个人使用的方法是<em>经典</em>个人主页统计。</p><p>方法：</p><ol><li>访问<a href="https://count.getloli.com/">这里</a>，按照提示创建一个自己的名字。</li><li>找到 <code>_config.fluid.yml</code>，找到下面这个部分（检索关键词 <code>footer</code>）<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/sc0rrm9d.png"></li><li>在下面的 html 中插入一段内容：<code>&lt;img width=&quot;【修改】&quot; height=&quot;64&quot; src=&quot;https://count.getloli.com/@【修改】?name=【修改】&amp;theme=3d-num&amp;padding=8&amp;offset=0&amp;align=top&amp;scale=1&amp;pixelated=1&amp;darkmode=auto&quot; alt=&quot;【修改】&quot;&gt;</code>。其中第一个 <code>【修改】</code> 为图片的宽度和高度，可以不填（那么必须要去掉这两个属性，但是填上是为了在未加载出图片时不会用默认加载动画的大小来预设图片的大小，不然非常奇怪）。第一个数值计算方式：<code>(你在设置图片的时候设置的位数*46)</code> 其中 <code>你在设置图片的时候设置的位数</code> 默认为 7。第二，三个 <code>【修改】</code> 是你在第一步创建的名字。</li><li><strong>注意</strong>：不知道为什么，我的博客要把这个 html 标签放在所有页脚的最后一个位置，不然后面的内容会加载不出来。</li></ol><h3 id="页脚显示运行时间"><a href="#页脚显示运行时间" class="headerlink" title="页脚显示运行时间"></a>页脚显示运行时间</h3><ol><li>在 <code>根目录/themes/fluid/source/js</code> 目录下创建一个 <code>duration.js</code>，内容为：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">!(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/** 计时起始时间，自行修改 **/</span><br>  <span class="hljs-keyword">var</span> start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2025/06/13 19:31:47&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - start) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - start) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - start) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br><span class="hljs-comment">/** 显示的文字内容，详细你结合实际渲染结果应该能看出改哪里 **/</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站已在随时准备跑路的状态下以极其不稳定的方式运行了&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">update</span>();<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure><ol start="2"><li>找到 <code>_config.fluid.yml</code>，找到下面这个部分（检索关键词 <code>footer</code>）<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/sc0rrm9d.png"></li><li>在下面的 html 中插入一段内容（尽量插在访问次数统计的前面）：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 0.85rem&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/duration.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="显示随机英文句子"><a href="#显示随机英文句子" class="headerlink" title="显示随机英文句子"></a>显示随机英文句子</h3><p>本部分根据<a href="https://hexo.fluid-dev.com/posts/hexo-rainbow/">官方博客</a>经个人总结而来。</p><p>这里我没有使用一言，而是使用了 Rainbow 来展示句子。</p><ol><li>在 <code>./themes/fluid/source/js</code> 目录下创建一个 <code>englishwordshow.js</code>，内容为：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.eatrice.top&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> rainbow = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;rainbow&#x27;</span>);<br>    rainbow.<span class="hljs-property">innerHTML</span> = data.<span class="hljs-property">Content</span>;<br>    rainbow.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://rainbow.eatrice.top/?ID=&quot;</span> + data.<span class="hljs-property">ID</span>;<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>找到 <code>_config.fluid.yml</code>，找到下面这个部分（检索关键词 <code>footer</code>）<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/sc0rrm9d.png"></li><li>插入一下 html：<code>&lt;p&gt;每日一句：&lt;a id=&quot;rainbow&quot; href=&#39;&#39; target=&quot;_blank&quot;&gt;🌈 获取中...&lt;/a&gt;&lt;/p&gt;</code>，格式可以自行调整。</li><li><strong>注意</strong>：我这里不知道为什么要插入两行一样的代码才能显示出来。</li><li>在 <code>custom_js</code> 中插入一行：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">/js/englishwordshow.js</span>          <span class="hljs-comment"># 英语句子展示库</span><br></code></pre></td></tr></table></figure><p>注释可选，但是建议加上，防止之后自己看不懂。</p><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><h3 id="背景动态黑色线条"><a href="#背景动态黑色线条" class="headerlink" title="背景动态黑色线条"></a>背景动态黑色线条</h3><ol><li>在 <code>custom_js</code> 中加入：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">/js/black_point_under.js</span>          <span class="hljs-comment"># 动态黑色线条</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在 <code>./themes/fluid/source/js</code> 目录下创建一个 <code>black_point_under.js</code>，内容为：（参数在注释中调，原本压行的代码我把它展开了）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">!<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params">w,v,i</span>)&#123;<br>        <span class="hljs-keyword">return</span> w.<span class="hljs-title function_">getAttribute</span>(v)||i<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">j</span>(<span class="hljs-params">i</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(i)<br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">l</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> i=<span class="hljs-title function_">j</span>(<span class="hljs-string">&quot;script&quot;</span>),w=i.<span class="hljs-property">length</span>,v=i[w-<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">l</span>:w,<span class="hljs-attr">z</span>:<span class="hljs-title function_">o</span>(v,<span class="hljs-string">&quot;zIndex&quot;</span>,-<span class="hljs-number">1</span>),<span class="hljs-attr">o</span>:<span class="hljs-title function_">o</span>(v,<span class="hljs-string">&quot;opacity&quot;</span>,<span class="hljs-number">0.5</span>),<span class="hljs-attr">c</span>:<span class="hljs-title function_">o</span>(v,<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;0,0,0&quot;</span>),<span class="hljs-attr">n</span>:<span class="hljs-title function_">o</span>(v,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-number">99</span>)&#125;<span class="hljs-comment">//最后一个参数是粒子数量，默认99</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">k</span>(<span class="hljs-params"></span>)&#123;<br>        r=u.<span class="hljs-property">width</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientWidth</span>,n=u.<span class="hljs-property">height</span>=<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>||<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">clientHeight</span><br>    &#125;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;<br>        e.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,r,n);<br>        <span class="hljs-keyword">var</span> w=[f].<span class="hljs-title function_">concat</span>(t);<br>        <span class="hljs-keyword">var</span> x,v,A,B,z,y;t.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)&#123;<br>            i.<span class="hljs-property">x</span>+=i.<span class="hljs-property">xa</span>,i.<span class="hljs-property">y</span>+=i.<span class="hljs-property">ya</span>,i.<span class="hljs-property">xa</span>*=i.<span class="hljs-property">x</span>&gt;r||i.<span class="hljs-property">x</span>&lt;<span class="hljs-number">0</span>?-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>,i.<span class="hljs-property">ya</span>*=i.<span class="hljs-property">y</span>&gt;n||i.<span class="hljs-property">y</span>&lt;<span class="hljs-number">0</span>?-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>,e.<span class="hljs-title function_">fillRect</span>(i.<span class="hljs-property">x</span>-<span class="hljs-number">0.5</span>,i.<span class="hljs-property">y</span>-<span class="hljs-number">0.5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span>(v=<span class="hljs-number">0</span>;v&lt;w.<span class="hljs-property">length</span>;v++)&#123;<br>                x=w[v];<br>                <span class="hljs-keyword">if</span>(i!==x&amp;&amp;<span class="hljs-literal">null</span>!==x.<span class="hljs-property">x</span>&amp;&amp;<span class="hljs-literal">null</span>!==x.<span class="hljs-property">y</span>)&#123;<br>                    B=i.<span class="hljs-property">x</span>-x.<span class="hljs-property">x</span>,z=i.<span class="hljs-property">y</span>-x.<span class="hljs-property">y</span>,y=B*B+z*z;<br>                    y&lt;x.<span class="hljs-property">max</span>&amp;&amp;(x===f&amp;&amp;y&gt;=x.<span class="hljs-property">max</span>/<span class="hljs-number">2</span>&amp;&amp;(i.<span class="hljs-property">x</span>-=<span class="hljs-number">0.03</span>*B,i.<span class="hljs-property">y</span>-=<span class="hljs-number">0.03</span>*z),A=(x.<span class="hljs-property">max</span>-y)/x.<span class="hljs-property">max</span>,e.<span class="hljs-title function_">beginPath</span>(),e.<span class="hljs-property">lineWidth</span>=A/<span class="hljs-number">2</span>,e.<span class="hljs-property">strokeStyle</span>=<span class="hljs-string">&quot;rgba(&quot;</span>+s.<span class="hljs-property">c</span>+<span class="hljs-string">&quot;,&quot;</span>+(A+<span class="hljs-number">0.2</span>)+<span class="hljs-string">&quot;)&quot;</span>,e.<span class="hljs-title function_">moveTo</span>(i.<span class="hljs-property">x</span>,i.<span class="hljs-property">y</span>),e.<span class="hljs-title function_">lineTo</span>(x.<span class="hljs-property">x</span>,x.<span class="hljs-property">y</span>),e.<span class="hljs-title function_">stroke</span>())<br>                &#125;<br>            &#125;<br>            w.<span class="hljs-title function_">splice</span>(w.<span class="hljs-title function_">indexOf</span>(i),<span class="hljs-number">1</span>)<br>        &#125;),<span class="hljs-title function_">m</span>(b)<br>    &#125;<br>    <span class="hljs-keyword">var</span> u=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>),s=<span class="hljs-title function_">l</span>(),c=<span class="hljs-string">&quot;c_n&quot;</span>+s.<span class="hljs-property">l</span>,e=u.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>),r,n,m=<span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">oRequestAnimationFrame</span>||<span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span>||<span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)&#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(i,<span class="hljs-number">1000</span>/<span class="hljs-number">45</span>)<br>    &#125;,a=<span class="hljs-title class_">Math</span>.<span class="hljs-property">random</span>,f=&#123;<br>        <span class="hljs-attr">x</span>:<span class="hljs-literal">null</span>,<span class="hljs-attr">y</span>:<span class="hljs-literal">null</span>,<span class="hljs-attr">max</span>:<span class="hljs-number">20000</span><span class="hljs-comment">//最后一个是与鼠标的连线距离，默认20000</span><br>    &#125;;<br>    u.<span class="hljs-property">id</span>=c;u.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span>=<span class="hljs-string">&quot;position:fixed;top:0;left:0;z-index:&quot;</span>+s.<span class="hljs-property">z</span>+<span class="hljs-string">&quot;;opacity:&quot;</span>+s.<span class="hljs-property">o</span>;<br>    <span class="hljs-title function_">j</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(u);<br>    <span class="hljs-title function_">k</span>(),<span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span>=k;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)&#123;<br>        i=i||<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>,f.<span class="hljs-property">x</span>=i.<span class="hljs-property">clientX</span>,f.<span class="hljs-property">y</span>=i.<span class="hljs-property">clientY</span><br>    &#125;,<span class="hljs-variable language_">window</span>.<span class="hljs-property">onmouseout</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        f.<span class="hljs-property">x</span>=<span class="hljs-literal">null</span>,f.<span class="hljs-property">y</span>=<span class="hljs-literal">null</span><br>    &#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> t=[],p=<span class="hljs-number">0</span>;s.<span class="hljs-property">n</span>&gt;p;p++)&#123;<br>        <span class="hljs-keyword">var</span> h=<span class="hljs-title function_">a</span>()*r,g=<span class="hljs-title function_">a</span>()*n,q=<span class="hljs-number">2</span>*<span class="hljs-title function_">a</span>()-<span class="hljs-number">1</span>,d=<span class="hljs-number">2</span>*<span class="hljs-title function_">a</span>()-<span class="hljs-number">1</span>;<br>        t.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">x</span>:h,<span class="hljs-attr">y</span>:g,<span class="hljs-attr">xa</span>:q,<span class="hljs-attr">ya</span>:d,<span class="hljs-attr">max</span>:<span class="hljs-number">6000</span>&#125;)<span class="hljs-comment">//最后一个为与其他粒子的最远连线距离，默认6000</span><br>    &#125;<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">b</span>()&#125;,<span class="hljs-number">100</span>)<br>&#125;();<br></code></pre></td></tr></table></figure><ol start="3"><li>保存</li></ol><h3 id="樱花花瓣飘落"><a href="#樱花花瓣飘落" class="headerlink" title="樱花花瓣飘落"></a>樱花花瓣飘落</h3><ol><li>在 <code>custom_js</code> 中加入：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">/js/flower_flow_down.js</span>       <span class="hljs-comment">#樱花飘落</span><br></code></pre></td></tr></table></figure><ol start="2"><li>点击<a href="/img/flower.png">这里</a>并下载图片或在下面使用<a href="https://www.luogu.com.cn/paste/0m1u7w92">另一段代码</a>（<del>就是直接把图片用base64编码后放代码里了</del>）</li><li><strong>如果下载了图片</strong>：将下载的图片命名为 <code>flower.png</code>，并放入 <code>./themes/fluid/source/img/</code> 中。</li><li>在 <code>./themes/fluid/source/js</code> 目录下创建一个 <code>flower_flow_down.js</code>，<strong>如果没有下载图片</strong>，内容为上面云剪贴板的代码，否则为下面的：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> stop, staticx, img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Sakura</span>(<span class="hljs-params">A, i, t, g, B</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = A;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = i;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">s</span> = t;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span> = g;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span> = B;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandom</span>(<span class="hljs-params">A</span>) &#123;<br>    <span class="hljs-keyword">var</span> i, t;<br>    <span class="hljs-keyword">switch</span> (A) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;x&quot;</span>:<br>            i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>            i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;s&quot;</span>:<br>            i = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;r&quot;</span>:<br>            i = <span class="hljs-number">6</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;fnx&quot;</span>:<br>            t = <span class="hljs-number">1</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">0.5</span>;<br>            i = <span class="hljs-keyword">function</span> (<span class="hljs-params">A, i</span>) &#123;<br>                <span class="hljs-keyword">return</span> A + <span class="hljs-number">0.5</span> * t - <span class="hljs-number">1.7</span>;<br>            &#125;;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;fny&quot;</span>:<br>            t = <span class="hljs-number">1.5</span> + <span class="hljs-number">0.7</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>            i = <span class="hljs-keyword">function</span> (<span class="hljs-params">A, i</span>) &#123;<br>                <span class="hljs-keyword">return</span> i + t;<br>            &#125;;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;fnr&quot;</span>:<br>            t = <span class="hljs-number">0.03</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();<br>            i = <span class="hljs-keyword">function</span> (<span class="hljs-params">A</span>) &#123;<br>                <span class="hljs-keyword">return</span> A + t;<br>            &#125;;<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">startSakura</span>(<span class="hljs-params"></span>) &#123;<br>    requestAnimationFrame =<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> ||<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span> ||<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span> ||<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span> ||<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">oRequestAnimationFrame</span>;<br><br>    <span class="hljs-keyword">var</span> A, i = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    staticx = <span class="hljs-literal">true</span>;<br>    i.<span class="hljs-property">height</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;<br>    i.<span class="hljs-property">width</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>    i.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;position: fixed;left: 0;top: 0;pointer-events: none;&quot;</span>);<br>    i.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;canvas_sakura&quot;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;body&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(i);<br><br>    A = i.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>    <span class="hljs-keyword">var</span> t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SakuraList</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> g = <span class="hljs-number">0</span>; g &lt; <span class="hljs-number">50</span>; g++) &#123;<br>        <span class="hljs-keyword">var</span> B, I, o, a, e, R, n;<br>        I = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;x&quot;</span>);<br>        o = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;y&quot;</span>);<br>        e = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;r&quot;</span>);<br>        a = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;s&quot;</span>);<br>        R = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;fnx&quot;</span>);<br>        n = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;fny&quot;</span>);<br>        randomFnR = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;fnr&quot;</span>);<br>        B = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sakura</span>(I, o, a, e, &#123; <span class="hljs-attr">x</span>: R, <span class="hljs-attr">y</span>: n, <span class="hljs-attr">r</span>: randomFnR &#125;);<br>        B.<span class="hljs-title function_">draw</span>(A);<br>        t.<span class="hljs-title function_">push</span>(B);<br>    &#125;<br><br>    stop = <span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">callee</span>(<span class="hljs-params"></span>) &#123;<br>        A.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, i.<span class="hljs-property">width</span>, i.<span class="hljs-property">height</span>);<br>        t.<span class="hljs-title function_">update</span>();<br>        t.<span class="hljs-title function_">draw</span>(A);<br>        stop = <span class="hljs-title function_">requestAnimationFrame</span>(callee);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">stopp</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (staticx) &#123;<br>        <span class="hljs-keyword">var</span> A = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas_sakura&quot;</span>);<br>        A.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(A);<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(stop);<br>        staticx = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">startSakura</span>();<br>    &#125;<br>&#125;<br><br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;/img/flower.png&quot;</span>;<br><br><span class="hljs-title class_">Sakura</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">A</span>) &#123;<br>    A.<span class="hljs-title function_">save</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">s</span>;<br>    A.<span class="hljs-title function_">translate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br>    A.<span class="hljs-title function_">rotate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>);<br>    A.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">40</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">s</span>, <span class="hljs-number">40</span> * <span class="hljs-variable language_">this</span>.<span class="hljs-property">s</span>);<br>    A.<span class="hljs-title function_">restore</span>();<br>&#125;;<br><br><span class="hljs-title class_">Sakura</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span>.<span class="hljs-title function_">x</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span>.<span class="hljs-title function_">y</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span>.<span class="hljs-title function_">r</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span> = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;fnr&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.4</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;x&quot;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">s</span> = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;s&quot;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span> = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;r&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;y&quot;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">s</span> = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;s&quot;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">r</span> = <span class="hljs-title function_">getRandom</span>(<span class="hljs-string">&quot;r&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-title class_">SakuraList</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = [];<br>&#125;;<br><br><span class="hljs-title class_">SakuraList</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">A</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(A);<br>&#125;;<br><br><span class="hljs-title class_">SakuraList</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> A = <span class="hljs-number">0</span>, i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>; A &lt; i; A++) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[A].<span class="hljs-title function_">update</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-title class_">SakuraList</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">draw</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">A</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>; i &lt; t; i++) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[i].<span class="hljs-title function_">draw</span>(A);<br>    &#125;<br>&#125;;<br><br><span class="hljs-title class_">SakuraList</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">A</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[A];<br>&#125;;<br><br><span class="hljs-title class_">SakuraList</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">size</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span>;<br>&#125;;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas_snow&quot;</span>);<br>&#125;;<br><br>img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">startSakura</span>();<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="滚动条颜色"><a href="#滚动条颜色" class="headerlink" title="滚动条颜色"></a>滚动条颜色</h3><ol><li>在 <code>custom_css</code> 中加入：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">/css/gundongtiaocolor.css</span>     <span class="hljs-comment"># 滚动条颜色</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建文件 <code>./source/css/gundongtiaocolor.css</code>，内容为：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-scrollbar &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br>::-webkit-scrollbar-thumb &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5b64ec</span>;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>( <span class="hljs-number">45deg</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.4</span>) <span class="hljs-number">25%</span>, transparent <span class="hljs-number">25%</span>, transparent <span class="hljs-number">50%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.4</span>) <span class="hljs-number">50%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.4</span>) <span class="hljs-number">75%</span>, transparent <span class="hljs-number">75%</span>, transparent);<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2em</span>;<br>&#125;<br><br>::-webkit-scrollbar-corner &#123;<br>    <span class="hljs-attribute">background-color</span>: transparent;<br>&#125;<br><br>::-moz-selection &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e58a8a</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>滚动条颜色可以自行调整，结合代码可以试试。但这个是我喜欢的。</li></ol><h3 id="头部打字机效果渐变"><a href="#头部打字机效果渐变" class="headerlink" title="头部打字机效果渐变"></a>头部打字机效果渐变</h3><ol><li>在 <code>custom_css</code> 中加入：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">/css/typingchanging.css</span>    <span class="hljs-comment"># 打字机效果渐变</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建文件 <code>./source/css/typingchanging.css</code>，内容为：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.typing-changing</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-number">#ff6b6b</span>, <span class="hljs-number">#f06595</span>, <span class="hljs-number">#e58a8a</span>, <span class="hljs-number">#d9a7c7</span>, <span class="hljs-number">#bcc6cc</span>);<br>    -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>    <span class="hljs-attribute">background-clip</span>: text;<br>    <span class="hljs-attribute">color</span>: transparent;<br>&#125;<br>```css<br><br><span class="hljs-selector-id">#subtitle</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(-<span class="hljs-number">45deg</span>, <span class="hljs-number">#ee7752</span>, <span class="hljs-number">#ce3e75</span>, <span class="hljs-number">#6ed8ff</span>, <span class="hljs-number">#23d5ab</span>);<span class="hljs-comment">/* 渐变参数 */</span><br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">400%</span> <span class="hljs-number">400%</span>;<br>    -webkit-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    -moz-<span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    <span class="hljs-attribute">animation</span>: Gradient <span class="hljs-number">10s</span> ease infinite;<br>    -o-<span class="hljs-attribute">user-select</span>: none;<br>    -ms-<span class="hljs-attribute">user-select</span>: none;<br>    -webkit-<span class="hljs-attribute">user-select</span>: none;<br>    -moz-<span class="hljs-attribute">user-select</span>: none;<br>    <span class="hljs-attribute">user-select</span>: none;<br>    -webkit-<span class="hljs-attribute">background-clip</span>: text;<br>    -webkit-<span class="hljs-selector-tag">text</span>-<span class="hljs-attribute">fill</span>-<span class="hljs-attribute">color</span>: transparent;<br>    <span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#subtitle</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链接下划线效果"><a href="#链接下划线效果" class="headerlink" title="链接下划线效果"></a>链接下划线效果</h3><ol><li>在 <code>custom_css</code> 中加入：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-string">/css/linkunderline.css</span>        <span class="hljs-comment"># 在链接时自动下划线效果，含动画</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建文件 <code>./source/css/linkunderline.css</code>，内容为：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 链接基础样式设置 */</span><br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative; <span class="hljs-comment">/* 为伪元素提供定位基准 */</span><br>    <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-comment">/* 去除默认下划线（可选） */</span><br>    <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.15s</span> ease; <span class="hljs-comment">/* 文字颜色过渡效果 */</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#005C97</span>; <span class="hljs-comment">/* 链接默认颜色 */</span><br>&#125;<br><br><span class="hljs-comment">/* 鼠标悬浮时的链接样式 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fa4b4b</span>; <span class="hljs-comment">/* 悬浮时的文字颜色 */</span><br>&#125;<br><br><span class="hljs-comment">/* 下划线效果实现 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.exlg-dash-options</span>)<span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">/* 伪元素内容为空 */</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 初始宽度为0（隐藏状态） */</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>; <span class="hljs-comment">/* 下划线高度 */</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">114</span>, <span class="hljs-number">110</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.575</span>); <span class="hljs-comment">/* 下划线颜色和透明度 */</span><br>    <span class="hljs-attribute">position</span>: absolute; <span class="hljs-comment">/* 绝对定位 */</span><br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100%</span>; <span class="hljs-comment">/* 定位在链接底部 */</span><br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>; <span class="hljs-comment">/* 初始水平居中（从中间向两边展开） */</span><br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease; <span class="hljs-comment">/* 过渡动画，使效果更平滑 */</span><br>&#125;<br><br><span class="hljs-comment">/* 鼠标悬浮时显示下划线 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.exlg-dash-options</span>)<span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">/* 从左侧开始 */</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-comment">/* 宽度扩展到与链接等长 */</span><br>&#125;<br><br><span class="hljs-comment">/* 排除特定链接的下划线效果（根据原脚本保留） */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[data-v-303bbf52]</span><span class="hljs-selector-attr">[data-v-639bc19b]</span><span class="hljs-selector-attr">[data-v-5e85f938]</span><span class="hljs-selector-pseudo">::after</span>,<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[data-v-303bbf52]</span><span class="hljs-selector-attr">[data-v-258e49ac]</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span> <span class="hljs-meta">!important</span>; <span class="hljs-comment">/* 强制隐藏这些链接的下划线 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是我个人使用 hexo-fluid 的一些美化方法。如果有其他的美化方法，欢迎分享。</p><p>技术交流：<a href="https://joshuajjm.github.io/">我的博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>P13683题解</title>
    <link href="/2025/08/10/P13683%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/08/10/P13683%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/13da65xl">洛谷同文链接</a></p><h1 id="题解：P13683-【MX-X16-T1】「DLESS-3」XOR-and-Greater-Sum"><a href="#题解：P13683-【MX-X16-T1】「DLESS-3」XOR-and-Greater-Sum" class="headerlink" title="题解：P13683 【MX-X16-T1】「DLESS-3」XOR and Greater Sum"></a>题解：P13683 【MX-X16-T1】「DLESS-3」XOR and Greater Sum</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>解决这个问题的关键是利用线性基（一种用于处理异或运算的数学工具）和异或的基本性质：</p><ul><li>异或的基本性质：<ul><li>若 $A$ 是整个数组的异或和，$B$ 是某个子集的异或和，那么剩余元素的异或和为 $A\oplus B$（因为 $B\oplus(A\oplus B)A$）。</li><li>要使子集 $S$ 的异或和等于 $A$，则剩余元素的异或和必为 0（因为 $A\oplus A&#x3D;0$）。即问题等价于：判断数组是否存在非空真子集，其异或和为 0。</li></ul></li><li>线性基的作用：<ul><li>线性基可以用来表示数组中所有元素的异或组合，基的大小反映了数组中线性无关元素的数量。</li><li>若数组的线性基大小小于数组元素个数，则说明存在非空子集的异或和为 0（存在冗余元素）。</li></ul></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-type">int</span> totxor=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>cin&gt;&gt;a[i];<br>totxor^=a[i];<br>&#125;<br><br><span class="hljs-keyword">if</span>(totxor==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果整个数组的异或和为 0，那么不存在非空真子集的异或和为 0</span><br><br><span class="hljs-type">int</span> k=<span class="hljs-number">31</span>-__builtin_clz(totxor);<span class="hljs-comment">//找到最高位的 1 的位置</span><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">30</span>,<span class="hljs-number">0</span>)</span></span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:a)&#123;<span class="hljs-comment">//对于每个数，尝试将其插入线性基</span><br><span class="hljs-type">int</span> x=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">29</span>;i&gt;=<span class="hljs-number">0</span>;--i)&#123;<span class="hljs-comment">//从高位到低位</span><br><span class="hljs-keyword">if</span>((x&gt;&gt;i)&amp;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(ans[i]==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果当前位为 1，且线性基中没有该位为 1 的数，那么直接插入</span><br>ans[i]=x;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>x^=ans[i];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ans[k]!=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> t;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">while</span>(t--)&#123;<br>cout&lt;&lt;(<span class="hljs-built_in">check</span>()?<span class="hljs-string">&quot;Yes&quot;</span>:<span class="hljs-string">&quot;No&quot;</span>)&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/record/230057257">AC 记录</a></p><h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li>时间复杂度：$O(Tn\log n)$，完全可以通过。</li><li>空间复杂度：$O(n)$，主要用于存储数组和线性基。</li></ul>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++考场代码模板</title>
    <link href="/2025/08/06/c-%E8%80%83%E5%9C%BA%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    <url>/2025/08/06/c-%E8%80%83%E5%9C%BA%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="c-代码模板"><a href="#c-代码模板" class="headerlink" title="c++ 代码模板"></a>c++ 代码模板</h2><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>mt19937</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">mt19937 <span class="hljs-title">engine</span><span class="hljs-params">(chrono::_V2::steady_clock::now().time_since_epoch().count())</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rand</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">uniform_int_distribution</span>&lt;<span class="hljs-type">int</span>&gt;(l,r)(engine);&#125;<br></code></pre></td></tr></table></figure><h3 id="对拍"><a href="#对拍" class="headerlink" title="对拍"></a>对拍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>:go<br>make_data.exe &gt;in.txt<br>need_test.exe &lt; in.txt &gt; out1.txt<br>ok.exe &lt; in.txt &gt; out2.txt<br><span class="hljs-built_in">fc</span> out1.txt out2.txt<br><span class="hljs-keyword">if</span> not errorlevel 1 goto go<br><span class="hljs-built_in">echo</span> find<br>goto go<br><br></code></pre></td></tr></table></figure><h3 id="缺省源"><a href="#缺省源" class="headerlink" title="缺省源"></a>缺省源</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function">mt19937 <span class="hljs-title">engine</span><span class="hljs-params">(chrono::_V2::steady_clock::now().time_since_epoch().count())</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rand</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">uniform_int_distribution</span>&lt;<span class="hljs-type">int</span>&gt;(l,r)(engine);&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;.in&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;.out&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,stdout);<br></code></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">queue_usingstack</span>&#123;<br><span class="hljs-keyword">private</span>:<br>stack&lt;T&gt; stack_in;<br>stack&lt;T&gt; stack_out;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make_stack_in_to_stack_out</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(stack_out.<span class="hljs-built_in">empty</span>())&#123;<br><span class="hljs-keyword">while</span>(!stack_in.<span class="hljs-built_in">empty</span>())&#123;<br>stack_out.<span class="hljs-built_in">push</span>(stack_in.<span class="hljs-built_in">top</span>());<br>stack_in.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T n)</span></span>&#123;<br>stack_in.<span class="hljs-built_in">push</span>(n);<br>&#125;<br><span class="hljs-function">T <span class="hljs-title">top</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//top=front 功能相同</span><br><span class="hljs-built_in">make_stack_in_to_stack_out</span>();<br><span class="hljs-keyword">return</span> stack_out.<span class="hljs-built_in">top</span>();<br>&#125;<br><span class="hljs-function">T <span class="hljs-title">front</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">make_stack_in_to_stack_out</span>();<br><span class="hljs-keyword">return</span> stack_out.<span class="hljs-built_in">top</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(stack_out.<span class="hljs-built_in">empty</span>())&#123;<br><span class="hljs-built_in">make_stack_in_to_stack_out</span>();<br>&#125;<br>stack_out.<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> stack_in.<span class="hljs-built_in">empty</span>()&amp;&amp;stack_out.<span class="hljs-built_in">empty</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> stack_in.<span class="hljs-built_in">size</span>()+stack_out.<span class="hljs-built_in">size</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clean</span><span class="hljs-params">()</span></span>&#123;<br>stack_in.<span class="hljs-built_in">clean</span>();<br>stack_out.<span class="hljs-built_in">clean</span>();<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="广搜"><a href="#广搜" class="headerlink" title="广搜"></a>广搜</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> fangxiangshu=<span class="hljs-number">8</span>;<span class="hljs-comment">//把这个数改成方向数</span><br><span class="hljs-type">bool</span> vis[<span class="hljs-number">505</span>][<span class="hljs-number">505</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> sx,sy;<br><span class="hljs-type">int</span> ex,ey;<br><span class="hljs-type">int</span> dx[fangxiangshu]=&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//方向数组1（x轴）</span><br><span class="hljs-type">int</span> dy[fangxiangshu]=&#123;<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>&#125;;<span class="hljs-comment">//方向数组2（y轴）</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<span class="hljs-comment">//节点记录结构体</span><br><span class="hljs-type">int</span> x,y,step;<br>&#125;;<br><br>queue&lt;node&gt; q;<span class="hljs-comment">//创建一个node类型的队列</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>&#123;<br>q.<span class="hljs-built_in">push</span>(node&#123;sx,sy,<span class="hljs-number">0</span>&#125;);<span class="hljs-comment">//1.队首元素入队</span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<span class="hljs-comment">//2.遍历队列，直到队列为空</span><br>node f=q.<span class="hljs-built_in">front</span>();<span class="hljs-comment">//2.1 找到队首元素</span><br>q.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//2.2存下队首元素后，队首元素出队</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;fangxiangshu;i++)&#123;<span class="hljs-comment">//2.3遍历队首元素能到达的所有节点</span><br><span class="hljs-type">int</span> nx=f.x+dx[i];<br><span class="hljs-type">int</span> ny=f.y+dy[i];<br><span class="hljs-keyword">if</span>(nx==ex&amp;&amp;ny==ey) <span class="hljs-keyword">return</span> f.step<span class="hljs-number">+1</span>;<span class="hljs-comment">//2.4如果当前节点是答案，return结果</span><br><span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;n&amp;&amp;!vis[nx][ny])&#123;<span class="hljs-comment">//2.5判断合法合法性</span><br><span class="hljs-comment">//2.6入队</span><br>vis[nx][ny]=<span class="hljs-number">1</span>;<span class="hljs-comment">//2.6.1 标记</span><br>q.<span class="hljs-built_in">push</span>(node&#123;nx,ny,f.step<span class="hljs-number">+1</span>&#125;);<span class="hljs-comment">//2.6.2 入队</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//3 无答案</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br>cin&gt;&gt;sx&gt;&gt;sy&gt;&gt;ex&gt;&gt;ey;<br>cout&lt;&lt;<span class="hljs-built_in">bfs</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营8.4总结</title>
    <link href="/2025/08/04/%E5%A4%8F%E4%BB%A4%E8%90%A58-4%E6%80%BB%E7%BB%93/"/>
    <url>/2025/08/04/%E5%A4%8F%E4%BB%A4%E8%90%A58-4%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天没有明显的讲的内容，但是我还是写一个总结吧。</p><span id="more"></span><p>$$<br>\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{114514}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营8.3总结</title>
    <link href="/2025/08/03/%E5%A4%8F%E4%BB%A4%E8%90%A58-3%E6%80%BB%E7%BB%93/"/>
    <url>/2025/08/03/%E5%A4%8F%E4%BB%A4%E8%90%A58-3%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天还是模考。</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p><del>老师不讲武德</del></p><p>老师竟然闲得无聊把很难的一题放在了最前面。</p><p> 我们几乎全班都<del>中招</del>了。因为正常情况下，第一题是正常的签到题。但是这一次的T1难度爆表，很多人甚至没做出部分分。<del>因为是捆绑测试</del></p><p><del>其实</del>思路就是分段处理所有的纸币，按照面值从大到小使用。</p><p>将物品的剩余金额从大到小排列。继续使用上面的方法。</p><p>最后，输出结果即可。</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>这题在考试的时候，花了好久才理解样例，因为一个车站可以同时有多个公交线路。</p><p>但是在考试的时候没有完全总结出判断是否合法的逻辑。所以只有22分。</p><p>下面是完整的判断逻辑：</p><ol><li>遍历过程中，<code>G</code>的数量始终$\ge$<code>R</code>的数量，且$\le$<code>W</code>的数量。</li><li>字符串结束时，<code>G</code>和<code>R</code>的总数量相等。</li><li>字符串中至少包含一个<code>G</code>。</li></ol><p>最后，符合这三个条件的就是合法的序列，否则不合法。</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>这题考试的时候<del>正解完全不会写</del>，但是写了一个时间复杂度奇怪（好？）的暴力，居然拿了TLE70分！</p><p>正解：</p><ul><li>其实就是递归+回溯</li><li>一个数能被$2^m$整除，当且仅当该数的最后$m$位二进制表示为$0$。对于十进制数，这意味这该数的最后$m$位组成的数能被$2^m$整除。</li><li>递归的逻辑就是：从空序列开始，逐步在序列前添加1-9（首位不能为0），每一次添加就检查是否满足条件。</li><li>最后，再加上一个剪枝即可。</li></ul><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>这题似乎挺难的，但是我考试的时候还是<del>不知道怎么样</del>正经地骗分骗了12分。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营8.2总结</title>
    <link href="/2025/08/02/%E5%A4%8F%E4%BB%A4%E8%90%A58-2%E6%80%BB%E7%BB%93/"/>
    <url>/2025/08/02/%E5%A4%8F%E4%BB%A4%E8%90%A58-2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天好像没什么可以讲的。</p><p>今天主要是讲关于线段树的题目。但是题目内容目前还在做，而且主要做的是洛谷和<code>vjudge</code>的题目，所以信友队上没什么提交。</p><p>话说老师<del>手把手</del>带我们写一堆题目。难度…就是有点爆表。</p><p>具体看下面的图片$\downarrow$</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/19lgbo3l.png" alt="你就说这题目的难度..."></p><p>再加上今天做的事比较多，总共就没多少时间做题了。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B4210题解</title>
    <link href="/2025/08/02/B4210%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/08/02/B4210%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/ajno3jug">洛谷上本文的链接</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题的情况大致分为两种：</p><ul><li>有人不是种子选手</li><li>都是种子选手</li></ul><p>有人不是种子选手的情况比较简单，因为都是随机抽签，所以最小的相遇的可能性就是 1。</p><p>否则需要计算两人的批次后计算最小相遇轮数。步骤：</p><ol><li>确定批次。批次为满足条件 $2^{l-1}&lt;x\le 2^l$ 的最小 $l$。</li><li>最小相遇轮数为 $8-\max(a,b)+1$。其中 $a,b$ 为两人的批次。</li></ol><p>最后直接输出即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> s,t;<br>cin&gt;&gt;s&gt;&gt;t;<br><span class="hljs-keyword">if</span>(s&gt;t) <span class="hljs-built_in">swap</span>(s,t);<br><br><span class="hljs-type">int</span> a,b;<br>a=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-number">1</span>&lt;&lt;a)&lt;s) a++;<br>a++;<br>b=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-number">1</span>&lt;&lt;b)&lt;t) b++;<br>b++;<br><br><span class="hljs-keyword">if</span>(s&lt;=<span class="hljs-number">32</span>&amp;&amp;t&lt;=<span class="hljs-number">32</span>)&#123;<br>cout&lt;&lt;<span class="hljs-number">8</span>-<span class="hljs-built_in">max</span>(a,b)<span class="hljs-number">+1</span>&lt;&lt;endl;<br>&#125; <br><span class="hljs-keyword">else</span>&#123;<br>cout&lt;&lt;<span class="hljs-number">1</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：$O(1)$</p><p><a href="https://www.luogu.com.cn/record/228379738">AC 记录</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营8.1总结</title>
    <link href="/2025/08/01/%E5%A4%8F%E4%BB%A4%E8%90%A58-1%E6%80%BB%E7%BB%93/"/>
    <url>/2025/08/01/%E5%A4%8F%E4%BB%A4%E8%90%A58-1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天主要讲了<del>啥都不是</del>（<del>杂题</del>）其实是模考。</p><p>但是全班这个断网的模考，对惨的就是我。由于集训带了一个台式机，所以没法搬到考试的地方，就只能用备用的电脑。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>这题还是比较简单（<del>其实是纯签到题</del>）。<del>唯一</del>可能错的原因就是把输出的内容抄错了。</p><p>代码就是输入每个数，判断是否为0，如果不为0，就去过的地方加一。最后判断去过的地方的数量，输出对应的内容即可。</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>这题的正解其实<del>就是暴力枚举</del>。</p><p>但是考试的时候不知道为什么看了半天题目才写出来。</p><p>一开始考虑使用<del>六层循环</del>，但是寻思着时间复杂度就爆炸了，就仔细地观察了一下样例。发现由于抹布是正方形的，所以如果把地板切成很多片，每一片都单独看的话，每一个连续的脏东西区间的长度都必须要$%k&#x3D;&#x3D;0$才能保证可以刚好擦完。</p><p>自己在考试的时候举了很多例子，也没能证伪。就按照这个方法写了，其实考试的时候是怕复杂度爆炸的，但是实际上没有问题（或许是因为数据太水了？），居然跑出了所有点都不超过 10ms 的时间。</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>下面的这两题在模考的时候没做出来，所以会比较偏题解。</p><p>核心思路：目录树构建与递归遍历</p><ol><li>目录树的构建：</li></ol><ul><li>通过解析输入的目录路径（如<code>/a/b/c</code>），将其拆分为多个层级的父目录（如<code>/</code>、<code>/a/</code>、<code>/a/b/</code>）。</li><li>用双向映射（<code>m1</code> 和 <code>m2</code>）将目录路径与唯一标识 <code>id</code> 关联，便于处理。</li><li>用邻接表<code>vec</code>存储目录之间的父子关系，用集合 <code>s</code> 记录每个目录的直接子目录。</li></ul><ol start="2"><li>目录大小计算：</li></ol><ul><li>采用深度优先搜索（<code>dfs</code>）从叶子目录向上计算每个目录的总大小（<code>sizee</code>），即当前目录大小加上其所有子目录大小之和。</li></ul><ol start="3"><li>递归判断与输出：</li></ol><ul><li>从根目录（<code>/</code>）开始递归处理每个目录（<code>solve</code> 函数）。</li><li>对于每个目录，判断其最大子目录的大小是否达到<code>limit</code>：<ul><li>若达到，则标记为需要展开（输出<code>-</code>），并递归处理其所有子目录。</li><li>若未达到，则标记为不需要展开（输出<code>+</code>）。</li></ul></li></ul><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>还没搞懂<code>QwQ</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天的模考还是比较神奇的。</p><p><del>T2不知道为什么就过了</del></p><p>这次，模考，我觉得收获还是比较大的。</p><p>首先，核对答案时要注意哪些小细节。比如T1，如果抄错了一个字母或大小写搞错了就直接爆炸了。</p><p>还有人在这种IO赛制的时候会把用户的文件夹名字写错。这样就直接爆0了。</p><p>如果输入输出文件名字写错了，那么后果也是灾难性的。还有人忘记加上文件名后面的<code>.in</code>于<code>.out</code>。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B4204题解</title>
    <link href="/2025/08/01/B4204%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/08/01/B4204%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/jtf7oiom">洛谷同文链接</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给你 $n$ 根青菜，$m$ 个机器人，机器人洗菜用 $a$ 的时间，做菜用 $b$ 的时间。求多久之后菜能做好。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用一个小根堆调度。确保每次出队的都是最早空闲的机器人。</p><p>然后先让机器人完成所有物品的清洗，对于每个机器人，完成清洗任务后再次进入队列，作为空闲机器人等待下一次使用。</p><p>当所有的菜都洗碗之后，让空闲的机器人从处理洗菜任务变成开始处理水煮任务。水煮任务的处理逻辑同以上的逻辑。</p><p>最后，追踪每一个物品的水煮完成时间，最终计算出的最大时间即为所有物品水煮完成时间的最大值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.luogu.com.cn/record/228100323">AC记录</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m,a,b;<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;a&gt;&gt;b;<br><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;&gt;&gt; robot;<span class="hljs-comment">// 空闲机器人的时间</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++) robot.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//初始化</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt;wash_end;<span class="hljs-comment">// 清洗完成时间</span><br><span class="hljs-type">int</span> wash_cnt=<span class="hljs-number">0</span>,boil_cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">// 已完成的清洗次数和水煮次数</span><br><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;&gt;&gt; wash_finish;<span class="hljs-comment">// 水煮完成时间</span><br><br><span class="hljs-keyword">while</span>(!robot.<span class="hljs-built_in">empty</span>())&#123;<br><span class="hljs-type">int</span> t=robot.<span class="hljs-built_in">top</span>();robot.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(wash_cnt&lt;n)&#123;<span class="hljs-comment">//处于开机状态（清洗次数未到）</span><br>wash_end.<span class="hljs-built_in">push_back</span>(t+a);<br>robot.<span class="hljs-built_in">push</span>(t+a);<br>wash_cnt++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(boil_cnt&lt;n)&#123;<span class="hljs-comment">// 清洗次数已到（关机）</span><br><span class="hljs-type">int</span> start_time=<span class="hljs-built_in">max</span>(t,wash_end[boil_cnt]);<span class="hljs-comment">// 取清洗完成时间和当前时间的较大值，即为最后的开机的时间</span><br>wash_finish.<span class="hljs-built_in">push</span>(start_time+b);<br>robot.<span class="hljs-built_in">push</span>(start_time+b);<br>boil_cnt++;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(!wash_finish.<span class="hljs-built_in">empty</span>())&#123;<span class="hljs-comment">//统计总时间</span><br>ans=<span class="hljs-built_in">max</span>(ans,wash_finish.<span class="hljs-built_in">top</span>());<br>wash_finish.<span class="hljs-built_in">pop</span>();<br>&#125;<br><br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.31总结</title>
    <link href="/2025/07/31/%E5%A4%8F%E4%BB%A4%E8%90%A57-31%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/31/%E5%A4%8F%E4%BB%A4%E8%90%A57-31%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="搜索优化"><a href="#搜索优化" class="headerlink" title="搜索优化"></a>搜索优化</h1><p>今天<del>又</del>去上大班课，然后<del>又把我热死了</del>。</p><h2 id="为什么要优化"><a href="#为什么要优化" class="headerlink" title="为什么要优化"></a>为什么要优化</h2><p>在比赛中，搜索一般用于取得部分分，而且大部分时候无法通过都是因为超时。</p><p>但是，搜索还是很多高级算法的基础。所以，搜索还是很重要的。</p><h2 id="三种优化"><a href="#三种优化" class="headerlink" title="三种优化"></a>三种优化</h2><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>遇到一些显然不合法&#x2F;不是最优解的答案时直接返回。</p><p>当然，剪枝的缺点（？）就是很难分析剪枝后的算法的时间复杂度，所以也很难预测分数。所以，剪枝其实和卡常一样，也是比较适合在骗分的时候使用。</p><p>这里用例题帮助理解。</p><h4 id="八皇后"><a href="#八皇后" class="headerlink" title="八皇后"></a>八皇后</h4><p>暴力：通过DFS枚举所有的$C^n_{n^2}$种可能性，再对于每一种可能性都进行判断。但是时间显然会直接爆炸。</p><p>剪枝：</p><ul><li>剪枝1：由于每行，每列都只能放一个棋子，所以可以进行搜索，保证每行只放一个旗子，且放的列不重合。但是依然又$n!$种情况，还是无法通过$n&#x3D;13$的情况。</li><li>剪枝2：在剪枝1的基础上增加一个判断对角线：<ul><li>假设用$i$表示格子的行，j表示格子的列，那么对于每一条从左上到右下的对角线上的所有旗子，应该满足$i-j$相同或$i+j$相同。所以只要开两个数组记录即可。</li><li>时间复杂度…不想算了，但是肯定可以过。</li></ul></li><li>其实这题的最好方式是直接打表。同dfs的暴力枚举，打表一下即可直接通过。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>剪枝方法千千万，好的剪枝省一半（时间）。</p><p>如果无法准确估计剪枝后的时间复杂度，那么最好多加几个。</p><p>剪枝，可以少加，可以不加，但是如果要加，那么请一定一定要确保剪枝的正确性。否则丢失了暴力分，反而就得不偿失了。</p><p>大部分的题目的剪枝技巧其实都是差不多的。</p><h3 id="启发式搜素"><a href="#启发式搜素" class="headerlink" title="启发式搜素"></a>启发式搜素</h3><p>启发式搜索其实就是一种高级的剪枝，核心思路就是剪枝是一个简单的判断，启发式搜索则是对当前的状态进行判断（通过估价函数），从而降低时间复杂度。</p><h4 id="采药"><a href="#采药" class="headerlink" title="采药"></a>采药</h4><p>这题的正解是DP，但是可以考虑使用dfs。</p><p>普通的估价函数过于乐观，无法有效减少枚举量。</p><p>所以考虑一个更加合理的估价函数$h(i)$：对于所有的药材按照$\frac{w_i}{t_i}$从大到小排序，尽量选择靠前的药材，如果剩余的$T&lt;t_i$则假设获得了$T\times\frac{w_i}{t_i}$的价值。</p><p>合理之处：保证了估价函数一定优于实际代价，且最贴合。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>如果把一些题目题意拆开理解就比较简单，但是题面其实特别长，要读好几遍才能完全理解。</p><h3 id="迭代加深搜索"><a href="#迭代加深搜索" class="headerlink" title="迭代加深搜索"></a>迭代加深搜索</h3><p>这种搜索方法其实像是$\text{dfs}+\text{bfs}&#x3D;\text{dbfs}(?)$。</p><p>过程：假定一个初始为0的递归上界$D$，且从起始状态开始搜索的过程。于普通搜索的不同之处在于：一旦到达了上界，就不再往下搜索。搜索结束后：</p><ul><li>找到结果：终止；</li><li>否则$D++$，重新搜索。</li></ul><p>优点：</p><ul><li>对于DFS：时间复杂度较低（在所有解深度不大时）</li><li>对于BFS：空间复杂度较低（只要保留搜索树上一条链的情况）</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>其实原本是要加上例题的，但是后来发现今天的时间比较紧张，就没写例题了。但是其实这个搜索剪枝的知识点还是很有用的。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.29总结</title>
    <link href="/2025/07/29/%E5%A4%8F%E4%BB%A4%E8%90%A57-29%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/29/%E5%A4%8F%E4%BB%A4%E8%90%A57-29%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>采用预计算$+$哈希映射的策略，提前处理可能的平方数，再通过查询快速返回结果：</p><ol><li>预计算阶段：生成数据范围内的平方数，统计其各位数字的出现次数，并考虑添加不同数量的0后的数字组成，存储到映射中（确保记录最小的平方数）。</li><li>查询阶段：对于输入数字，统计其数字组成，直接到映射中查找是否存在匹配的记录，返回对应的最小平方数或<code>-1</code>。</li></ol><p>查询：</p><ol><li><p>处理输入：对于每个测试用例，读取数字<code>n</code>，统计其各位数字的出现次数（同样用向量<code>now</code>记录）。</p></li><li><p>映射查询：直接用统计得到的<code>now</code>作为键，到<code>map</code>中查找：</p></li></ol><ul><li>若存在对应的记录，输出该平方数。</li><li>若不存在，输出<code>-1</code>。</li></ul><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><ul><li>用<code>last</code>记录上一个1出现的位置（初始为0，表示尚未遇到1）。</li><li>遍历字符串，当遇到1时：<ul><li>若这是第一个1，则初始化结果<code>ans=1</code>，并更新<code>last</code>为当前位置。</li><li>若不是第一个1，则计算当前位置与<code>last</code>的间隔（<code>i-last+1</code>），将结果累乘到<code>ans</code>中，并更新<code>last</code>为当前位置。</li></ul></li><li>最终输出<code>ans</code>（若字符串中没有1，则<code>ans</code>保持初始值0）。</li></ul><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p><del>众所周知</del>，对于固定和的两个数，它们的乘积在两数尽可能接近时最大（例如，周长固定的矩形中，正方形面积最大）。基于此，代码结合二进制特性（2的幂）来快速拆分<code>n</code>：</p><ol><li>找到最大的2的幂：对于<code>n</code>，找到小于等于<code>n</code>的最大2的幂，记为$cnt&#x3D;2^lg$（其中$lg&#x3D;log2(n)$，即<code>cnt</code>是<code>n</code>范围内最大的二进制整次幂，如$n&#x3D;5$时$cnt&#x3D;4$）。</li><li>比较两种拆分方案：<ul><li>方案 1：$a&#x3D;cnt,b&#x3D;n-cnt$（将<code>n</code>拆分为最大2的幂和剩余部分）。</li><li>方案 2：$a&#x3D;cnt&#x2F;2,b&#x3D;(cnt&#x2F;2)-1$（将最大 2 的幂拆分为两个最接近的数，此时$a+b&#x3D;cnt-1$，若$n\ge cnt-1$，则剩余部分不影响最优解）。</li></ul></li><li>选择最优方案：通过比较两种方案的乘积大小（简化为比较$2\times(n-cnt)$与$(cnt&#x2F;2)-1$的大小），选择乘积更大的拆分方式。</li></ol><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>代码通过<strong>线段树</strong>维护区间的 “有效计数”，结合元素出现位置的追踪，动态更新计数并求解最大值：</p><ol><li>追踪元素出现位置：用$last[x]$记录元素 $x$上一次出现的位置，$last2[x]$ 记录元素$x$上上次出现的位置。</li><li>区间更新策略：当遍历到位置$r$时（当前子区间的右端点）：<ul><li>对$[last[a[r]]+1,r]$区间加1：表示包含当前元素$a[r]$的子区间计数增加。</li><li>对$[last2[a[r]]+1,last[a[r]]]$区间减1：表示若子区间包含$a[r]$的上一次出现位置，但不包含上上次出现位置，则该子区间中$a[r]$出现次数已达3次，计数减少。</li></ul></li><li>维护最大值：线段树的根节点存储当前所有有效子区间的最大计数（即最长长度），遍历过程中实时更新答案。</li></ol><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>思路</p><ol><li>计算初始值：<ul><li>第一组的初始总和$sum$（全部选择$a[i]$时的总和）。</li><li>第二组的最小总和$minn$（全部选择$min(c, d)$ 时的总和）和最大总和$maxx$（全部选择$max(c,d)$时的总和）。</li></ul></li><li>枚举第一组的所有可能总和：<ul><li>用集合$st$存储第一组所有可能的总和。初始时$st$只包含初始总和$sum$。</li><li>对于每个元素$i$，通过加入调整量$b[i]-a[i]$，扩展$st$中的可能总和（即每个现有总和都可以选择加上该调整量，对应选择 <code>b[i]</code> 而非 <code>a[i]</code>）。</li></ul></li><li>计算最优解：<ul><li>对于$st$中的每个可能总和$i$，计算它与第二组范围$[minn, maxx]$的 “最大距离”：<ul><li>若 <code>i</code> 在 <code>[minn, maxx]</code> 内，最大距离为 <code>0</code>（完全匹配）。</li><li>若 <code>i &lt; minn</code>，最大距离为 <code>minn - i</code>。</li><li>若 <code>i &gt; maxx</code>，最大距离为 <code>i - maxx</code>。</li></ul></li><li>取所有最大距离中的最小值作为答案。</li></ul></li></ol><p>时间有限，写的比较简陋</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.28总结</title>
    <link href="/2025/07/28/%E5%A4%8F%E4%BB%A4%E8%90%A57-28%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/28/%E5%A4%8F%E4%BB%A4%E8%90%A57-28%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><h2 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit"></a>lowbit</h2><p>正整数$x$的二进制写法里最右边（也就是最后）那个1被称为$x$的$\text{lowbit}$</p><p>$\text{lowbit}(x)$是能整数$x$的2的最高次方</p><p>计算方法：$x\text{&amp;}-x$（最简洁）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于正整数$x,-x$的编码是把$x$的编码（即$x$的二进制写法）的每一位都取反再加一。</p><h2 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h2><h3 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h3><p>通过序列$A$算出树状数组$B$的方式：</p><ul><li>方法1：根据定义：算出A的前缀和序列，记作$S$，那么$B_i&#x3D;S_i-S_{i-\text{lowbit}(i)}$</li><li>方法2：假想一开始$A$的每一项都是0，而把$A_i$的初始值通过加操作加给$A_i$。</li></ul><p>树状数组被叫做这个名字是因为他隐含着树的结构，所以才会怎么叫。</p><h3 id="树状数组其实是树"><a href="#树状数组其实是树" class="headerlink" title="树状数组其实是树"></a>树状数组其实是树</h3><p>$B_{i+\text{lowbit}(i)}$是包含$B_i$的最小元素，不妨把$B_{i+\text{lowbit}(i)}$看作$B_i$的父节点。</p><h3 id="标展模板"><a href="#标展模板" class="headerlink" title="标展模板"></a>标展模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;(-x);<br>&#125;<br><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x&gt;<span class="hljs-number">0</span>)&#123;<br>        ans+=b[x];<br>        x-=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;<br>        b[x]+=v;<br>        x+=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="动态前缀和问题"><a href="#动态前缀和问题" class="headerlink" title="动态前缀和问题"></a>动态前缀和问题</h3><p>因为是模板题，所以把题面也放上来。</p><p>给你一个长为$N$的整数序列$A&#x3D;(A_1,…,A_N)$。处理$Q$个操作。操作分为两种：</p><ul><li>给你一个下标$i$，求$A_1+A_2+···+A_i$。</li><li>给你一个整数$x$和一个下标$i$，给$A_i$加上$x$。</li></ul><p>思路：</p><p>考虑一个与序列$A$一样长的序列$B&#x3D;(B_1,…,B_N)$。</p><p>对于每个$i&#x3D;1,…,N$：$B_i&#x3D;A_i+A_{i-1}+···+A_{i-\text{lowbit}(i)+1}$</p><p>也就是说$B_i$是从$A_i$开始往左数$\text{lowbit}(i)$项之和。</p><p>用一张图片辅助理解。</p><p><img src="https://cdn.rthsoftware.cn/cached-500c3e9ff41d3cc6ad6dd46e8879f0ee-avif/mapbad/386a53e5-607e-488c-86fb-f30338d4141f.pdf_page_8.png"></p><h3 id="动态区间和问题"><a href="#动态区间和问题" class="headerlink" title="动态区间和问题"></a>动态区间和问题</h3><p>区间和可以表示为两个前缀和的差，有<br>$$<br>A_l+···+A_r&#x3D;(A_1+···+A_r)-(A_1+···+A_{l-1}).<br>$$</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>考虑序列$A$的差分序列$D&#x3D;(D_1,…,D_N)$，其中$D_1&#x3D;A_1,D_i&#x3D;A_i-A{i-1}$（$2\le i\le N$）。不难看出，对于每个$i&#x3D;1,…,N$，有$A_i&#x3D;D_1+···+D_i$</p><p>树状数组通过二进制分解的思想，将数组划分为若干个子区间，每个节点负责维护一个子区间的和。其核心操作依赖于<code>lowbit</code>函数，该函数用于找到一个数二进制表示中最低位的1所对应的值（如<code>lowbit(6)=2</code>，因为6的二进制是<code>110</code>，最低位1对应$2^1&#x3D;2$）。</p><ul><li>单点更新：当更新位置<code>x</code>时，通过<code>lowbit</code>找到所有包含<code>x</code>的节点，依次更新这些节点的值。</li><li>前缀和查询：当查询前<code>x</code>个元素的和时，通过<code>lowbit</code>分解<code>x</code>，累加所有相关节点的值。</li></ul><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p><del>其实树状数组都比较模板化，导致没什么好讲的</del></p><ul><li>单点更新：更新位置<code>x</code>时，通过<code>lowbit</code>找到所有包含<code>x</code>的节点，依次更新这些节点的值。</li><li>前缀和查询：查询前<code>x</code>个元素的和时，通过<code>lowbit</code>分解<code>x</code>，累加所有相关节点的值。</li><li>区间和计算：利用前缀和的差实现，即区间<code>[l, r)</code>的和$&#x3D;$前<code>r</code>个元素的和$-$前<code>l</code>个元素的和。</li></ul><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>这题还用到了差分的思想，所以可以讲的详细一点。</p><p>对于区间更新（给$[l,r]$内所有元素加$x$），传统方法需要遍历区间内所有元素，时间复杂度为$O(r-l+1)$。而差分思想通过以下方式优化：</p><ul><li>定义一个差分数组$d$，其中$d[i]$表示数组$a$中第$i$个元素与第$i-1$个元素的差值（$d[1]&#x3D;a[1]$，$d[i]&#x3D;a[i]-a[i-1]$）。</li><li>给$[l,r]$加$x$时，只需更新差分数组：$d[l]+&#x3D;x$，$d[r+1]-&#x3D;x$（若$r+1\le n$）。</li><li>数组$a[i]$的值可通过差分数组的前缀和计算：$a[i]&#x3D;前缀和(d[1..i])$。</li></ul><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>这题能讲的也挺多。</p><ol><li>离散化处理</li></ol><p>由于序列元素可能很大（如超出树状数组的索引范围），但逆序对只与元素的相对大小有关，因此需要先对元素进行离散化：</p><ul><li>将原始序列的元素按大小排序，赋予每个元素一个 “排名”（相同元素按原位置先后排序）。</li><li>离散化后，元素的排名范围为1到$n$，可直接作为树状数组的索引，避免空间浪费。</li></ul><ol start="2"><li>树状数组统计逆序对</li></ol><p>逆序对的统计采用 “从左到右遍历，记录已出现元素” 的策略：</p><ul><li>遍历序列时，对于当前元素$a[i]$，其逆序对数量等于 “已遍历元素中比$a[i]$大的元素个数”。</li><li>树状数组用于记录已遍历元素的出现次数，通过前缀和查询可快速计算 “已出现的、排名小于等于当前元素排名的元素个数”，进而推出 “比当前元素大的元素个数”。</li></ul><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>这题是树状数组与二进制搜索结合。</p><ol><li>树状数组维护前缀和</li></ol><p>树状数组的经典功能是快速计算前缀和与执行单点更新：</p><ul><li>单点更新（<code>add</code>函数）：给位置$i$的元素增加$x$，通过树状数组的索引跳转（$i+&#x3D;i\text{&amp;}-i$）更新相关节点。</li><li>前缀和查询（<code>sum</code> 函数）：计算从位置0到$i$的元素总和，通过索引跳转（$i-&#x3D;i\text{&amp;}-i$）累加相关节点的值。</li></ul><ol start="2"><li>二进制搜索寻找下界</li></ol><p>为了找到前缀和大于等于$x$的最小索引，采用二进制跳跃：</p><ul><li>从高位到低位（这里我们从$2^{19}$开始）尝试跳跃，判断累加当前区间的和后是否仍小于$x$。</li><li>若仍小于$x$，则纳入该区间并继续尝试更大的跳跃；否则缩小跳跃范围。</li><li>最终得到的位置加1即为满足条件的最小索引。</li></ul><h1 id="关于在考场上的方法（考场上什么做）"><a href="#关于在考场上的方法（考场上什么做）" class="headerlink" title="关于在考场上的方法（考场上什么做）"></a>关于在考场上的方法（考场上什么做）</h1><p>在考试的时候，前两题基本上可以放心大胆地直接去做（<del>Just do it</del>），在遇到难题的时候，不要一下子开始埋头苦做，一做一个不吱声。要</p><ul><li>浏览一下这题以及后面题目的大致难度，评估自己最适合的题目</li><li>如果确定以及是最适合自己的题目，但是还是认为超出了自己的能力范围，那么就可以考虑一下观察数据范围，分组的数据的强度。有些题目还会有特殊性质，比如出现一些可以让暴力过的部分分。那么这时候，就要评估自己的水平，能实现那一组的部分分。这样，可以防止爆0.</li></ul><p>有些题目，比如去年的T3，只给了一个小样例，但是你认为自己的程序还需要更多的测试，那么这时候就可以考虑一下使用对拍+Windows批处理脚本自动比对是否正确。</p><h2 id="自动对拍"><a href="#自动对拍" class="headerlink" title="自动对拍"></a>自动对拍</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">@<span class="hljs-built_in">echo</span> off<br>:go<br>make_data.exe &gt;in.txt<br>need_test.exe &lt; in.txt &gt; out1.txt<br>ok.exe &lt; in.txt &gt; out2.txt<br><span class="hljs-built_in">fc</span> out1.txt out2.txt<br><span class="hljs-keyword">if</span> not errorlevel <span class="hljs-number">1</span> goto go<br><span class="hljs-built_in">echo</span> 找到一组错误解<br>goto go<br></code></pre></td></tr></table></figure><p>这段代码的中，<code>make_data.exe</code>是用于生成数据的程序，<code>need_test.exe</code>是待测试的正解，<code>ok.exe</code>是确保了正确性的暴力程序。脚本会用数据生成器生成一组数据，并分别给待测程序和暴力程序测试，比对输出结果。如果相同，就会再试一次，不同就会自动停止，保留错误的那组测试数据。</p><p>使用方法就是把这段脚本保存到一个<code>.bat</code>的批处理文件中。</p><p>准备好之后，只要让他在后台自动运行就可以了。过一段时间，再来看是否正确。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.27总结</title>
    <link href="/2025/07/27/%E5%A4%8F%E4%BB%A4%E8%90%A57-27%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/27/%E5%A4%8F%E4%BB%A4%E8%90%A57-27%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>图的表示：<br>每个节点有两个可能的 “出口”（用$endss[i][0]$和$endss[i][1]$表示），分别对应两种方向标记（如$R$和非$R$，通过<code>change</code>函数映射为0和1）。每个出口存储连接的目标节点和对应的反向标记（确保边的双向性）。</p><p>连通分量遍历：<br>用 DFS 遍历所有未访问的节点，探索其所在的连通分量，记录分量中的节点总数（<code>re1</code>）和边总数（<code>re2</code>）。由于每条边被双向记录（如节点<code>a</code>到<code>c</code>和<code>c</code>到<code>a</code>），统计的<code>re2</code>实际是边数的2倍，因此需要除以2得到真实边数。</p><p>分量分类：<br>对每个连通分量，比较真实边数（<code>re2/2</code>）和节点数（<code>re1</code>）：</p><ul><li>若<code>边数=节点数</code>，归为第一类（<code>ans1</code>计数）。</li><li>否则，归为第二类（<code>ans2</code>计数）。</li></ul><p>考试的时候这题对我来说还是比较简单的。</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>这题考试的时候花了一点时间，但是最后还是搞定了。</p><p>核心逻辑是分阶段分析路径和约束范围计算，高效统计有效路径：</p><ol><li>将路径分为前$k$步和后$k_2&#x3D;len-k$步（$k$表示从0到$len$遍历所有可能的分割）。</li><li>对前$k$步，计算向下步数（$d_1$）的合法范围$[l_1, r_1]$。</li><li>对后$k_2$步，计算向下步数（$d_2$）的合法范围$[l_2, r_2]$。</li><li>结合总向下步数必须为$h-1$（$d_1+d_2&#x3D;h-1$）和总向右步数必须为$w-1$（$(k-d1)+(k2-d2)&#x3D;w-1$），推导$d_1$的有效范围，进而计算该分割下的有效路径数。</li></ol><p>这题我的代码逻辑比较复杂，所以把代码的具体步骤也放上来。</p><ol><li>前<code>k</code>步的约束范围计算</li></ol><ul><li><p>数组定义：</p><ul><li>$mind[k]$：前$k$步中最少的向下步数（<code>&#39;D&#39;</code>的数量）。</li><li>$minr[k]$：前$k$步中最少的向右步数（<code>&#39;R&#39;</code>的数量）。</li><li>$maxd[k]$：前$k$步中最多的向下步数（<code>&#39;D&#39;</code> + <code>&#39;?&#39;</code>的数量）。</li><li>$maxr[k]$：前$k$步中最多的向右步数（<code>&#39;R&#39;</code> + <code>&#39;?&#39;</code>的数量）。</li></ul></li><li><p>合法范围$[l_1, r_1]$：</p><p>前$k$步的向下步数$d_1$需满足：</p><ul><li>$d1\ge mind[k]$（至少走$s$中要求的<code>&#39;D&#39;</code>）。</li><li>$d1\ge-maxr[k]$（向右步数$k-d_1$不能超过最大可能的向右步数）。</li><li>$d1\ge maxd[k]$（最多走$s$中允许的<code>&#39;D&#39;</code> + <code>&#39;?&#39;</code>）。</li><li>$d1\ge k-minr[k]$（向右步数$k-d_1$不能少于要求的<code>&#39;R&#39;</code>）。<br>因此，$l_1&#x3D;max(mind[k],k-maxr[k])$，$r_1&#x3D;min(maxd[k],k-minr[k])$。</li></ul></li></ul><ol start="2"><li>后<code>k2</code>步的约束范围计算</li></ol><ul><li><p>数组定义</p><p>（从后往前累加）：</p><ul><li>$sud[i]$：从位置$i$到结尾的<code>&#39;D&#39;</code>数量。</li><li>$sur[i]$：从位置$i$到结尾的<code>&#39;R&#39;</code>数量。</li><li>$suq[i]$：从位置$i$到结尾的<code>&#39;?&#39;</code>数量。</li></ul></li><li><p>合法范围$[l_2, r_2]$：后$k_2$步的向下步数$d_2$需满足：</p><ul><li>$d_2\ge mindsu$（<code>sud</code>中<code>&#39;D&#39;</code>的数量）。</li><li>$d2\ge k_2-(minrsu+suqv)$（向右步数$k_2-d_2$不能超过<code>&#39;R&#39; + &#39;?&#39;</code>的数量）。</li><li>$d2\le mindsu+suqv$（<code>&#39;D&#39; + &#39;?&#39;</code>的数量）。</li><li>$d2\le k2-minrsu$（向右步数不能少于<code>&#39;R&#39;</code>的数量）。<br>因此，$l_2&#x3D;max(mindsu, k_2-(minrsu+suqv))$，$r_2&#x3D;min(mindsu+suqv, k_2-minrsu)$。</li></ul></li></ul><ol start="3"><li>有效路径计数</li></ol><ul><li>总向下步数需满足$d_1+d_2&#x3D;h-1\rightarrow d_2&#x3D;(h-1)-d_1$。</li><li>结合$d_1$的范围$[l_1, r_1]$和$d_2$的范围$[l_2, r_2]$，推导出$d_1$的有效区间：<br>$d_1\ge l_1$，$d_1\le r_1$，$d_2\ge l_2\rightarrow d_1\le (h-1)-l_2$，$d_2\le r_2\rightarrow d_1\ge (h-1)-r_2$。<br>同时，$d_1$需满足网格边界约束（$i_{min}$和$i_{max}$，与$h$和$w$相关）。</li><li>有效路径数为该区间的长度（若区间合法），累加所有$k$的结果即为总答案。</li></ul><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>这题考试的时候就敲了TLE的部分风。</p><p><del>T2写太多了，这题少些一点</del></p><p>核心思路：</p><ol><li>追踪元素的激活状态：用数组$vis[x]$记录元素$x$的激活状态，$vis[x]&#x3D;0$表示未激活，$vis[x]&#x3D;i$表示在第$i$次操作时被激活。</li><li>记录活跃元素总数的前缀和：用数组$sum[i]$记录前$i$次操作中，每一次操作后 “活跃元素总数” 的累加和（即$sum[i]&#x3D;sum[i-1]+len$，其中$len$是第$i$次操作后的活跃元素总数）。</li><li>计算元素的贡献：当元素$x$从激活变为未激活时，其激活时间段为$[vis[x], 当前操作次数]$，贡献为该区间内 “活跃元素总数” 的和（即$sum[当前]-sum[vis[x]-1]$）。若操作结束后元素仍处于激活状态，则需补充计算从最后一次激活到操作结束的贡献。</li></ol><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>这题好像没搞定，没写完，就没交了。</p><ol><li>计算最长递增子序列（<code>LIS</code>）的长度：<br>利用贪心算法结合二分查找，分别从左到右和从右到左遍历序列，记录每个元素在<code>LIS</code>中的位置信息。</li><li>识别<code>LIS</code>的组成元素：<br>对于每个元素，判断其是否可能属于某条<code>LIS</code>（通过左右遍历的位置信息之和是否等于<code>LIS</code>长度加1）。</li><li>筛选不可替代的关键元素：<br>统计每个<code>LIS</code>位置上的元素数量，若某个位置上仅有一个元素，则该元素是不可替代的关键元素。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.26总结</title>
    <link href="/2025/07/26/%E5%A4%8F%E4%BB%A4%E8%90%A57-26%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/26/%E5%A4%8F%E4%BB%A4%E8%90%A57-26%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树满足条件：</p><ul><li>有根树</li><li>每个节点的孩子不超过两个</li><li>孩子有左右之分</li></ul><p>满二叉树是指所有层都是完整的二叉树，即如果二叉树有$n$层，那么就有$2^n-1$个节点。</p><p>完全二叉树是指除了最下一层的节点是从左往右排列且可能不满之外，其他部分是一棵满二叉树。</p><p>完全二叉数或满二叉树中，设一个节点的编号为$n$，则其左儿子编号为$2n$，右儿子编号是$2n+1$。</p><h2 id="T1-静态RMQ"><a href="#T1-静态RMQ" class="headerlink" title="T1 静态RMQ"></a>T1 静态RMQ</h2><p>这题是模板题，所以线段树的模板这里就直接放上来就可以了。</p><p>具体的其他内容就不详细写了。</p><h3 id="结构体定义部分"><a href="#结构体定义部分" class="headerlink" title="结构体定义部分"></a>结构体定义部分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e5</span><span class="hljs-number">+3</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">int</span> l,r;<br><span class="hljs-type">int</span> val;<br><span class="hljs-built_in">node</span>():<span class="hljs-built_in">l</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">r</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">val</span>(<span class="hljs-number">0</span>)&#123;&#125;<br><span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> val):<span class="hljs-built_in">l</span>(l),<span class="hljs-built_in">r</span>(r),<span class="hljs-built_in">val</span>(val)&#123;&#125;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<span class="hljs-comment">//这里开是4n的数组是因为如果使用2n的数组是默认是完全二叉树的前提下，但是线段树虽然除了最底下一层是满二叉树，但是最底下一层并不是按顺序紧密排列的。所以要开4n的空间防止越界。</span><br></code></pre></td></tr></table></figure><h3 id="初始化部分"><a href="#初始化部分" class="headerlink" title="初始化部分"></a>初始化部分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ls (i&lt;&lt;1)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rs (i&lt;&lt;1|1)</span><br><br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> i)</span></span>&#123;<br>t[i]=<span class="hljs-built_in">node</span>(l,r,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(l==r)&#123;<br>t[i].val=a[l];<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(l,mid,ls);<br><span class="hljs-built_in">build</span>(mid<span class="hljs-number">+1</span>,r,rs);<br>t[i].val=<span class="hljs-built_in">min</span>(t[ls].val,t[rs].val);<br><br></code></pre></td></tr></table></figure><h3 id="查询部分"><a href="#查询部分" class="headerlink" title="查询部分"></a>查询部分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> ql,<span class="hljs-type">int</span> qr)</span></span>&#123;<br><span class="hljs-keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;<br><span class="hljs-keyword">return</span> t[i].val;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res=<span class="hljs-number">1e9</span><span class="hljs-number">+7</span>;<br><span class="hljs-keyword">if</span>(ql&lt;=mid)&#123;<br>res=<span class="hljs-built_in">min</span>(res,<span class="hljs-built_in">query</span>(l,mid,ls,ql,qr));<br>&#125;<br><span class="hljs-keyword">if</span>(qr&gt;mid)&#123;<br>res=<span class="hljs-built_in">min</span>(res,<span class="hljs-built_in">query</span>(mid<span class="hljs-number">+1</span>,r,rs,ql,qr));<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> ls<span class="hljs-comment">//用完后及时undef，防止用多个算法时define冲突。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span> rs</span><br></code></pre></td></tr></table></figure><h3 id="主函数与处理查询部分"><a href="#主函数与处理查询部分" class="headerlink" title="主函数与处理查询部分"></a>主函数与处理查询部分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n,q;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)&#123;<br>cin&gt;&gt;a[i];<br>&#125;<br><br><span class="hljs-built_in">build</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">while</span>(q--)&#123;<br><span class="hljs-type">int</span> l,r;<br>cin&gt;&gt;l&gt;&gt;r;<br>cout&lt;&lt;<span class="hljs-built_in">query</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,l,r<span class="hljs-number">-1</span>)&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-单点加区间求和"><a href="#T2-单点加区间求和" class="headerlink" title="T2 单点加区间求和"></a>T2 单点加区间求和</h2><p>整体步骤：</p><ol><li>线段树（Segment Tree）的构建</li></ol><ul><li>若当前节点表示的区间长度为1（<code>l=r</code>），则直接存储数组对应位置的值。</li><li>否则，将区间分为左右两半（<code>mid=(l+r)&gt;&gt;1</code>），递归构建左子树和右子树，当前节点的值为左右子树的和。</li></ul><ol start="2"><li>单点更新操作（<code>update</code>函数）<br>当需要给数组中位置<code>p</code>的元素增加<code>x</code>时：</li></ol><ul><li>从根节点出发，递归找到对应<code>p</code>的叶子节点。</li><li>更新叶子节点的值（加上<code>x</code>）。</li><li>回溯更新所有祖先节点的值（每个祖先节点的值为左右子树的和，因此子节点变化后需重新计算）。</li></ul><ol start="3"><li>区间查询操作（<code>query</code>函数）<br>当需要查询区间<code>[ql,qr]</code>的总和时从根节点出发，判断当前节点的区间与查询区间的关系：</li></ol><ul><li>若当前节点区间完全在查询区间内，直接返回该节点的值。</li><li>若当前节点区间与查询区间部分重叠，递归查询左子树和右子树，返回两者的和。</li><li>若完全不重叠，返回 0。</li></ul><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>代码的核心功能是维护一个数组，支持两种操作：</p><ul><li>区间更新：给数组中某个连续区间内的所有元素同时增加一个值。</li><li>单点查询：查询数组中指定位置元素的当前值。</li></ul><p>由于需要频繁进行区间更新（若用朴素方法，每次更新的时间复杂度为$O(n)$，效率极低），线段树结合懒标记是解决这类问题的高效方案，可将单次操作的时间复杂度优化至$O(logn)$。</p><p>懒标记是线段树中用于延迟更新的技术：</p><ul><li>当需要对某个区间执行更新时，若当前节点的区间完全包含在更新区间内，不立即更新其所有子节点，而是在节点上记录一个 “待更新标记”（<code>tag</code>）。</li><li>只有当后续操作需要访问该节点的子节点时，才将标记 “下放”（<code>pushdown</code>）到子节点，确保子节点的状态正确。</li></ul><p>这种机制避免了不必要的重复更新，显著提高了区间更新的效率。</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>核心功能是维护一个数组，支持两种操作：</p><ol><li>区间线性更新：对指定区间<code>[l,r)</code>内的所有元素执行操作$a[i]&#x3D;(a[i]\times b+c)%MOD$（先乘$b$，再加$c$，最后取模）。</li><li>单点查询：查询数组中指定位置$i$的元素经过所有更新后的当前值（取模后）。</li></ol><p>由于需要频繁进行区间线性变换（朴素方法时间复杂度为$O(n)$，效率极低），线段树结合双懒标记是最优解决方案，可将单次操作时间复杂度优化至$O(\log n)$。<br>懒标记下放流程：<br>若节点存在有效的变换（<code>mul!=1</code>或<code>add!=0</code>），则将变换下放至左右子节点：</p><ul><li>左子节点：<code>mul=(mul*父节点mul)%MOD</code>，<code>add=(add*父节点mul+父节点add)%MOD</code>。</li><li>右子节点：同上。</li><li>清空当前节点的标记（<code>mul=1</code>，<code>add=0</code>），避免重复下放。</li></ul><h2 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h2><p>代码需要处理两种核心操作：</p><ul><li>区间线性更新：对数组中$[l,r]$区间内的所有元素执行变换$x\rightarrow(x\times b+c)%MOD$（先乘$b$，再加$c$，最后取模）。</li><li>区间求和查询：计算数组中$[l,r]$区间内所有元素的和，结果对<code>MOD</code>取模。</li></ul><p>由于数组规模可能很大（$n$达$5\times10^5$），且操作频繁（$q$达$5\times10^5$），必须使用高效的数据结构。线段树结合双懒标记能将单次操作的时间复杂度降至$O(\log n)$，满足需求。</p><h2 id="T6"><a href="#T6" class="headerlink" title="T6"></a>T6</h2><p>核心思路：函数复合线段树</p><ol><li>函数复合的特性<br>线性函数的复合满足结合律，但不满足交换律，即$(f∘g)∘h&#x3D;f∘(g∘h)$，但$f∘g≠g∘f$（通常）。因此，区间<code>[l, r)</code>的复合函数需按顺序从左到右复合（$f_l∘f_{l+1}∘…∘f_{r-1}$）。</li></ol><p>线段树的每个节点存储对应区间的复合函数，通过子节点的复合函数计算得到。</p><ol start="2"><li>线段树的结构</li></ol><p>每个节点$seg[i]$存储一个线性函数$func(a,b)$，表示该节点对应区间的所有函数复合后的结果。</p><p>叶子节点：对应单个线性函数（区间长度为 1）。</p><p>非叶子节点：其函数为左子树函数与右子树函数的复合（注意顺序：右子树函数先作用，左子树函数后作用，即$seg[i]&#x3D;seg[右子树]\times seg[左子树]）$。</p><h2 id="T7"><a href="#T7" class="headerlink" title="T7"></a>T7</h2><p>核心思路：带区间替换标记的函数复合线段树</p><ol><li>函数复合的特性</li></ol><p>线性函数的复合满足结合律，因此区间<code>[l,r)</code>的复合函数可通过子区间的复合函数递归计算。</p><p>若区间内所有函数均为同一个函数$f$，则复合结果为$f^k$，其中$k$为区间长度。例如，$f^2(x)&#x3D;f(f(x))$，$f^3(x) &#x3D; f(f(f(x)))$，可通过快速幂高效计算。</p><ol start="2"><li>线段树与区间替换标记</li></ol><p>每个节点存储：</p><p>区间<code>[l, r)</code>的复合函数$f$。</p><p>区间替换标记same（true表示区间内所有函数均为tag）。</p><p>替换函数tag（当same为true时有效）。</p><p>当需要替换区间<code>[l, r)</code>为函数$g$时，若节点区间完全包含在<code>[l, r)</code>内，只需标记<code>same=true</code>并记录<code>tag=g</code>，同时通过快速幂计算节点的复合函数$f&#x3D;g^k$（$k$为区间长度）。</p><p>当需要访问子节点时，需将替换标记下放（<code>pushdown</code>），确保子节点的状态正确。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.25总结</title>
    <link href="/2025/07/25/%E5%A4%8F%E4%BB%A4%E8%90%A57-25%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/25/%E5%A4%8F%E4%BB%A4%E8%90%A57-25%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天<del>照例</del>还是模考。</p><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p>我发现写时间线要考试的时候自己记录，容易忘也很烦，以后模考的话时间线就不写了吧。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>当遇到一道题目，如果有两个思路，一个简单但是正确性不确定，另一个较难但是确定正确，就可以通过写对拍等方式验证猜想。</p><p>思路是给一个数组中的每个元素分配一个“分数”，然后计算所有分数的总和。分数的分配规则基于元素与其相邻元素的大小关系：</p><ul><li>较大的元素应该获得较高的分数</li><li>相等的元素应该获得相同的分数</li><li>最终每个元素的分数是其从左侧和右侧两个方向计算出的分数的最大值</li><li>计算出的最大值即为答案。</li></ul><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>考虑贪心。</p><ul><li>匹配<code>K</code>的每一位，尽可能保持前缀相同（以保证<code>M</code>最小），仅在必要时调整某一位为更大的数字，并将剩余数字按升序排列（确保后续位最小）。<br>回溯：</li><li>一位无法匹配<code>K</code>时，回溯到前一位寻找更大的数字，避免 “卡死” 在无效路径上。<br>数字排列的化：</li><li>定某一位使用更大的数字后，剩余数字按升序排列，直接保证后续位最小，无需再比较。</li></ul><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>要使总不满意度最小，关键是让 <code>A</code> 中分给学生的 <code>N-1</code> 个元素与 <code>B</code> 的 <code>N-1</code> 个元素 “最优匹配”（即每个 <code>B[j]</code> 匹配最接近的 <code>A[i]</code>）。由于 <code>A</code> 和 <code>B</code> 都是数字，排序后按顺序匹配是最优策略（这是贪心算法的经典结论：两个数组排序后一一对应，差值之和最小）。</p><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>分两种情况处理：</p><ul><li>若整个字符串已经是回文串（指针相遇仍未找到不匹配）：<br>此时需要插入一个字符使其仍为回文串。最简单的方式是在中间位置插入一个与中心字符相同的字符（如 “ee” 插入 “y” 变成 “eye”）。</li><li>若存在不匹配的<code>s[i]</code>和<code>s[j]</code>：<br>尝试两种插入方案：<ul><li>在 <code>i</code> 位置左侧插入 <code>s[j]</code>（使 <code>s[j]</code> 与右侧的 <code>s[j]</code> 对称）。</li><li>在 <code>j</code> 位置右侧插入 <code>s[i]</code>（使 <code>s[i]</code> 与左侧的 <code>s[i]</code> 对称）。<br>检查两种方案是否能形成回文串，若能则输出其中一个；若都不能，则输出 <code>NA</code>。</li></ul></li></ul><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><h4 id="1-棋子位置的约束分析"><a href="#1-棋子位置的约束分析" class="headerlink" title="1. 棋子位置的约束分析"></a>1. 棋子位置的约束分析</h4><p>设：</p><ul><li><code>r[i]</code>表示第<code>i</code>行是否反转（1&#x3D;反转，0&#x3D;不反转）。</li><li><code>c[j]</code>表示第<code>j</code>列是否反转（1&#x3D;反转，0&#x3D;不反转）。</li></ul><p>棋子<code>(A_i, B_i)</code>最终为白色的条件：<br>初始格子为白色，反转次数为偶数（0或2次）时仍为白色，即：<br><code>r[A_i]+c[B_i]≡0(mod2)</code> → <code>c[B_i]=r[A_i]</code>（因为0+0&#x3D;0，1+1&#x3D;2≡0）。 </p><p>这意味着：<em>列的反转状态由其所在行的反转状态决定</em>，两者必须相同。</p><h4 id="2-连通分量划分"><a href="#2-连通分量划分" class="headerlink" title="2. 连通分量划分"></a>2. 连通分量划分</h4><p>通过棋子的约束关系，行和列形成“连通分量”： </p><ul><li>若棋子<code>(a, b)</code>存在，则行<code>a</code>与列 <code>b</code> 必须同状态（<code>r[a]=c[b]</code>）。 </li><li>由此可构建一张 bipartite 图（行和列作为节点，棋子为边），连通分量内的行和列的反转状态必须一致（要么全反转，要么全不反转）。</li></ul><p>代码通过 DFS 遍历 划分连通分量，记录每个分量包含的行数（<code>x[tot]</code>）和列数（<code>y[tot]</code>）。</p><h4 id="3-动态规划（DP）求解最优反转方案"><a href="#3-动态规划（DP）求解最优反转方案" class="headerlink" title="3. 动态规划（DP）求解最优反转方案"></a>3. 动态规划（DP）求解最优反转方案</h4><p>设最终选择反转的行总数为<code>i</code>（<code>0≤i≤H</code>），则： </p><ul><li>未反转的行数为<code>H-i</code>。 </li><li>根据约束，反转的列数 <code>j</code> 由连通分量的选择决定（需满足 <code>0≤j≤W</code>）。</li></ul><p>黑色格子数量的计算公式（推导见下文）：<br><code>黑色格子数=i×(W-j)+j×(H-i)</code> </p><p>为最大化该值，需通过 DP 计算每个可能的<code>i</code>对应的最小和最大<code>j</code>（<code>j</code>需在<code>[0, W]</code>内）： </p><ul><li><code>f[i]</code>：选择<code>i</code>行反转时，最多能反转的列数。 </li><li><code>g[i]</code>：选择<code>i</code>行反转时，最少能反转的列数。</li></ul>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员的祈福方式</title>
    <link href="/2025/07/25/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%A5%88%E7%A6%8F%E6%96%B9%E5%BC%8F/"/>
    <url>/2025/07/25/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E7%A5%88%E7%A6%8F%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>有时候，程序员们在写代码时，回想不要出现bug，这时就会通过键盘打出一些内容以祈福。</p><p>为了方便<del>复制</del>，我把这些内容就写在下面了。使用的时候记得使用多行注释。</p><p>$\huge温情提示：点击右上角可以直接复制$</p><h3 id="神龙保佑"><a href="#神龙保佑" class="headerlink" title="神龙保佑"></a>神龙保佑</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">11111111111111111111</span><span class="hljs-literal">-----</span><span class="hljs-comment">神龙保佑</span><span class="hljs-string">,</span><span class="hljs-comment">永无BUG</span><span class="hljs-literal">-----</span><span class="hljs-comment">11111111111111111111</span><br><span class="hljs-comment">11111111111111111111111111111111100001111111111111111111111111111</span><br><span class="hljs-comment">11111111111111111111111111111110000111111111111111111111111111111</span><br><span class="hljs-comment">11111111111111111111111111111000000111111111111111111111111111111</span><br><span class="hljs-comment">11111111111111111111111111100000011110001100000000000000011111111</span><br><span class="hljs-comment">11111111111111111100000000000000000000000000000000011111111111111</span><br><span class="hljs-comment">11111111111111110111000000000000000000000000000011111111111111111</span><br><span class="hljs-comment">11111111111111111111111000000000000000000000000000000000111111111</span><br><span class="hljs-comment">11111111111111111110000000000000000000000000000000111111111111111</span><br><span class="hljs-comment">11111111111111111100011100000000000000000000000000000111111111111</span><br><span class="hljs-comment">11111111111111100000110000000000011000000000000000000011111111111</span><br><span class="hljs-comment">11111111111111000000000000000100111100000000000001100000111111111</span><br><span class="hljs-comment">11111111110000000000000000001110111110000000000000111000011111111</span><br><span class="hljs-comment">11111111000000000000000000011111111100000000000000011110001111111</span><br><span class="hljs-comment">11111110000000011111111111111111111100000000000000001111100111111</span><br><span class="hljs-comment">11111111000001111111111111111111110000000000000000001111111111111</span><br><span class="hljs-comment">11111111110111111111111111111100000000000000000000000111111111111</span><br><span class="hljs-comment">11111111111111110000000000000000000000000000000000000111111111111</span><br><span class="hljs-comment">11111111111111111100000000000000000000000000001100000111111111111</span><br><span class="hljs-comment">11111111111111000000000000000000000000000000111100000111111111111</span><br><span class="hljs-comment">11111111111000000000000000000000000000000001111110000111111111111</span><br><span class="hljs-comment">11111111100000000000000000000000000000001111111110000111111111111</span><br><span class="hljs-comment">11111110000000000000000000000000000000111111111110000111111111111</span><br><span class="hljs-comment">11111100000000000000000001110000001111111111111110001111111111111</span><br><span class="hljs-comment">11111000000000000000011111111111111111111111111110011111111111111</span><br><span class="hljs-comment">11110000000000000001111111111111111100111111111111111111111111111</span><br><span class="hljs-comment">11100000000000000011111111111111111111100001111111111111111111111</span><br><span class="hljs-comment">11100000000001000111111111111111111111111000001111111111111111111</span><br><span class="hljs-comment">11000000000001100111111111111111111111111110000000111111111111111</span><br><span class="hljs-comment">11000000000000111011111111111100011111000011100000001111111111111</span><br><span class="hljs-comment">11000000000000011111111111111111000111110000000000000011111111111</span><br><span class="hljs-comment">11000000000000000011111111111111000000000000000000000000111111111</span><br><span class="hljs-comment">11001000000000000000001111111110000000000000000000000000001111111</span><br><span class="hljs-comment">11100110000000000001111111110000000000000000111000000000000111111</span><br><span class="hljs-comment">11110110000000000000000000000000000000000111111111110000000011111</span><br><span class="hljs-comment">11111110000000000000000000000000000000001111111111111100000001111</span><br><span class="hljs-comment">11111110000010000000000000000001100000000111011111111110000001111</span><br><span class="hljs-comment">11111111000111110000000000000111110000000000111111111110110000111</span><br><span class="hljs-comment">11111110001111111100010000000001111100000111111111111111110000111</span><br><span class="hljs-comment">11111110001111111111111110000000111111100000000111111111111000111</span><br><span class="hljs-comment">11111111001111111111111111111000000111111111111111111111111100011</span><br></code></pre></td></tr></table></figure><h3 id="神兽保佑"><a href="#神兽保佑" class="headerlink" title="神兽保佑"></a>神兽保佑</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">/**<br><span class="hljs-bullet">*　　　　　　　　</span>┏┓　　　┏┓<span class="hljs-code">+ +</span><br><span class="hljs-bullet">*　　　　　　　</span>┏┛┻━━━┛┻┓ <span class="hljs-code">+ +</span><br><span class="hljs-bullet">*　　　　　　　</span>┃　　　　　　　┃ 　<br><span class="hljs-bullet">*　　　　　　　</span>┃　　　━　　　┃ <span class="hljs-code">++ +</span> <span class="hljs-code">+ +</span><br><span class="hljs-bullet">*　　　　　　 </span>████━████ ┃+<br><span class="hljs-bullet">*　　　　　　　</span>┃　　　　　　　┃ +<br><span class="hljs-bullet">*　　　　　　　</span>┃　　　┻　　　┃<br><span class="hljs-bullet">*　　　　　　　</span>┃　　　　　　　┃ <span class="hljs-code">+ +</span><br><span class="hljs-bullet">*　　　　　　　</span>┗━┓　　　┏━┛<br><span class="hljs-bullet">*　　　　　　　　　</span>┃　　　┃　　　　　　　　　　　<br><span class="hljs-bullet">*　　　　　　　　　</span>┃　　　┃ <span class="hljs-code">+ +</span> <span class="hljs-code">+ +</span><br><span class="hljs-bullet">*　　　　　　　　　</span>┃　　　┃　　　　Code is far away from bug with the animal protecting　　　　　　　<br><span class="hljs-bullet">*　　　　　　　　　</span>┃　　　┃ + 　　　　神兽保佑,代码无bug　　<br><span class="hljs-bullet">*　　　　　　　　　</span>┃　　　┃<br><span class="hljs-bullet">*　　　　　　　　　</span>┃　　　┃　　+　　　　　　　　　<br><span class="hljs-bullet">*　　　　　　　　　</span>┃　 　　┗━━━┓ <span class="hljs-code">+ +</span><br><span class="hljs-bullet">*　　　　　　　　　</span>┃ 　　　　　　　┣┓<br><span class="hljs-bullet">*　　　　　　　　　</span>┃ 　　　　　　　┏┛<br><span class="hljs-bullet">*　　　　　　　　　</span>┗┓┓┏━┳┓┏┛ <span class="hljs-code">+ +</span> <span class="hljs-code">+ +</span><br><span class="hljs-bullet">*　　　　　　　　　　</span>┃┫┫　┃┫┫<br><span class="hljs-bullet">*　　　　　　　　　　</span>┗┻┛　┗┻┛<span class="hljs-code">+ +</span> <span class="hljs-code">+ +</span><br>*/<br></code></pre></td></tr></table></figure><h3 id="佛祖保佑"><a href="#佛祖保佑" class="headerlink" title="佛祖保佑"></a>佛祖保佑</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>                            _ooOoo_  <br><span class="hljs-string">//</span>                           o8888888o  <br><span class="hljs-string">//</span>                           88<span class="hljs-string">&quot; . &quot;</span>88  <br><span class="hljs-string">//</span>                           <span class="hljs-params">(| -_- |)</span>  <br><span class="hljs-string">//</span>                            O\ = <span class="hljs-string">/O</span>  <br><span class="hljs-string">//</span>                        ____/`<span class="hljs-params">---</span>&#x27;\____  <br><span class="hljs-string">//</span>                      .   &#x27; \\| |<span class="hljs-string">//</span> `.  <br><span class="hljs-string">//</span>                       / \\||| : |||<span class="hljs-string">//</span> \  <br><span class="hljs-string">//</span>                     / _||||| -<span class="hljs-function">:-</span> |||||- \  <br><span class="hljs-string">//</span>                       | | \\\ - <span class="hljs-string">///</span> | |  <br><span class="hljs-string">//</span>                     | \_| &#x27;&#x27;\<span class="hljs-params">---/</span>&#x27;&#x27; | |  <br><span class="hljs-string">//</span>                      \ <span class="hljs-string">.-</span>\__ `-` ___/-. /  <br><span class="hljs-string">//</span>                   ___`. .&#x27; <span class="hljs-string">/--.--</span>\ `. . __  <br><span class="hljs-string">//</span>                .<span class="hljs-string">&quot;&quot;</span> &#x27;&lt; `<span class="hljs-string">.___</span>\_&lt;|&gt;_/___.&#x27; &gt;&#x27;<span class="hljs-string">&quot;&quot;</span>.  <br><span class="hljs-string">//</span>               | | : `- \`.;`\ _ /`;.`/ - ` : | |  <br><span class="hljs-string">//</span>                 \ \ `-. \_ __\ <span class="hljs-string">/__</span> _/ <span class="hljs-string">.-</span>` / /  <br><span class="hljs-string">//</span>         ======`-<span class="hljs-string">.____</span>`-<span class="hljs-string">.___</span>\_____/___.-`____.-&#x27;======  <br><span class="hljs-string">//</span>                            `=<span class="hljs-params">---=</span>&#x27;  <br><span class="hljs-string">//</span>  <br><span class="hljs-string">//</span>         <span class="hljs-string">.............................................</span>  <br><span class="hljs-string">//</span>                  佛祖保佑             永无BUG<br><br><span class="hljs-string">//</span>          佛曰:  <br><span class="hljs-string">//</span>                  写字楼里写字间，写字间里程序员；  <br><span class="hljs-string">//</span>                  程序人员写程序，又拿程序换酒钱。  <br><span class="hljs-string">//</span>                  酒醒只在网上坐，酒醉还来网下眠；  <br><span class="hljs-string">//</span>                  酒醉酒醒日复日，网上网下年复年。  <br><span class="hljs-string">//</span>                  但愿老死电脑间，不愿鞠躬老板前；  <br><span class="hljs-string">//</span>                  奔驰宝马贵者趣，公交自行程序员。  <br><span class="hljs-string">//</span>                  别人笑我忒疯癫，我笑自己命太贱；  <br><span class="hljs-string">//</span>                  不见满街漂亮妹，哪个归得程序员？<br></code></pre></td></tr></table></figure><h3 id="比个耶-•̀-ω-•́-y"><a href="#比个耶-•̀-ω-•́-y" class="headerlink" title="比个耶( •̀ ω •́ )y"></a>比个耶( •̀ ω •́ )y</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs powershell">//                      d*<span class="hljs-comment">##$.</span><br>// zP<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;<span class="hljs-variable">$e</span>.           <span class="hljs-variable">$</span>&quot;</span>    <span class="hljs-variable">$o</span><br>//<span class="hljs-number">4</span><span class="hljs-variable">$</span>       <span class="hljs-string">&#x27;$          $&quot;      $</span><br><span class="hljs-string">//&#x27;</span><span class="hljs-variable">$</span>        <span class="hljs-string">&#x27;$        J$       $F</span><br><span class="hljs-string">// &#x27;</span>b        <span class="hljs-variable">$k</span>       <span class="hljs-variable">$</span>&gt;       <span class="hljs-variable">$</span><br>//  <span class="hljs-variable">$k</span>        <span class="hljs-variable">$r</span>     J<span class="hljs-variable">$</span>       d<span class="hljs-variable">$</span><br>//  <span class="hljs-string">&#x27;$         $     $&quot;       $~</span><br><span class="hljs-string">//   &#x27;</span><span class="hljs-variable">$</span>        <span class="hljs-string">&quot;<span class="hljs-variable">$</span>   &#x27;<span class="hljs-variable">$E</span>       <span class="hljs-variable">$</span></span><br><span class="hljs-string">//    <span class="hljs-variable">$</span>         <span class="hljs-variable">$L</span>   <span class="hljs-variable">$</span>&quot;</span>      <span class="hljs-variable">$F</span> ...<br>//     <span class="hljs-variable">$</span>.       <span class="hljs-number">4</span>B   <span class="hljs-variable">$</span>      <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>*<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;*b</span><br><span class="hljs-string">//     &#x27;<span class="hljs-variable">$</span>        <span class="hljs-variable">$</span>.  <span class="hljs-variable">$</span><span class="hljs-variable">$</span>     <span class="hljs-variable">$</span><span class="hljs-variable">$</span>      <span class="hljs-variable">$F</span></span><br><span class="hljs-string">//      &quot;</span><span class="hljs-variable">$</span>       <span class="hljs-built_in">R</span><span class="hljs-variable">$</span>  <span class="hljs-variable">$F</span>     <span class="hljs-variable">$</span><span class="hljs-string">&quot;      <span class="hljs-variable">$</span></span><br><span class="hljs-string">//       <span class="hljs-variable">$k</span>      ?<span class="hljs-variable">$</span> u*     dF      .<span class="hljs-variable">$</span></span><br><span class="hljs-string">//       ^<span class="hljs-variable">$</span>.      <span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span>     z<span class="hljs-variable">$</span>      u<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$e</span><br>//        <span class="hljs-comment">#$b             $E.dW@e$&quot;    ?$</span><br>//         <span class="hljs-comment">#$           .o$$# d$$$$c    ?F</span><br>//          <span class="hljs-variable">$</span>      .d<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">#&quot; . zo$&gt;   #$r .uF</span><br>//          <span class="hljs-variable">$L</span> .u<span class="hljs-variable">$</span>*<span class="hljs-string">&quot;      <span class="hljs-variable">$</span>&amp;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$k</span>   .<span class="hljs-variable">$</span><span class="hljs-variable">$d</span><span class="hljs-variable">$</span><span class="hljs-variable">$F</span></span><br><span class="hljs-string">//           <span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span>            <span class="hljs-string">&quot;&quot;</span>^<span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$P</span>&quot;</span><span class="hljs-variable">$P9</span><span class="hljs-variable">$</span><br>//          JP              .o<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$u:</span><span class="hljs-variable">$P</span> <span class="hljs-variable">$</span><span class="hljs-variable">$</span><br>//          <span class="hljs-variable">$</span>          ..ue<span class="hljs-variable">$</span><span class="hljs-string">&quot;      &quot;</span><span class="hljs-string">&quot;  <span class="hljs-variable">$</span>&quot;</span><br>//         d<span class="hljs-variable">$</span>          <span class="hljs-variable">$F</span>              <span class="hljs-variable">$</span><br>//         <span class="hljs-variable">$</span><span class="hljs-variable">$</span>     ....udE             <span class="hljs-number">4</span>B<br>//          <span class="hljs-comment">#$    &quot;&quot;&quot;&quot;` $r            @$</span><br>//           ^<span class="hljs-variable">$L</span>        <span class="hljs-string">&#x27;$            $F</span><br><span class="hljs-string">//             RN        4N           $</span><br><span class="hljs-string">//              *$b                  d$</span><br><span class="hljs-string">//               $$k                 $F</span><br><span class="hljs-string">//               $$b                $F</span><br><span class="hljs-string">//                 $&quot;&quot;               $F</span><br><span class="hljs-string">//                 &#x27;</span><span class="hljs-variable">$</span>                <span class="hljs-variable">$</span><br>//                  <span class="hljs-variable">$L</span>               <span class="hljs-variable">$</span><br>//                  <span class="hljs-string">&#x27;$               $</span><br><span class="hljs-string">//                   $               $</span><br></code></pre></td></tr></table></figure><h3 id="读万卷书，写万行码"><a href="#读万卷书，写万行码" class="headerlink" title="读万卷书，写万行码"></a>读万卷书，写万行码</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>                <span class="hljs-string">.-</span>~~~~~~~~~-<span class="hljs-string">._</span>       _.-~~~~~~~~~-.<br><span class="hljs-string">//</span>            __.&#x27;              ~.   .~              `<span class="hljs-string">.__</span><br><span class="hljs-string">//</span>          .&#x27;<span class="hljs-string">//</span>      NO          \<span class="hljs-string">./</span>        BUG       \\`.<br><span class="hljs-string">//</span>        .&#x27;<span class="hljs-string">//</span>                     |                     \\`.<br><span class="hljs-string">//</span>      .&#x27;<span class="hljs-string">//</span> <span class="hljs-string">.-</span>~<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;~~~~-._     |     _,-~~~~&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span>~-. \\`.<br><span class="hljs-string">//</span>    .&#x27;<span class="hljs-string">//.-</span><span class="hljs-string">&quot;                 `-.  |  .-&#x27;                 &quot;</span>-.\\`.<br><span class="hljs-string">//</span>  .&#x27;<span class="hljs-string">//______.============-..</span>   \ | /   <span class="hljs-string">..-============.______</span>\\`.<br><span class="hljs-string">//.</span>&#x27;______________________________\|<span class="hljs-string">/______________________________</span>`.<br></code></pre></td></tr></table></figure><h3 id="神龙保佑，精细版"><a href="#神龙保佑，精细版" class="headerlink" title="神龙保佑，精细版"></a>神龙保佑，精细版</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs powershell">//                                        <span class="hljs-variable">$</span>,  <span class="hljs-variable">$</span>,     ,<br>//                                        <span class="hljs-string">&quot;ss.<span class="hljs-variable">$ss</span>. .s’</span><br><span class="hljs-string">//                                ,     .ss<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$s</span>,</span><br><span class="hljs-string">//                                <span class="hljs-variable">$</span>. s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>`$<span class="hljs-variable">$Ss</span></span><br><span class="hljs-string">//                                &quot;</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$o</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>       ,<br>//                               s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$s</span>,  ,s<br>//                              s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&quot;</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>,<br>//                              s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$s</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$ssssss</span><span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>”</span><br><span class="hljs-string">//                             s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>&#x27;         `&quot;&quot;</span><span class="hljs-string">&quot;ss&quot;</span><span class="hljs-variable">$</span><span class="hljs-string">&quot;<span class="hljs-variable">$s</span>&quot;</span>”<br>//                             s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>,              `&quot;<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-variable">$</span>  .s<span class="hljs-variable">$</span><span class="hljs-variable">$s</span><br>//                             s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$s</span>,...               `s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-string">&#x27;  `</span><br><span class="hljs-string">//                         `ssss$$$$$$$$$$$$$$$$$$$$####s.     .$$&quot;$.   , s-</span><br><span class="hljs-string">//                           `&quot;&quot;&quot;&quot;$$$$$$$$$$$$$$$$$$$$#####$$$$$$&quot;     $.$’</span><br><span class="hljs-string">//                                 &quot;$$$$$$$$$$$$$$$$$$$$$####s&quot;&quot;     .$$$|</span><br><span class="hljs-string">//                                  &quot;$$$$$$$$$$$$$$$$$$$$$$$$##s    .$$&quot; $</span><br><span class="hljs-string">//                                   $$&quot;&quot;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$&quot;   `</span><br><span class="hljs-string">//                                  $$&quot;  &quot;$&quot;$$$$$$$$$$$$$$$$$$$$S&quot;&quot;&quot;&quot;’</span><br><span class="hljs-string">//                             ,   ,&quot;     &#x27;</span>  <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">####s</span><br>//                             <span class="hljs-variable">$</span>.          .s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">####”</span><br>//                 ,           <span class="hljs-string">&quot;<span class="hljs-variable">$s</span>.   ..ssS<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>####”</span><br><span class="hljs-string">//                 <span class="hljs-variable">$</span>           .<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$S</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>#####”</span><br><span class="hljs-string">//                 Ss     ..sS<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>######&quot;</span>”<br>//                  <span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$sS</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>########”</span><br><span class="hljs-string">//           ,      s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>#########&quot;</span><span class="hljs-string">&quot;’</span><br><span class="hljs-string">//           <span class="hljs-variable">$</span>    s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>#######&quot;</span><span class="hljs-string">&quot;&#x27;      s&#x27;         ,</span><br><span class="hljs-string">//           <span class="hljs-variable">$</span><span class="hljs-variable">$</span>..<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>######&quot;</span><span class="hljs-string">&#x27;       ....,$$....    ,$</span><br><span class="hljs-string">//            &quot;$$$$$$$$$$$$$$$######&quot;&#x27;</span> ,     .sS<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$s</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><br>//              <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">#####&quot;     $, .s$$$$$$$$$$$$$$$$$$$$$$$$s.</span><br>//   )          <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">#####&#x27;        `$$$$$$$$$###########$$$$$$$$$$$.</span><br>//  ((          <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">#####       $$$$$$$$###&quot;       &quot;####$$$$$$$$$$</span><br>//  ) \         <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">####.     $$$$$$###&quot;             &quot;###$$$$$$$$$   s’</span><br>// (   )        <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">####.   $$$$$###&quot;                ####$$$$$$$$s$$’</span><br>// )  ( (       <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>#####.<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>###&#x27;                .###<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>”</span><br><span class="hljs-string">// (  )  )   _,<span class="hljs-variable">$</span>&quot;</span>   <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">######.$$##&#x27;                .###$$$$$$$$$$</span><br>// ) (  ( \.         <span class="hljs-string">&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>#######,,,.          ..####<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>”</span><br><span class="hljs-string">//(   )<span class="hljs-variable">$</span> )  )        ,<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>####################<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>”</span><br><span class="hljs-string">//(   (<span class="hljs-variable">$</span><span class="hljs-variable">$</span>  ( \     _sS&quot;</span>  `&quot;<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$S</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>,<br>// )  )<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$s</span> ) )  .      .   `$<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-string">&quot;&#x27;  `$<span class="hljs-variable">$</span></span><br><span class="hljs-string">//  (   <span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$Ss</span>/  .<span class="hljs-variable">$</span>,    .<span class="hljs-variable">$</span>,,s<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>##S<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$S</span>&quot;</span><span class="hljs-string">&quot;        ‘</span><br><span class="hljs-string">//    \)_<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span>##&quot;</span>  <span class="hljs-variable">$</span><span class="hljs-variable">$</span>        `$<span class="hljs-variable">$</span>.        `$<span class="hljs-variable">$</span>.<br>//        `&quot;S<span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-variable">$</span><span class="hljs-comment">#&quot;      $          `$          `$</span><br>//            `&quot;<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&#x27;         &#x27;</span>           <span class="hljs-string">&#x27;           &#x27;</span><br></code></pre></td></tr></table></figure><h3 id="佛祖保佑，带相框版"><a href="#佛祖保佑，带相框版" class="headerlink" title="佛祖保佑，带相框版"></a>佛祖保佑，带相框版</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs perl">//<span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><span class="hljs-regexp">//</span><br>//                          _ooOoo_                               //<br><span class="hljs-regexp">//</span>                         o8888888o                              //<br><span class="hljs-regexp">//</span>                         <span class="hljs-number">88</span><span class="hljs-string">&quot; . &quot;</span><span class="hljs-number">88</span>                              //<br><span class="hljs-regexp">//</span>                         (| ^_^ |)                              //<br><span class="hljs-regexp">//</span>                         O\  =  <span class="hljs-regexp">/O                              /</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/                      ____/</span><span class="hljs-string">`---&#x27;\____                           //</span><br><span class="hljs-string">//                    .&#x27;  \\|     |//  `</span>.                         //<br><span class="hljs-regexp">//</span>                   /  \\|||  :  |||<span class="hljs-regexp">//</span>  \                        //<br><span class="hljs-regexp">//</span>                  /  _||||| -:- |||||-  \                       //<br><span class="hljs-regexp">//</span>                  |   | \\\  -  <span class="hljs-regexp">//</span><span class="hljs-regexp">/ |   |                       /</span><span class="hljs-regexp">/</span><br><span class="hljs-regexp">/</span><span class="hljs-regexp">/                  | \_|  &#x27;&#x27;\---/</span><span class="hljs-string">&#x27;&#x27;</span>  |   |                       <span class="hljs-regexp">//</span><br>//                  \  .-\__  <span class="hljs-string">`-`</span>  ___/-. /                       <span class="hljs-regexp">//</span><br>//                ___<span class="hljs-string">`. .&#x27;  /--.--\  `</span>. . ___                     //<br><span class="hljs-regexp">//</span>              .<span class="hljs-string">&quot;&quot;</span> <span class="hljs-string">&#x27;&lt;  `.___\_&lt;|&gt;_/___.&#x27;</span>  &gt;<span class="hljs-string">&#x27;&quot;&quot;.                  //</span><br><span class="hljs-string">//            | | :  `- \`.;`\ _ /`;.`/ - ` : | |                 //</span><br><span class="hljs-string">//            \  \ `-.   \_ __\ /__ _/   .-` /  /                 //</span><br><span class="hljs-string">//      ========`-.____`-.___\_____/___.-`____.-&#x27;</span>========         <span class="hljs-regexp">//</span><br>//                           <span class="hljs-string">`=---=&#x27;                              //</span><br><span class="hljs-string">//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //</span><br><span class="hljs-string">//                  佛祖保佑       永不宕机     永无BUG              //</span><br><span class="hljs-string">////////////////////////////////////////////////////////////////////</span><br></code></pre></td></tr></table></figure><h3 id="DOS保佑"><a href="#DOS保佑" class="headerlink" title="DOS保佑"></a>DOS保佑</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">             ,----------------,              ,---------,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">        ,-----------------------,          ,<span class="hljs-string">&quot;        ,&quot;</span>|</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      ,<span class="hljs-string">&quot;                      ,&quot;</span>|        ,<span class="hljs-string">&quot;        ,&quot;</span>  |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">     +-----------------------+  |      ,<span class="hljs-string">&quot;        ,&quot;</span>    |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">     |  .-----------------.  |  |     +---------+      |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">     |  |                 |  |  |     | -==----<span class="hljs-string">&#x27;|      |</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">     |  |  I LOVE DOS!    |  |  |     |         |      |</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">     |  |  Bad command or |  |  |/----|`---=    |      |</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">     |  |  C:\&gt;_          |  |  |   ,/|==== ooo |      ;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">     |  |                 |  |  |  // |(((( [33]|    ,&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">     |  `-----------------&#x27;</span>  |,<span class="hljs-string">&quot; .;&#x27;| |((((     |  ,&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">     +-----------------------+  ;;  | |         |,<span class="hljs-string">&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">        /_)______________(_/  //&#x27;   | +---------+</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">   ___________________________/___  `,</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">  /  oooooooooooooooo  .o.  oooo /,   \,&quot;</span>-----------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> / ==ooooooooooooooo==.o.  ooo= //   ,`\--&#123;)B     ,<span class="hljs-string">&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">/_==__==========__==_ooo__ooo=_/&#x27;   /___________,&quot;</span></span><br><span class="hljs-meta prompt_">#</span><br></code></pre></td></tr></table></figure><h3 id="键盘保佑…"><a href="#键盘保佑…" class="headerlink" title="键盘保佑…"></a>键盘保佑…</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/**<br><span class="hljs-bullet">*</span> ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐<br><span class="hljs-bullet">*</span> │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐<br><span class="hljs-bullet">*</span> └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘<br><span class="hljs-bullet">*</span> ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐<br><span class="hljs-bullet">*</span> │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │<br><span class="hljs-bullet">*</span> ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤<br><span class="hljs-bullet">*</span> │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │<br><span class="hljs-bullet">*</span> ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │<br><span class="hljs-bullet">*</span> │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#x27;│ Enter  │               │ 4 │ 5 │ 6 │   │<br><span class="hljs-bullet">*</span> ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤<br><span class="hljs-bullet">*</span> │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │<br><span class="hljs-bullet">*</span> ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││<br><span class="hljs-bullet">*</span> │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│<br><span class="hljs-bullet">*</span> └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘<br><span class="hljs-emphasis">*/</span><br></code></pre></td></tr></table></figure><h3 id="大号字体…"><a href="#大号字体…" class="headerlink" title="大号字体…"></a>大号字体…</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">/**<br><span class="hljs-bullet">* </span>頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂<br><span class="hljs-bullet">* </span>頂頂頂頂頂頂頂　　　　　頂頂　　　　　<br><span class="hljs-bullet">* 　　　</span>頂頂　　　頂頂頂頂頂頂頂頂頂頂頂<br><span class="hljs-bullet">* 　　　</span>頂頂　　　頂頂頂頂頂頂頂頂頂頂頂<br><span class="hljs-bullet">* 　　　</span>頂頂　　　頂頂　　　　　　　頂頂<br><span class="hljs-bullet">* 　　　</span>頂頂　　　頂頂　　頂頂頂　　頂頂<br><span class="hljs-bullet">* 　　　</span>頂頂　　　頂頂　　頂頂頂　　頂頂<br><span class="hljs-bullet">* 　　　</span>頂頂　　　頂頂　　頂頂頂　　頂頂<br><span class="hljs-bullet">* 　　　</span>頂頂　　　頂頂　　頂頂頂　　頂頂<br><span class="hljs-bullet">* 　　　</span>頂頂　　　　　　　頂頂頂　<br><span class="hljs-bullet">* 　　　</span>頂頂　　　　　　頂頂　頂頂　頂頂<br><span class="hljs-bullet">* 　</span>頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂<br><span class="hljs-bullet">* 　</span>頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂<br>*/<br></code></pre></td></tr></table></figure><h3 id="没了！"><a href="#没了！" class="headerlink" title="没了！"></a>没了！</h3><p>如果你发现你在赛场上没事可做了，那么你就可以尝试一下在赛场上把祈福的内容打出来。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.24总结</title>
    <link href="/2025/07/24/%E5%A4%8F%E4%BB%A4%E8%90%A57-24%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/24/%E5%A4%8F%E4%BB%A4%E8%90%A57-24%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天去报告厅上大班课，<del>热死了</del>，上了一个上午。</p><h1 id="图论建图"><a href="#图论建图" class="headerlink" title="图论建图"></a>图论建图</h1><h2 id="基本规律"><a href="#基本规律" class="headerlink" title="基本规律"></a>基本规律</h2><p>图中的点代表了状态，边代表转移方式、约束等状态之间的关联，然后利用一些基本的图论算法解决问题。</p><h2 id="图论算法"><a href="#图论算法" class="headerlink" title="图论算法"></a>图论算法</h2><h3 id="最短路算法"><a href="#最短路算法" class="headerlink" title="最短路算法"></a>最短路算法</h3><ul><li><p><code>Floyd</code>算法：全源最短路，$O(n^3)$</p><p><code>Floyd</code>算法又称为插点法，是一种利用动态规划的思想寻找给定的加权图中多源点之间最短路径的算法，与<code>Dijkstra</code>算法类似。该算法名称以创始人之一、1978年图灵奖获得者、斯坦福大学计算机科学系教<code>授罗伯特·弗洛伊德</code>命名。</p></li><li><p><code>Dijkstra</code>算法：单源最短路，$O(n^2)&#x2F;O(m\ \log\ n)$</p><p>该算法采用贪心策略，通过不断扩展已知最短路径区域（集合$S$）来逼近目标。初始化时，将起始点加入$S$，并设置其最短距离为0。随后，从待处理节点中选取当前距离起始点最近的节点$u$，将其加入$S$，并更新其邻接节点的最短距离（若通过$u$的路径比原距离更短）。重复此过程直至所有节点被纳入$S$。</p></li><li><p><code>SPFA</code>：容易被卡，不建议使用。</p><p><code>SPFA</code>（<em>Shortest Path Faster Algorithm</em>）是<code> Bellman-Ford</code>算法 的队列优化版本，主要用于求解含负权边的单源最短路径问题，并可检测图中是否存在负权环。该算法在图中出现负环时可能会陷入死循环。非负权图种则更建议使用<code>Dijkstra</code>算法。</p></li></ul><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>对于一幅有向无环图，可以对其节点进行拓扑排序，使得所有的有向边$u\rightarrow v$满足$u$排在$v$前面。</p><p>方法：维护一个队列，里面包含所有当前的零入度点，每次取出一个并删除，再将其所有相邻的点的入度设为$-1$，如果减成了0那么就加入队列。不断操作直到队列为空。</p><p>复杂度：$O(n+m)$</p><p>例题：P4316</p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><ul><li><p><code>Kruskal</code>：较常用，$O(m\ \log\  m)$，如果不连通则得到最小生成森林。</p><p>克鲁斯卡尔算法是求连通网的最小生成树的另一种方法。与普里姆算法不同，<code>Kruskal</code>较适合于求边稀疏的网的最小生成树。</p></li><li><p><code>Prim</code>：不常用，$O(n^2)&#x2F;O((n+m)\ \log\  m)$（堆优化）</p><p>该算法使用贪心策略，每次选择连接已选顶点集（$U$）与未选顶点集（$V-U$）的最小权值边，确保局部最优解最终导向全局最优。‌‌</p></li><li><p><code>Boruvka</code>：对于特定的题目有奇效，$O(m\ \log\ n)$例题CF888G</p><p>‌初始化‌：将每个节点视为一个独立的连通块，共 n 个连通块。</p><p>合并过程：</p><ul><li>对每个连通块，计算其与外部连通块的最短边（若边权相同则选择编号较小的边）。</li><li>合并选中的连通块，重复此过程直至所有节点连通。</li></ul></li></ul><h3 id="连通性算法"><a href="#连通性算法" class="headerlink" title="连通性算法"></a>连通性算法</h3><ul><li><code>Tarjan1</code>：有向图强连通分量，无向图边双连通分量，$O(n+m)$。常碰到将一个连通分量缩点，在拓扑排序的套路。</li><li><code>Tarjan2</code>：无向图点双连通分量，$O(n+m)$。常见于仙人掌图，有时配合圆方树操作。</li><li>例题：P2341，P3627</li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="P5960-差分约束"><a href="#P5960-差分约束" class="headerlink" title="P5960 差分约束"></a>P5960 差分约束</h4><p>将一个$x_i-x_j\le y$的限制，看成一条从$x_i$到$y_i$的权值为$y$的有向边。</p><p>可以发现，若$y$均为整数，则从任意点出发得到的每个点的最短路长度即可满足要求。</p><p>若$y$可为负数，则需考虑有无负环。</p><h4 id="P4568"><a href="#P4568" class="headerlink" title="P4568"></a>P4568</h4><p>给定一个带边权的无向连通图，有$n$个点和$m$条边，无自环与重边。</p><p>假设一条路径经过的边权依次为$w_{1…k}$，则这条路径的权值为$\sum_iw_i-\max_i+\min_iw_i$。</p><p>找出点1到其他每个点的最小权值路径。</p><p>$n,m\le2\times10^5$</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>今天的算法比较难，所以写的比较少，但是其实理解的量还是比较大的。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CPU主要参数与25.7的选购指南</title>
    <link href="/2025/07/23/CPU%E4%B8%BB%E8%A6%81%E5%8F%82%E6%95%B0%E4%B8%8E25-7%E7%9A%84%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/"/>
    <url>/2025/07/23/CPU%E4%B8%BB%E8%A6%81%E5%8F%82%E6%95%B0%E4%B8%8E25-7%E7%9A%84%E9%80%89%E8%B4%AD%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="CPU基础知识与2025年7月CPU的选购指南"><a href="#CPU基础知识与2025年7月CPU的选购指南" class="headerlink" title="CPU基础知识与2025年7月CPU的选购指南"></a>CPU基础知识与2025年7月CPU的选购指南</h1><h2 id="一、CPU-基础参数详解"><a href="#一、CPU-基础参数详解" class="headerlink" title="一、CPU 基础参数详解"></a>一、CPU 基础参数详解</h2><h3 id="（一）核心数"><a href="#（一）核心数" class="headerlink" title="（一）核心数"></a>（一）核心数</h3><p>核心数指的是 CPU 内执行指令的运算核心数量。简单来说，多核心的 CPU 就像是拥有多个 “小脑袋” 同时工作。例如，4 核心的 CPU 能够同时处理 4 个线程任务，这极大地提高了多线程任务的处理能力。在如今的多任务处理环境下，无论是同时运行多个办公软件，还是进行视频编辑时同时处理视频渲染、音频编辑等任务，多核心 CPU 都能展现出明显优势。像进行 3D 建模时，多个核心可以分别处理模型的不同部分，大大缩短建模时间。</p><h3 id="（二）线程数"><a href="#（二）线程数" class="headerlink" title="（二）线程数"></a>（二）线程数</h3><p>线程数通过超线程技术得以实现，它能让一个物理核心模拟出多个逻辑核心来并行处理任务。以 Intel 的超线程技术为例，一个核心可以拥有两个线程。对于 8 核心 16 线程的 CPU 而言，在多线程任务处理方面表现卓越。在服务器应用中，需要同时响应大量用户的请求，多线程的 CPU 能够将不同用户的请求分配到各个线程进行处理，保证服务器高效稳定运行。在日常使用中，多线程也有助于提升系统的流畅度，比如在后台进行文件压缩的同时，前台依然可以流畅地浏览网页。</p><h3 id="（三）主频"><a href="#（三）主频" class="headerlink" title="（三）主频"></a>（三）主频</h3><p>主频即 CPU 内核工作的时钟频率，单位为 GHz（吉赫兹）。可以将其理解为 CPU 运算的 “速度”，主频越高，在一个时钟周期内完成的指令数就越多，运算速度理论上也就越快。例如，一款主频为 3.6GHz 的 CPU，每秒能够产生 36 亿个时钟脉冲。在一些对单核性能要求较高的应用中，如大多数的日常办公软件、网页浏览，以及部分对单核性能敏感的游戏，较高的主频能够带来更流畅的使用体验，减少卡顿现象。</p><h3 id="（四）缓存"><a href="#（四）缓存" class="headerlink" title="（四）缓存"></a>（四）缓存</h3><p>缓存分为一级缓存（L1 Cache）、二级缓存（L2 Cache）和三级缓存（L3 Cache）。缓存是高速存储区域，用于存储 CPU 频繁访问的数据和指令。其中，L1 缓存速度最快，但容量最小；L3 缓存容量最大，但速度相对较慢。缓存的存在就像是在 CPU 附近设置了一个 “小型仓库”，当 CPU 需要数据时，优先从缓存中读取，大大减少了从内存中读取数据的时间，提高了数据访问效率。在运行大型游戏或复杂软件时，缓存能够提前存储常用数据，避免频繁从内存调取数据造成的卡顿，使游戏加载速度更快，软件运行更流畅。</p><h3 id="（五）制程工艺"><a href="#（五）制程工艺" class="headerlink" title="（五）制程工艺"></a>（五）制程工艺</h3><p>制程工艺指的是在硅材料上生产 CPU 时内部电路与晶体管的精细程度，单位为纳米（nm）。制程工艺越小，晶体管体积越小，这样就可以在相同面积的芯片上集成更多晶体管，从而提升性能并降低功耗。例如，台积电的 3nm 工艺相较于之前的工艺，能够在提升 CPU 性能的同时，降低其能耗，减少发热。对于笔记本电脑等对散热和续航有较高要求的设备来说，先进的制程工艺尤为重要，它能让笔记本在性能提升的同时，保持较低的发热和更长的续航时间。</p><h3 id="（六）TDP（热设计功耗）"><a href="#（六）TDP（热设计功耗）" class="headerlink" title="（六）TDP（热设计功耗）"></a>（六）TDP（热设计功耗）</h3><p>TDP 指的是 CPU 达到最大负荷时释放的热量，单位为瓦（W）。它用于衡量 CPU 的散热需求，TDP 越低，说明 CPU 的能耗比越高，产生的热量越少。在选择 CPU 时，TDP 是一个重要参考因素，因为它关系到电脑的散热设计。如果 CPU 的 TDP 过高，而电脑的散热系统无法有效散热，就会导致 CPU 温度过高，进而出现降频现象，影响性能。例如，一些高性能的游戏 CPU，其 TDP 相对较高，在装机时就需要配备性能强劲的散热器，以保证 CPU 稳定运行。</p><h2 id="二、2025-年-7-月-CPU-选购指南"><a href="#二、2025-年-7-月-CPU-选购指南" class="headerlink" title="二、2025 年 7 月 CPU 选购指南"></a>二、2025 年 7 月 CPU 选购指南</h2><p>这里，因为我对 Intel（英特尔）的产品了解的偏多，就使用了 Intel 的 CPU 进行推荐。</p><h3 id="（一）预算有限（500-元以下）"><a href="#（一）预算有限（500-元以下）" class="headerlink" title="（一）预算有限（500 元以下）"></a>（一）预算有限（500 元以下）</h3><ol><li>Intel 酷睿 i3 12100F：采用 Alder Lake 架构，拥有 4 核 8 线程，基础频率 3.3Ghz，加速频率 4.3Ghz，L2 级缓存 5MB，L3 缓存 12MB，功耗 58W，内存支持 DDR4 3200&#x2F;DDR5 4800。这款 CPU 非常适合搭配入门级游戏主机，再配上 H610 主板，性价比超高。目前散片价格在 300 元上下，性能表现对于日常办公以及一些轻度游戏来说，完全能够胜任。</li></ol><h3 id="（二）中等预算（500-1500-元）"><a href="#（二）中等预算（500-1500-元）" class="headerlink" title="（二）中等预算（500 - 1500 元）"></a>（二）中等预算（500 - 1500 元）</h3><ol><li><p>Intel 酷睿 i5 13400F：基于 Alder Lake 架构，具备 10 核 16 线程，基础频率 2.5Ghz，加速频率 4.6Ghz，L2 级缓存 9.5MB，L3 缓存 20MB，功耗 65W，内存支持 DDR4 3200&#x2F;DDR5 4800。散片价格在 689 元上下，相比 12400F，虽然价格贵了 50 元左右，但多核性能领先了 30%，不仅在游戏方面表现不错，还能兼顾一些生产力需求，如简单的视频剪辑、图片处理等，是一款性价比很高的选择。</p></li><li><p>Intel 酷睿 i5 14400F：拥有 6 个大核和 4 个小核，全 P 核加速 4.1GHz，全 E 核 3.5GHz，二级缓存为 9.5MB，三级缓存为 20MB。标准运行频率 2.5 GHz，最高运行频率 4.7 GHz。虽然被吐槽为 “牙膏 U”，但其售价 700 元出头，且不锁 SA 电压，D4 内存可在不分频的情况下跑到 3600MHz 的频率，对部分电竞网游有优势。搭配一线品牌的入门级 DDR4 版 H610 主板，板 U 总价可控制在 1200 元左右，价格方面有一定竞争力。</p></li></ol><h3 id="（三）较高预算（1500-3000-元）"><a href="#（三）较高预算（1500-3000-元）" class="headerlink" title="（三）较高预算（1500 - 3000 元）"></a>（三）较高预算（1500 - 3000 元）</h3><ol><li>Intel 酷睿 i5 14600KF：基于 Raptor Lake 架构，14 核 20 线程，基础频率 3.5Ghz，加速频率 5.3Ghz，L2 级缓存 20MB，L3 缓存 24MB，功耗 125W，内存支持 DDR4 3200&#x2F;DDR5 5600。降价后性价比出众，游戏和生产力兼顾，目前散片价格在 1165 元左右，盒装 1279 元左右，是追求全能型 CPU 用户的不错选择。不过需要注意的是，该型号存在一定的 “雷 U” 风险，购买时需谨慎。</li></ol><h3 id="（四）高预算（3000-元以上）"><a href="#（四）高预算（3000-元以上）" class="headerlink" title="（四）高预算（3000 元以上）"></a>（四）高预算（3000 元以上）</h3><ol><li><p>Intel 酷睿 Ultra 9 200：价格在 4299 元左右，性能强劲，面向对电脑性能有极致追求的用户，无论是进行专业的图形设计、大规模数据处理，还是畅玩顶级游戏，都能轻松胜任，在多核心性能以及单核性能上都有出色的表现，并且在能效比方面也有不错的提升。</p></li><li><p>Intel 酷睿 i9 14900K：基于 Raptor Lake 架构，18 核 36 线程，基础频率 3.5Ghz，加速频率 5.3Ghz，L2 级缓存 20MB，L3 缓存 32MB，基础功耗 125W，内存支持 DDR4 3200&#x2F;DDR5 5600。该型号在游戏和生产力上都有优势，价格在 2899 元左右，是预算较高的用户的不错选择。</p></li></ol><div class="note note-success">            <p>本文部分由 AI 生成，虽然已经经过检查，但是在商品价格以及推荐上可能与未来存在区别，请自行判断。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>电脑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>电脑硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑硬盘名词详解</title>
    <link href="/2025/07/23/%E7%94%B5%E8%84%91%E7%A1%AC%E7%9B%98%E5%90%8D%E8%AF%8D%E8%AF%A6%E8%A7%A3/"/>
    <url>/2025/07/23/%E7%94%B5%E8%84%91%E7%A1%AC%E7%9B%98%E5%90%8D%E8%AF%8D%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>一些关于硬盘的你必须要懂的名词解释：</p><ul><li><p>存储介质分类</p><ul><li><p><code>HDD</code>（<code>Hard Disk Drive</code>，机械硬盘）通过磁性盘片和机械磁头读写数据，依赖旋转磁盘和磁头的物理运动。<br>其特点：容量大（最高可达20TB+）、成本低（单位容量价格低）；速度较慢（转速通常为<code>5400/7200 RPM</code>，高端企业级可达<code>15000 RPM</code>）；功耗较高、抗震性差（机械结构易损坏）。比较适用于大容量存储（如备份、冷数据）。  </p></li><li><p><code>SSD</code>（<code>Solid State Drive</code>，固态硬盘）是基于<code>NAND</code>闪存芯片，无机械部件，通过电子信号读写。<br>其特点：速度快（读写速度可达<code>500MB/s–7000MB/s</code>），抗震性强、功耗低、发热少。寿命有限（写入次数限制，但现代<code>SSD</code>寿命已大幅提升）。</p><p><code>SSD</code>又分为：</p><ul><li><code>SATA SSD</code>：兼容传统<code>SATA</code>接口，速度上限约<code>600MB/s</code>。</li><li><code>NVMe SSD</code>：通过<code>PCIe</code>通道（如<code>M.2</code>接口）实现更高速度（可达<code>7GB/s</code>）。这种接口适用于操作系统、高频次的读写需求（如游戏、数据库）。</li></ul></li></ul></li><li><p>硬盘接口标准</p><ol><li><p><code>IDE/PATA</code>（<code>Integrated Drive Electronics / Parallel ATA</code>）：这个接口在1986年提出，早期个人电脑主流接口。<br>  其优点：</p><ul><li>并行传输（宽带状排线），速度慢（最高<code>133MB/s</code>）。</li><li>支持主从设备配置（需跳线设置）。<br>  被淘汰原因则是线缆笨重（没看过<code>IDE</code>线缆宽度的根本不知道笨重二字咋写）、速度瓶颈，2003年后被<code>SATA</code>取代。</li></ul></li><li><p><code>SATA</code>（<code>Serial ATA</code>，串行<code>ATA</code>）<br>  <code>SATA</code>于2003年取代<code>PATA</code>，至今仍是主流接口。<br>  其版本有：</p><ul><li><code>SATA 1.0</code>：<code>1.5Gb/s</code>（实际速度大约<code>150MB/s</code>），</li><li><code>SATA 2.0</code>：<code>3 Gb/s</code>（实际速度大约<code>300MB/s</code>），</li><li><code>SATA 3.0</code>：<code>6 Gb/s</code>（实际速度大约<code>600MB/s</code>）。<br>  优点有：</li><li>串行传输（细长线缆）、支持热插拔。</li><li>兼容<code>HDD</code>和<code>SATA SSD</code>。</li></ul></li><li><p><code>SCSI</code>（<code>Small Computer System Interface</code>）早期高性能接口，主要用于服务器和工作站。<br>其特点：</p></li></ol><ul><li>并行传输，支持多设备串联（菊花链拓扑）。</li><li>高延迟但高吞吐（<code>Ultra320 SCSI</code>可达<code>320MB/s</code>）。</li><li>需独立<code>SCSI</code>控制卡，成本高。被淘汰原因是被更高效的<code>SAS</code>接口（见后文）取代。</li></ul></li></ul><ol start="4"><li><code>SAS</code>（<code>Serial Attached SCSI</code>）：<code>SCSI</code>的串行升级版，企业级存储标准。<br>  其特点：<ul><li>兼容<code>SATA</code>硬盘（<code>SAS</code>接口可插<code>SATA</code>硬盘，反之不行）。</li><li>全双工通信（同时读写）、高可靠性（支持错误校验）。</li><li>速度高（<code>SAS 4.0</code>达<code>24 Gb/s</code>，约<code>2400MB/s</code>）。</li></ul></li></ol><p><del>夏令营休息日无聊写的</del></p>]]></content>
    
    
    <categories>
      
      <category>电脑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>电脑硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.22总结</title>
    <link href="/2025/07/22/%E5%A4%8F%E4%BB%A4%E8%90%A57-22%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/22/%E5%A4%8F%E4%BB%A4%E8%90%A57-22%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h2><p>$8:00\sim8:50$写T1</p><p>$8:50\sim9:30$写T2</p><p>$9:30\sim9:50$看T3-T4</p><p>$9:50\sim10:30$写T5，（估计）要TLE</p><p>$10:30\sim11:00$T3-T4骗分</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>简单模拟题意即可。</p><p>这题的题意其实我不知道为什么看来还久才完全理解，所以一开始理解样例花了好久，但是其实本身的代码时间还是比较简单的。</p><p>需要注意的是在往一个方向走的时候， 其实是有可能不在那个极点上，所以要判断是否超过了那个点。</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>状态定义：$f[x]$多少个以$x$结尾的序列$A$。</p><p>初始状态：$f[1]&#x3D;1$</p><p>递推式：$f[x]&#x3D;\sum_{d|x}f[d]$</p><p>$1,…,x,…,xd$</p><p>这里$1\le d\le N&#x2F;x$</p><p>$f[x]\times \sum_{d&#x3D;1}^{N&#x2F;x}f[d]$</p><p>这里要用前向$DP$</p><p>算出$f[x]$后，对每个$d&#x3D;2,…,N&#x2F;x$</p><p>$f[d\times x]$+&#x3D;$f[x]$</p><p>对于每个$x$，要做不超过$N&#x2F;x$个$f[d\times x]$+&#x3D;$f[x]$的操作。</p><p>时间复杂度：$\sum^N_{x&#x3D;1}N&#x2F;x&#x3D;N(\sum^N_{x&#x3D;1}1&#x2F;x)$</p><p>结论：$\sum^N_{x&#x3D;1}1&#x2F;x\approx ln N$</p><p>$ln N:&#x3D;log_eN$</p><p>$e$是欧拉常数，约等于$2.71828$。</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>考虑叶子。</p><ul><li>如果叶子已经好了，就不管他，直接删除即可。</li><li>如果叶子还没好，就做一次操作让他变好。把叶子的值直接加到上限。</li></ul><p>从叶子节点往上(贪心)。对于当前节点,记录自己子树的增量 <code>w[i]</code>。<br>若 <code>tmp&lt;l[i]</code>，那么增加一次操作,将权值设置为 <code>r[i]</code>，上传到根节点。<br>否则，<code>min(tmp,r[i])</code>，上传至根节点。</p><p>伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br>vector&lt;<span class="hljs-type">int</span>&gt;t[<span class="hljs-number">200001</span>];<br><span class="hljs-type">int</span> l[<span class="hljs-number">200001</span>],r[<span class="hljs-number">200001</span>],a[<span class="hljs-number">200001</span>],w[<span class="hljs-number">200001</span>],n,ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>  <span class="hljs-type">int</span> tmp=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;(<span class="hljs-type">int</span>)t[k].<span class="hljs-built_in">size</span>();i++)&#123;<br>    <span class="hljs-comment">// 更进一步深搜</span><br>    tmp+=w[t[k][i]];<span class="hljs-comment">//&lt;- 更新tmp</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(tmp&lt;l[k])w[k]=r[k],ans++;<br>  <span class="hljs-comment">//否则   //取min，上传至根节点</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  cin&gt;&gt;n;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>    cin&gt;&gt;a[i];<br>    t[a[i]].<span class="hljs-built_in">push_back</span>(i);<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)cin&gt;&gt;l[i]&gt;&gt;r[i];<br>  <span class="hljs-comment">//调用dfs函数</span><br>  cout&lt;&lt;ans;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>纯暴力枚举，因为数据范围比较小，所以纯的暴力也是可以接受的。</p><p>核心：$\Huge大$暴力。</p><p>具体多大，你自己看吧…………。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> h=N;h&gt;=<span class="hljs-number">1</span>;h--)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> w=N;w&gt;=<span class="hljs-number">1</span>;w--)&#123;<br>        <span class="hljs-keyword">for</span>(x1=<span class="hljs-number">0</span>;x1+h&lt;=N;x1++)&#123;<br>            <span class="hljs-keyword">for</span>(y1_=<span class="hljs-number">0</span>;y1_+w&lt;=N;y1_++)&#123;<br>                x2=x1+h;<br>                y2=y1_+w;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>())&#123;<br>                    <span class="hljs-type">bool</span> ok=<span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> r:ans)&#123;<br>                        <span class="hljs-keyword">if</span>(r.x1&lt;=x1&amp;&amp;x1+h&lt;=r.x2&amp;&amp;r.y1_&lt;=y1_&amp;&amp;y1_+w&lt;=r.y2)&#123;<br>                            ok=<span class="hljs-literal">false</span>;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(ok)&#123;<br>                        ans.<span class="hljs-built_in">push_back</span>(&#123;x1,y1_,x2,y2&#125;);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>$q\le K\le N\le24$</p><p>$1&#x2F;n.1\le n\le N$</p><p>通分</p><p>当$N&#x3D;4$时：</p><p>$\frac{1}{1},\frac{1}{2},\frac{1}{2},\frac{1}{4}$</p><p>$1,2,3,4$的最小公倍数是$12$</p><p>$\frac{12}{12},\frac{6}{12},\frac{4}{12},\frac{3}{12}$</p><p>$12,6,4,3$</p><p>$1,2,3,……,24$的最小公倍数是多少？</p><p>是$54228880$。</p><p>代码逻辑：</p><ol><li><p>数学转化：<br>问题等价于寻找 K 个分数$\frac{1}{a_1},\frac{1}{a_2},…,\frac{1}{a_k}$（其中$1\le a_i\le N$），并使得它们的和为$1$，即：$1\frac{1}{a_1}+\frac{1}{a_2}+…+\frac{1}{a_k}&#x3D;1$。</p></li><li><p>通分处理：<br>为了避免浮点数计算，代码先计算了$1$到$N$中除去$13,17,19,23$之外所有数的最小公倍数。这一步通过循环计算$ans&#x3D;ans\times i\gcd(ans,i)$实现</p></li><li><p>分数转换：<br>将每个可能的分数$\frac{1}{i}$转换为以$ans$为分母的形式：$a[i]&#x3D;ans&#x2F;i$<br>此时问题转化为寻找$K$个数$a[i_1],a[i_2],…,a[i_k]$，使得它们的和等于$ans$。</p></li><li><p>动态规划求解：<br>使用二维$DP$数组$dp[i][j]$表示：</p><ul><li>选择$i$个分数</li><li>这些分数转换后之和为$j$的方案数</li></ul><p>状态转移方程：<br>$dp[i][l]$+&#x3D;$dp[i-1][l-a [j]]$<br>表示选择第$j$个分数后，总和达到$l$的方案数。</p></li><li><p>特殊情况处理：</p><p>代码最后添加了$k&#x3D;13,k&#x3D;17,k&#x3D;19,k&#x3D;23$的判断，这是因为这几个数在计算最小公倍数时被排除了，需要单独处理</p></li><li><p>最终答案：<br>$dp[k][ans]$即为满足条件的分法总数，加上特殊情况的判断结果。</p></li></ol><p>写完了$\sim$，好难写啊$\sim\sim$。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c++考场RE排错指南</title>
    <link href="/2025/07/21/c-%E8%80%83%E5%9C%BARE%E6%8E%92%E9%94%99%E6%8C%87%E5%8D%97/"/>
    <url>/2025/07/21/c-%E8%80%83%E5%9C%BARE%E6%8E%92%E9%94%99%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>在C++的代码竞赛中，越界是一种类隐蔽性强、调试难度大的问题，尤其是涉及STL容器时，其表现往往难以预测，可能导致程序崩溃、输出错误结果，甚至看似”正常运行”却在评测时出错，我们一般称之为“一切皆有可能”。以下是这类问题的常见场景和特点：</p><h3 id="一、常见的越界错误场景"><a href="#一、常见的越界错误场景" class="headerlink" title="一、常见的越界错误场景"></a>一、常见的越界错误场景</h3><h4 id="1-数组-vector的索引越界"><a href="#1-数组-vector的索引越界" class="headerlink" title="1. 数组&#x2F;vector的索引越界"></a>1. 数组&#x2F;vector的索引越界</h4><ul><li>访问<code>arr[i]</code>时，出现<code>i</code>小于0或大于等于容器大小。这时如果我们在定义数组时没有多定义几位，就会引发越界错误。</li><li>循环条件错误（如<code>for(int i=0;i&lt;=n;i++)</code>而非<code>&lt;n</code>）导致越界。</li><li>使用<code>resize()</code>预留空间后仍访问原大小范围外的元素。</li></ul><h4 id="2-STL容器的特殊越界"><a href="#2-STL容器的特殊越界" class="headerlink" title="2. STL容器的特殊越界"></a>2. STL容器的特殊越界</h4><ul><li>string：使用<code>[]</code>访问超过<code>length()</code>的位置（未定义行为，可能修改内存）。</li><li>map&#x2F;set：使用<code>[]</code>访问不存在的键（会自动插入默认值，改变容器状态）这类越界问题不会立即报错，但是在某些题目中可能会导致后续统计被访问过的数时出错，从而产生错误答案。而这也是这种越界问题的隐蔽之处。</li><li>queue&#x2F;stack：对空容器调用<code>front()</code>&#x2F;<code>top()</code>（未定义行为）。这种问题常出现于广搜之中或使用队列&#x2F;优先队列的问题。</li><li>迭代器越界：使用<code>++it</code>超过<code>end()</code>，或对失效迭代器操作（如容器扩容后使用旧迭代器）。这也是使用迭代器时要特别注意判断的问题。</li></ul><h4 id="3-函数参数-返回值越界"><a href="#3-函数参数-返回值越界" class="headerlink" title="3. 函数参数&#x2F;返回值越界"></a>3. 函数参数&#x2F;返回值越界</h4><ul><li>传入函数的数组长度与实际操作不匹配。</li><li>指针操作越界（如<code>ptr + n</code>超出合法内存范围）。</li></ul><h3 id="二、越界错误的”诡异”特性"><a href="#二、越界错误的”诡异”特性" class="headerlink" title="二、越界错误的”诡异”特性"></a>二、越界错误的”诡异”特性</h3><h4 id="1-表现不确定"><a href="#1-表现不确定" class="headerlink" title="1. 表现不确定"></a>1. 表现不确定</h4><p>   越界后不一定立即崩溃：可能修改无关内存导致后续逻辑出错（如后续使用迭代器统计有值的元素个数时多数，导致答案出错），也可能访问到”恰好可用”的内存而暂时正常，这种随机性让调试极其困难。</p><h4 id="2-STL容器的隐蔽性"><a href="#2-STL容器的隐蔽性" class="headerlink" title="2. STL容器的隐蔽性"></a>2. STL容器的隐蔽性</h4><p>   STL容器的越界行为完全是未定义的：  </p><ul><li><code>vector[i]</code>越界可能修改内部元数据（如容量、大小标记），导致后续<code>push_back()</code>等操作彻底混乱。</li><li><code>string</code>越界写入可能破坏堆内存管理结构，引发后续内存分配失败。</li><li>迭代器越界可能遍历到完全无关的数据，产生无规律的输出。</li></ul><h4 id="3-本地与评测环境差异"><a href="#3-本地与评测环境差异" class="headerlink" title="3. 本地与评测环境差异"></a>3. 本地与评测环境差异</h4><p>   本地测试可能因内存布局”幸运”或操作系统原因而避开崩溃，但在OJ的不同编译环境或内存检查机制下（如启用<code>-fsanitize=address</code>），立即暴露错误。</p><h3 id="三、调试与预防建议"><a href="#三、调试与预防建议" class="headerlink" title="三、调试与预防建议"></a>三、调试与预防建议</h3><h4 id="1-主动检查边界"><a href="#1-主动检查边界" class="headerlink" title="1. 主动检查边界"></a>1. 主动检查边界</h4><ul><li>使用<code>at()</code>替代<code>[]</code>（如<code>vec.at(i)</code>会抛出<code>out_of_range</code>异常，便于定位）。</li><li>对迭代器操作前验证是否在<code>begin()</code>$\sim$<code>end()</code>范围内。</li><li>函数入口检查参数合法性（如数组长度、指针有效性）。</li><li>如果无法找到死循环&#x2F;越界的地方，则使用“二分查找”（即在程序不同位置添加断点输出，如果可以输出则证明到这里都可以正常运行），以查找到错误源。</li></ul><h4 id="2-利用工具检测"><a href="#2-利用工具检测" class="headerlink" title="2. 利用工具检测"></a>2. 利用工具检测</h4><ul><li>本地编译时添加<code>-fsanitize=address</code>（GCC&#x2F;Clang），可捕获多数越界操作。</li><li>使用<code>assert</code>宏在关键位置验证索引范围（如<code>assert(i &gt;= 0 &amp;&amp; i &lt; vec.size())</code>）。</li></ul><h4 id="3-养成安全编码习惯"><a href="#3-养成安全编码习惯" class="headerlink" title="3. 养成安全编码习惯"></a>3. 养成安全编码习惯</h4><ul><li>循环尽量使用范围for（<code>for(auto x : container)</code>）避免手动索引。</li><li>对<code>queue/stack</code>操作前先判断<code>empty()</code>。</li><li>明确STL容器的边界（如<code>end()</code>是”最后元素的下一个”，不可解引用）。</li></ul><h3 id="核心原则：C-中越界行为没有任何保证，尤其是STL容器，越界后”一切皆有可能”。与其花费大量时间调试诡异错误，不如在写代码时主动规避风险，对边界条件保持高度警惕！！！"><a href="#核心原则：C-中越界行为没有任何保证，尤其是STL容器，越界后”一切皆有可能”。与其花费大量时间调试诡异错误，不如在写代码时主动规避风险，对边界条件保持高度警惕！！！" class="headerlink" title="核心原则：C++中越界行为没有任何保证，尤其是STL容器，越界后”一切皆有可能”。与其花费大量时间调试诡异错误，不如在写代码时主动规避风险，对边界条件保持高度警惕！！！"></a>核心原则：C++中越界行为没有任何保证，尤其是STL容器，越界后”一切皆有可能”。与其花费大量时间调试诡异错误，不如在写代码时主动规避风险，对边界条件保持高度警惕！！！</h3>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>教程</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.21总结</title>
    <link href="/2025/07/21/%E5%A4%8F%E4%BB%A4%E8%90%A57-21%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/21/%E5%A4%8F%E4%BB%A4%E8%90%A57-21%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h1><p>难点：</p><ul><li>如何划分阶段（看出他是线性DP）</li><li>如何定义子问题（需要什么状态）</li><li>哪些状态是需要考虑的（可行的），哪些又是不用考虑的</li><li>如何快速进行状态转移</li><li>如何减少状态数</li><li>……….</li></ul><p>重点：</p><ul><li>快速进行状态转移（主要）</li><li>减小状态数</li></ul><h2 id="T1-方格取数"><a href="#T1-方格取数" class="headerlink" title="T1 方格取数"></a>T1 方格取数</h2><p>f$[i][j]$表示从$(1,1)$到$(i,j)$的路上的数字和的最大值。</p><p>答案是$f[N][M]$。</p><p>正确的递推式：从$j&#x3D;1$行的摸一个格子$(i’,j-1)$先向右一步到达$(i’,j)$，再向上或向下走到$(i,j)$。</p><h2 id="T2-接龙"><a href="#T2-接龙" class="headerlink" title="T2 接龙"></a>T2 接龙</h2><p>定义$f[i][j]$</p><ul><li><p>$f[i][j]$表示接龙到第i轮且第$i$轮的接龙序列以整数$j$结尾。</p></li><li><p>$f[i][j]&#x3D;-1$：没人</p></li><li><p>$f[i][j]&#x3D;0$：$\ge2$人</p></li><li><p>$f[i][j]&#x3D;k$：只有$k$这一个人可以接</p></li></ul><h2 id="T3-硬币问题"><a href="#T3-硬币问题" class="headerlink" title="T3 硬币问题"></a>T3 硬币问题</h2><p>关于$f[i][j]$的递推式：</p><p>枚举第$i$种物品拿了几个。<br>$$<br>f[i][j]&#x3D;max(f[i-1][j-p\times W_i]+a\times V_i)(0\le p\le min(C_i,j&#x2F;W_i)<br>$$<br>注意到f[i][j]依赖$f[i-1][·]$的第二个下标两两都是差$W_i$的倍数，即这些下标模$W_i$都同余。</p><h2 id="T4-翻转卡片2"><a href="#T4-翻转卡片2" class="headerlink" title="T4 翻转卡片2"></a>T4 翻转卡片2</h2><h2 id="T5-多重集合平均数"><a href="#T5-多重集合平均数" class="headerlink" title="T5 多重集合平均数"></a>T5 多重集合平均数</h2><h2 id="T6-Yet-Another-Knapsack-Problem"><a href="#T6-Yet-Another-Knapsack-Problem" class="headerlink" title="T6 Yet Another Knapsack Problem"></a>T6 Yet Another Knapsack Problem</h2><p>子问题：$f[i][j][k]$：表示从前i种物品种选j个，总重量不超过k，求所选物品的总价的最大值</p><p>递推式：<br>$$<br>\begin{split}<br>f[0][j][k] &amp;&#x3D;<br>\begin{cases}<br>0 &amp; \text{if } j &#x3D; 0 \<br>-\infty &amp; \text{other}<br>\end{cases} \<br>f[i][j][k] &amp;&#x3D; \max\limits_{0 \leq p \leq C_i} f[i - 1][j - p][k - i \cdot p] + p \cdot v_i \quad (1 \leq i \leq N)<br>\end{split}<br>$$<br>时间复杂度：$O(N^4)$</p><p>$\huge But$</p><p>即使使用滑动窗口优化，时间复杂度也有$O(N^3)$，过不了半点。</p><p>所以，我们还可以：$\huge 重新定义子问题$。</p><p>子问题：$g[i][j][k]$表示从$i$到$N$种物品中选择$j$个物品，总重量不超过$k$，所选物品的最大总价值。</p><p>递推式：<br>$$<br>\begin{split}<br>g[N + 1][j][k] &amp;&#x3D;<br>\begin{cases}<br>0 &amp; \text{if } j &#x3D; 0 \<br>-\infty &amp; \text{otherwise}<br>\end{cases} \<br>g[i][j][k] &amp;&#x3D; \max\limits_{0 \leq p \leq C_i} g[i + 1][j - p][k - i \cdot p] + p \cdot v_i \quad (1 \leq i \leq N)<br>\end{split}<br>$$<br>这样，需要考虑的的状态就变少了。</p><h2 id="T7-价值衰减的背包问题"><a href="#T7-价值衰减的背包问题" class="headerlink" title="T7 价值衰减的背包问题"></a>T7 价值衰减的背包问题</h2><p>子问题：$f[i][j]$代表了从前i种物品中选一些，所选物品的总重量不超过j，总满意度的最大值。递推式写不动了，太长了。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.20总结</title>
    <link href="/2025/07/20/%E5%A4%8F%E4%BB%A4%E8%90%A57-20%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/20/%E5%A4%8F%E4%BB%A4%E8%90%A57-20%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>$8:30\sim12:00$模考（等于没写，<strong>但是</strong>由于我忘记记录时间导致忘了怎么写具体的时间，就不写了）。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><h4 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h4><p>我们需要找出所有能用围栏围住的奶牛子集，关键在于确定每个有效子集对应的最小包围矩形。</p><h4 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h4><p>首先进行坐标压缩预处理：</p><ol><li>将原始坐标映射到$[0, N-1]$的连续区间</li><li>消除坐标值过大带来的计算复杂度<br>例如：将坐标$(103, 205)$压缩为$(1, 2)$。</li></ol><p>有效矩形判定条件：</p><ul><li>每个有效子集对应唯一的最小包围矩形</li><li>矩形四条边上必须各有一头奶牛</li><li>由于坐标唯一性，每条边恰好有一头牛</li></ul><p>算法优化路径</p><ul><li>基础解法（$O(N^5)$时间复杂度）</li></ul><p>枚举所有可能的矩形组合（$O(N^4)$个可能性）</p><p>对每个矩形检查四条边是否有牛（$O(N)$时间）<br>优化解法（$O(N^4)$时间复杂度）</p><ul><li>预处理二维前缀和数组</li></ul><p>将矩形检查优化为$O(1)$时间操作</p><ul><li>最优解法（$O(N^2)$时间复杂度）</li></ul><p>固定上下边界的两头牛$(a, b)$</p><p>使用二维前缀和快速计算：</p><p>左侧候选牛：位于$[0, min(x_a,x_b)]\times[y_a,y_b]$区间</p><p>右侧候选牛：位于$[max(x_a,x_b), N-1]\times[y_a,y_b]$区间</p><p>总方案数即为两侧候选数的乘积</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>对于四个固定顺序的字母块（每个块包含$6$个字母），可以组成$6^4&#x3D;1296$个不同的四字母单词。而四个字母块的排列方式共$4\times3\times2\times1&#x3D;24$种，因此总共可以生成$1296\times24&#x3D;31104$种不同的四字母排列组合。</p><p>同理，我们可以计算：</p><ul><li>单字母组合：$6\times4&#x3D;24$种（每个块选$1$个字母，共$4$个块）。</li><li>双字母组合：$6^2\times(4\times3)&#x3D;36\times12&#x3D;432$种。</li><li>三字母组合：$6^3\times(4\times3\times2)&#x3D;216\times24&#x3D;5184$种。</li></ul><p>由于总组合数较小（共$24+432+5184+31104&#x3D;36744$种），我们可以预计算所有可能的单词，并存入集合（如哈希表）以便快速查询某个单词是否合法。</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>二分答案</p><p>主要难点在最后的可行性检查（solve 函数）：</p><ul><li><strong>复制区间信息</strong>：创建临时数组存储区间的左右端点。<ul><li>贪心选择：<ul><li>初始位置设为第一个区间的左端点。</li><li>对于每个后续点，尝试在当前位置右侧至少<code>mid</code>距离处选择下一个点：<ul><li>使用<code>upper_bound</code>快速找到第一个左端点大于<code>loc + mid</code>的区间。</li><li>检查前一个区间是否能容纳<code>loc + mid</code>，或选择下一个区间的左端点。</li></ul></li><li>若无法找到合适的点，返回<code>false</code>。</li></ul></li><li>最终检查所有点是否落在有效范围内（不超过<code>maxn</code>）。</li></ul></li></ul><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>被我吃了，$\color{purple}紫题$，写不了半点。</p><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p>观察样例，发现：</p><ul><li><p>由于无论什么操作每次总和都会乘以2，所以总的操作次数<code>sum</code>可以根据总和的变化来确定</p></li><li><p>观察到L操作与R操作产生的序列$a_0,a_1,a_2,a_3$</p></li></ul><p>L操作产生$a_0+a_3,a_1+a_0,a_2+a_1,a_3+a_2$</p><p>R操作产生$a_0+a_1,a_1+a_2,a_2+a_3,a_3+a_0$</p><p>相邻两个数都会相加一次，唯一的区别是所有的数瞬移了一个位置</p><p>所以可以先进行<code>sum</code>次$L$操作，然后再判断需要移动几次到达$t$数组。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.19总结</title>
    <link href="/2025/07/19/%E5%A4%8F%E4%BB%A4%E8%90%A57-19%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/19/%E5%A4%8F%E4%BB%A4%E8%90%A57-19%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>全称<strong>dynamic programming,DP</strong></p><p>狭义上是子问题的递推。<del>广义上等于递推</del>，但是几乎不考虑。</p><p>三要素：</p><ul><li>子问题（状态）</li><li>递推式（状态转移）</li><li>边界条件（边界状态）</li></ul><p>$DP$的两种方式</p><ul><li>后向$DP$填表法$pull\ DP$从前往后更新</li><li>前向$DP$刷表法$push\ DP$从后往前找哪些可以更新状态，并更新。</li></ul><p>在一个序列上的$DP$：序列又两种子结构前缀（一个参数）和区间（两个参数）。</p><p>可以使用$DP$的数据结构：</p><ul><li>序列</li><li>网络</li><li>数</li><li>……..</li></ul><h2 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h2><p>例一就是简单递推。</p><p>目标：$f[N]$</p><p>边界条件：$f[0]&#x3D;1,f[1]&#x3D;2$。</p><p>递推式：$f[i]&#x3D;f[i-1]+f[i-2],2\le i$</p><h2 id="T1-构造序列"><a href="#T1-构造序列" class="headerlink" title="T1 构造序列"></a>T1 构造序列</h2><p>这题可以贪心，因为只能在最后添加。</p><p>目标：$f[N]$</p><p>边界条件：$f[0]&#x3D;0$</p><p>递推式：$f[j]\le f[j+1]（0\le j\le N）$</p><p>一次性添加的项数越大越好。</p><h2 id="T2-阿弥陀签的数量"><a href="#T2-阿弥陀签的数量" class="headerlink" title="T2 阿弥陀签的数量"></a>T2 阿弥陀签的数量</h2><p>由于各行都相对独立，所以从上往下考虑每一行。</p><p>定义$g[i][j]$表示：对于前$i$行，又多少种画法使得从$(0,1)$经过$i$步到达$(i,j)$。</p><p>边界条件：$g[0][1]&#x3D;1$。</p><h2 id="T3-Knapsack-2"><a href="#T3-Knapsack-2" class="headerlink" title="T3 Knapsack 2"></a>T3 Knapsack 2</h2><p>边界条件：$f[0][0]&#x3D;0,f[0][j]&#x3D;W+1,j&#x3D;1,…..,10^5$</p><p>递推式：对于$i&#x3D;1,…,N$，有递推式：<br>$$<br>f[i][j] &#x3D;<br>\begin{cases}<br>f[i - 1][j], &amp; 0 \leq j &lt; v_i, \<br>\min(f[i - 1][j], f[i - 1][j - v_i] + w_i), &amp; v_i \leq j \leq 10^5.<br>\end{cases}<br>$$</p><h2 id="T4-盒饭2"><a href="#T4-盒饭2" class="headerlink" title="T4 盒饭2"></a>T4 盒饭2</h2><p><del>一看就是日本的题目</del></p><p>定义$f[i][j][k]$代表前$i$个盒饭吃了$j$个鱼丸$k$代表了最多的盒饭数。</p><p>想清思路，盒饭数较少但是鱼丸，肉丸数较多。所以盒饭数很重要。</p><h2 id="例题-N-2-：分成三队"><a href="#例题-N-2-：分成三队" class="headerlink" title="例题$N+2$：分成三队"></a>例题$N+2$：分成三队</h2><p><del>看到输出<code>-1</code>，你想到了什么？</del></p><p>空间计算：</p><p>$f[i][j][k]$中$i\le10^2,j\le500,k\le500$，总共$\le2.5\times10^7$，没问题。</p><p>目标：$f[N][M][M]$</p><p>边界条件：$f[0][0][0]&#x3D;0,f[0][i][j]&#x3D;N+1,i\ne0或j\ne0$</p><p>递推式：</p><ul><li><p>第一队：$f[i-1][j-B_i][k]+(A_i\ne1),B_i\le j$</p></li><li><p>第二队：$f[i-1][j][k-B_i]+(A_i\ne2),B_i\le k$</p></li><li><p>第三队：$f[i-1][j][k]+(A_i\ne3)$</p></li></ul><h2 id="例题383-f：abc383f-Diversity"><a href="#例题383-f：abc383f-Diversity" class="headerlink" title="例题383_f：abc383f Diversity"></a>例题383_f：abc383f Diversity</h2><p>按照颜色分组，一次只处理同一颜色的物品。</p><p>目标：$f[N][X]$</p><p>边界条件：$f[0][j]&#x3D;0,0\le j\le X$</p><p>递推式：</p><p>对于每种颜色$i&#x3D;1,…,N$：</p><ol><li>将$f[i][j]$置为$f[i-1][j],0\le j\le X$</li><li>对于每个颜色是$i$的物品$(P,U)$，按照$j&#x3D;X,X-1,…,P$的顺序，置$f[i][j]&#x3D;max(f[i][j],f[i-1][j-P]+U+K,f[i][j-p]+U)$</li></ol><h2 id="T6-分组"><a href="#T6-分组" class="headerlink" title="T6 分组"></a>T6 分组</h2><p>目标：$f[N][0][X]$</p><p>边界条件：$f[0][0][k]&#x3D;1(0\le k\le X)$</p><p>递推式：不好写，看图片吧</p><p><img src="https://cdn.rthe.cn/cached-d4940fbf1bf1dc8e4885776958440024-avif/mapbad/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-07-19%20192502.png" alt="T6递推式"></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人们为什么还要使用电脑？</title>
    <link href="/2025/07/18/%E4%BA%BA%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E4%BD%BF%E7%94%A8%E7%94%B5%E8%84%91%EF%BC%9F/"/>
    <url>/2025/07/18/%E4%BA%BA%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E4%BD%BF%E7%94%A8%E7%94%B5%E8%84%91%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>电脑十分的不安全，据说洛谷还遭到攻击了，所以说，电脑到底有什么用，我有一种防黑客的简单粗暴的方法，大家可以看一下：</p><p>第一步，销毁你的电脑，让黑客无从下手（比任何的安全防护都强）</p><p>第二步，打电话，让洛谷通过邮寄的方式，把题目送到你的家里</p><p>第三步，比赛的时候，你把程序写到白纸上，然后交上去，接着，裁判就通过人工模拟的智能算法，验证你的分数。</p><p>这样黑客再强大，也无从下手！<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这个帖子是我从洛谷转载到信友队的论坛上的[这里](https://discourse.xinyoudui.com/t/topic/28641)，洛谷上的原帖已经找不到了。">[1]</span></a></sup></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这个帖子是我从洛谷转载到信友队的论坛上的<a href="https://discourse.xinyoudui.com/t/topic/28641">这里</a>，洛谷上的原帖已经找不到了。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>搬运/非原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.18总结</title>
    <link href="/2025/07/18/%E5%A4%8F%E4%BB%A4%E8%90%A57-18%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/18/%E5%A4%8F%E4%BB%A4%E8%90%A57-18%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>Day7 模考</p><h2 id="时间分配"><a href="#时间分配" class="headerlink" title="时间分配"></a>时间分配</h2><p>$8:30\sim8:40$做T1，AC</p><p>$8:40\sim8:50$做T2，AC</p><p>$8:50\sim9:30$做T3，AC</p><p>$9:30\sim10:00$尝试T3，样例不对</p><p>$10:00\sim10:20$尝试T4，过不了</p><p>$10:20\sim10:30$T4骗分，30tps</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>比较简单。</p><p>定义$a_i$代表袋子里又$i$个标号为$a$的球。</p><p>同时额外累计一个<code>ans</code>，代表当前袋子里球的数量</p><p>读入每组数据，如果是</p><ul><li>放入：将下述操作完成后$a_i$加一。<ul><li>操作：</li><li>$a_i&#x3D;0$：将<code>ans</code>加一</li><li>否则<code>ans</code>不变</li></ul></li><li>取出：完成下述操作后$a_i$减一。<ul><li>操作：</li><li>$a_i&#x3D;0$：将<code>ans</code>减一</li><li>否则<code>ans</code>不变</li></ul></li><li>统计：直接输出<code>ans</code></li></ul><p>核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-type">int</span> x;<br>    cin&gt;&gt;x;<br>    <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">0</span>) ans++;<br>    a[x]++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-type">int</span> x;<br>    cin&gt;&gt;x;<br>    a[x]--;<br>    <span class="hljs-keyword">if</span>(a[x]==<span class="hljs-number">0</span>) ans--;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p><del>强烈怀疑是放错题目了</del></p><p>这题就是一个简单的判断模三。但是，当你准备把一段简单的模三代码交上去时，你会发现<del>什么结果都没有</del>因为时<code>OI</code>赛制。但是实际上只有十分，因为<del>你没开<code>long long</code></del>不对是因为你没看题面。</p><p>题面里明明白白地写了：$\Huge接下来每个整数的长度小于等于1000.$</p><p>那么，接下来的就很简单了。</p><p>用<code>string</code>是最简单的，当然你用字符数组我也不拦着你。</p><p>简单的核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string a;<br>cin&gt;&gt;a;<br><span class="hljs-type">int</span> add=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">size</span>();i++)&#123;<br>    add+=a[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(add%<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br></code></pre></td></tr></table></figure><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>这道题目相对来说还是比较简单的。</p><p>这里的重点不放在做法上，在一种在考试时很实用的小妙招：</p><p>一种简单的<code>vector</code>去重方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//排序</span><br><span class="hljs-comment">//unique把重复元素放到最后，并返回最后一个非重复元素的下一个的下标</span><br>a.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>()),a.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//erase擦除第一个重复元素到最后一个元素</span><br></code></pre></td></tr></table></figure><p>注意：判断下标，所以要加一句，否则会<code>RE</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(c.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure><p>注意特殊情况，否则容易爆零。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//情况1</span><br><span class="hljs-built_in">lower_bound</span>();<br><span class="hljs-built_in">end</span>() n<span class="hljs-number">+1</span>;<span class="hljs-comment">//lower_bound()找不到可能返回end+1的下标，容易越界</span><br><span class="hljs-keyword">auto</span> it=<span class="hljs-built_in">lower_bound</span>();<span class="hljs-comment">//可能这个指针为空</span><br>ans=<span class="hljs-built_in">max</span>(ans,*it);<span class="hljs-comment">//这里可能会越界</span><br><br><span class="hljs-comment">//情况2</span><br><span class="hljs-comment">//减之前判断下标位置</span><br><span class="hljs-keyword">if</span>(it!=a.<span class="hljs-built_in">begin</span>()) it--;<br></code></pre></td></tr></table></figure><p>还有一个<code>vector</code>的使用小技巧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">reserve</span>()<span class="hljs-comment">//可以给vector预留空间</span><br></code></pre></td></tr></table></figure><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>为了最大化嵌套后的结果，我们需要：</p><p>优先选择增长潜力大的函数：即每次嵌套后能带来更大增幅的函数。</p><p>$dp$优化：通过$dp$逐步构建最优解，避免暴力枚举所有可能的组合。</p><p>对每个函数计算一个关键值$K&#x3D;\frac{B_i}{A_i−1}$，用于衡量函数的增长潜力。</p><p>如果$A_i&#x3D;1$则$k$设为无穷大，确保这些函数优先被选中。</p><p>按照$k$从大到小排序，确保增长潜力大的函数优先被考虑。</p><p>动态规划计算最大值：</p><p>初始化动态规划数组$dp$，其中$dp[j]$表示选择$j$个函数时的最大可能值。</p><p>初始时$dp[0]&#x3D;1$，因为嵌套的初始输入是$1$</p><p>对于每个函数，从$K$到$1$反向更新$dp[j]$：</p><p>计算选择当前函数后的新值：$neww&#x3D;A_i\times dp[j−1]+B_i$。</p><p>如果新值比当前$dp[j]$大，则更新$dp[j]$。</p><h3 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h3><p><del>骗分骗30</del></p><p>还没搞定<code>QwQ</code>。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>骗分导论</title>
    <link href="/2025/07/17/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/"/>
    <url>/2025/07/17/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>骗分是什么呢？骗分就是用简单的程序（比标准算法简单很多，保证新手能轻松搞定的程序），尽可能多得骗取分数。这个主要是因为<strong>CSP、NOIP、蓝桥杯、PAT</strong> 等竞赛的 <strong>OI赛制</strong> 决定的，<strong>只比对输出结果</strong>。</p><p>打油诗：</p><p>数学上来先打表，贪心只能过样例。<br>ＤＰ一般看规律，模拟只会猜题意。<br>图论强行套模板，组合数学靠运气。<br>分治做得像枚举，计算几何瞎暴力。<br>数据结构干瞪眼，数论只会ＧＣＤ。<br>递归递推伤不起，搜索茫然ＴＬＥ。</p><p>骗分过样例，暴力出奇迹<br>暴搜挂着机，打表出省一<br>数学先打表，D P看运气<br>穷举 T L E ，递推 U K E<br>模拟 M L E ，贪心还 C E<br>N 方过百万，暴力踩标算<br>肥修赛大象，只是代码短<br>想要骗到分，就要有方法<br>图论背模板，数论背公式<br>动规背方程，高精背代码<br>如果都没背，干脆输样例</p><p>掰开讲：</p><h3 id="1、-若无解，请输出-1"><a href="#1、-若无解，请输出-1" class="headerlink" title="1、 若无解，请输出-1"></a>1、 若无解，请输出-1</h3><p>在很多题目中都有这句话：“若无解，请输出-1.”。</p><p>那么，这时，我们就可以直接<code>printf(&quot;-1&quot;);</code>了。</p><h3 id="2、-样例——白送的分数"><a href="#2、-样例——白送的分数" class="headerlink" title="2、 样例——白送的分数"></a>2、 样例——白送的分数</h3><p>每道题目的后面，都有一组“<strong>样例输入</strong>”和“<strong>样例输出</strong>”。它们的价值极大，不仅能初步帮你检验程序的对错，而且，如果你不会做这道题，你就可以<strong>直接输出样例</strong>！</p><p>例如USACO，它的题目有一个规则，第一组数据必须是样例。那么，只要你输出所有的样例，你就能得到100分（满分1000）！这是相当可观的分数了。</p><p>只要你会基本的输入输出语句，你就能实现这些骗分方法。</p><h3 id="3、模拟"><a href="#3、模拟" class="headerlink" title="3、模拟"></a>3、模拟</h3><p>所谓模拟，就是用计算机程序来模拟实际的事件。例如NOIP2012的“寻宝”，就是写一个程序来模拟小明上藏宝塔的动作。</p><p>模拟主要可以应用在骗高级数据结构题上的分，例如线段树。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">排  队(USACO <span class="hljs-number">2007</span> January Silver)<br> <br>【问题描述】<br>每天，农夫约翰的N（<span class="hljs-number">1</span>≤N≤<span class="hljs-number">50000</span>）头奶牛总是按同一顺序排好队，有一天，约翰决定让一些牛玩一场飞盘游戏（Ultimate Frisbee），他决定在队列里选择一群位置连续的奶牛进行比赛，为了避免比赛结果过于悬殊，要求挑出的奶牛身高不要相差太大。<br>约翰准备了<span class="hljs-selector-tag">Q</span>（<span class="hljs-number">1</span>≤<span class="hljs-selector-tag">Q</span>≤<span class="hljs-number">200000</span>）组奶牛选择，并告诉你所有奶牛的身高Hi（<span class="hljs-number">1</span>≤  Hi ≤<span class="hljs-number">106</span>）。他想知道每组里最高的奶牛和最矮的奶牛身高差是多少。<br>注意：在最大的数据上，输入输出将占据大部分时间。<br>【输入】<br>第一行，两个用空格隔开的整数N和<span class="hljs-selector-tag">Q</span>。<br>第<span class="hljs-number">2</span>到第N+<span class="hljs-number">1</span>行，每行一个整数，第<span class="hljs-selector-tag">i</span>+<span class="hljs-number">1</span>行表示第<span class="hljs-selector-tag">i</span>头奶牛的身高Hi<br>第N+<span class="hljs-number">2</span>到第N+<span class="hljs-selector-tag">Q</span>+<span class="hljs-number">1</span>行，每行两个用空格隔开的整数<span class="hljs-selector-tag">A</span>和<span class="hljs-selector-tag">B</span>，表示选择从<span class="hljs-selector-tag">A</span>到<span class="hljs-selector-tag">B</span>的所有牛（<span class="hljs-number">1</span> ≤ <span class="hljs-selector-tag">A</span> ≤ <span class="hljs-selector-tag">B</span> ≤ N）<br>【输出】<br>共<span class="hljs-selector-tag">Q</span>行，每行一个整数，代表每个询问的答案。<br>输入样例：<br><span class="hljs-number">6</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span><br><span class="hljs-number">7</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">2</span><br><span class="hljs-number">5</span><br><span class="hljs-number">1</span> <span class="hljs-number">5</span><br><span class="hljs-number">4</span> <span class="hljs-number">6</span><br><span class="hljs-number">2</span> <span class="hljs-number">2</span> <br>输出样例：  <br><span class="hljs-number">6</span><br><span class="hljs-number">3</span><br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>对于这个例子，大牛们可以写个线段树，新手就模拟吧。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>&#123;<br>    scanf(“%d%d”,&amp;a,&amp;b);<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">min</span>=INT_MAX,<span class="hljs-keyword">max</span>=INT_MIN;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=a;i&lt;=b;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(h[i]&lt;<span class="hljs-keyword">min</span>)<span class="hljs-keyword">min</span>=h[i];<br>        <span class="hljs-keyword">if</span>(h[i]&gt;<span class="hljs-keyword">max</span>)<span class="hljs-keyword">max</span>=h[i];<br>    &#125;<br>    printf(“%d\n”,<span class="hljs-keyword">max</span>-<span class="hljs-keyword">min</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、万能钥匙——DFS"><a href="#4、万能钥匙——DFS" class="headerlink" title="4、万能钥匙——DFS"></a>4、万能钥匙——DFS</h3><p>DFS是图论中的重要算法，骗分导论定理：<strong>DFS是万能的</strong></p><p>比如说，</p><p>一些动态规划题，可以DFS；</p><p>数学题，可以DFS；</p><p>剪枝的题，更能DFS。</p><p>例题：NOIP2003，采药</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs abnf">题目描述 Description<br>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”<br>如果你是辰辰，你能完成这个任务吗？<br> <br>输入描述：<br>输入第一行有两个整数T（<span class="hljs-number">1</span>&lt;<span class="hljs-operator">=</span>T&lt;<span class="hljs-operator">=</span><span class="hljs-number">1000</span>）和M（<span class="hljs-number">1</span>&lt;<span class="hljs-operator">=</span>M&lt;<span class="hljs-operator">=</span><span class="hljs-number">100</span>），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在<span class="hljs-number">1</span>到<span class="hljs-number">100</span>之间（包括<span class="hljs-number">1</span>和<span class="hljs-number">100</span>）的整数，分别表示采摘某株草药的时间和这株草药的价值。<br> <br>输出描述：<br>输出包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。<br>样例输入：<br><span class="hljs-number">70</span> <span class="hljs-number">3</span><br><span class="hljs-number">71</span> <span class="hljs-number">100</span><br><span class="hljs-number">69</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br>样例输出：<br><span class="hljs-number">3</span><br>数据范围及提示<br>对于<span class="hljs-number">30</span>%的数据，M&lt;<span class="hljs-operator">=</span><span class="hljs-number">10</span>；<br>对于全部的数据，M&lt;<span class="hljs-operator">=</span><span class="hljs-number">100</span>。<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-type">void</span> DFS(int d<span class="hljs-punctuation">,</span>int <span class="hljs-keyword">c</span>)<br>&#123;<br>if(d<span class="hljs-operator">=</span><span class="hljs-operator">=</span>n)<br>&#123;if(<span class="hljs-keyword">c</span>&gt;ans)ans<span class="hljs-operator">=</span><span class="hljs-keyword">c</span><span class="hljs-comment">; return;&#125;</span><br>DFS(d<span class="hljs-number">+1</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span>+w[i])<span class="hljs-comment">;</span><br>DFS(d<span class="hljs-number">+1</span><span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span>)<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>骗分代码如上：</p><h3 id="5、猜想—输出随机数"><a href="#5、猜想—输出随机数" class="headerlink" title="5、猜想—输出随机数"></a>5、猜想—输出随机数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-comment">//以上两个头文件必须加</span><br><span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">//输出随机数前执行此语句</span><br><span class="hljs-built_in">printf</span>(“%d”,<span class="hljs-built_in">rand</span>()%X);<br><span class="hljs-comment">//输出一个0~X-1的随机整数。</span><br></code></pre></td></tr></table></figure><p>这种方法适用于输出一个整数（或判断是否）的题目中，答案的范围<strong>越小越好</strong>。</p><p>据说，在NOIP2013中，有人最后一题不会，愤然打了个随机数，结果得了 70 分！！！。</p><h3 id="6、猜测答案"><a href="#6、猜测答案" class="headerlink" title="6、猜测答案"></a>6、猜测答案</h3><p>有些时候，问题的答案可能很有特点：对于大多数情况，答案是一样的。这时，就该骗分了。</p><p>发掘出这个答案，然后直接输出。</p><p>需要运用《骗分导论》第3章中学到的知识，先写出朴素算法，然后造一些数据，可能就会发现规律。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css">炸毁计划<br>【问题描述】<br>皇军侵占了通往招远的黄金要道。为了保护渤海通道的安全，使得黄金能够顺利地运送到敌后战略总指挥地延安，从而购买战需武器，所以我们要通过你的程序确定这条战略走廊是否安全。<br> <br>已知我们有N座小岛，只有使得每一个小岛都能与其他任意一个小岛联通才能保证走廊的安全。每个小岛之间只能通过若干双向联通的桥保持联系，已知有M座桥(Ai,Bi)表示第<span class="hljs-selector-tag">i</span>座桥连接了Ai与Bi这两座城市。<br> <br>现在，敌人的炸药只能炸毁其中一座桥，请问在仅仅炸毁这一座桥的情况下，能否保证所有岛屿安全，都能联通起来。<br> <br>现在给出<span class="hljs-selector-tag">Q</span>个询问Ci，其中Ci表示桥梁编号，桥梁的编号按照输入顺序编号。每个询问表示在仅仅炸毁第Ci座桥的情况下能否保证所有岛屿安全。如果可以，在输出文件当中，对应输入顺序输出yes，否则输出no（输出为半角英文单词，区分大小写，默认为小写，不含任何小写符号，每行输出一个空格，忽略文末空格）。<br> <br>【输入格式】<br>第一行 三个整数N，M，<span class="hljs-selector-tag">Q</span>，分别表示岛屿的个数，桥梁的个数和询问的个数。<br>第二行到第M+<span class="hljs-number">1</span>行 每行两个整数。第<span class="hljs-selector-tag">i</span>+<span class="hljs-number">1</span>行有两个整数Ai Bi表示这个桥梁的属性。<br>第M+<span class="hljs-number">2</span>行 有<span class="hljs-selector-tag">Q</span>个整数Ci表示查询。<br> <br>【输出格式】<br><span class="hljs-selector-tag">Q</span>行，表示查询结果。<br> <br>【样例】<br><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">1</span>    <br>no<br> <br>【样例范围】<br>对于<span class="hljs-number">80%</span>的数据，N≤<span class="hljs-number">100</span>。<br>对于<span class="hljs-number">100%</span>的数据，N≤<span class="hljs-number">1000</span>，N,<span class="hljs-selector-tag">Q</span>≤M≤<span class="hljs-number">2000</span> 。<br></code></pre></td></tr></table></figure><p>问题来了，<strong>那么多座桥，炸一座就破坏岛屿的联系，可能性微乎其微</strong>（除非特别设计数据）。骗分策略就出来了：<strong>对于所有询问，输出 yes. 此算法得 80 分。</strong></p><h3 id="7、-小数据杀手—打表"><a href="#7、-小数据杀手—打表" class="headerlink" title="7、 小数据杀手—打表"></a>7、 小数据杀手—打表</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs excel">NOIP2003 栈<br> <br>题目描述<br> <br>栈是计算机中经典的数据结构，简单的说，栈就是限制在一端进行插入删除操作的线性表。<br>栈有两种最重要的操作，即pop（从栈顶弹出一个元素）和push（将一个元素进栈）。<br>栈的重要性不言自明，任何一门数据结构的课程都会介绍栈。宁宁同学在复习栈的基本概念时，想到了一个书上没有讲过的问题，而他自己无法给出答案，所以需要你的帮忙<br>宁宁考虑的是这样一个问题：一个操作数序列，从<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，一直到<span class="hljs-built_in">n</span>（图示为<span class="hljs-number">1</span>到<span class="hljs-number">3</span>的情况），栈A的深度大于<span class="hljs-built_in">n</span>。<br> <br>现在可以进行两种操作，<br> <br><span class="hljs-number">1</span>.将一个数，从操作数序列的头端移到栈的头端（对应数据结构栈的push操作）<br> <br><span class="hljs-number">2</span>. 将一个数，从栈的头端移到输出序列的尾端（对应数据结构栈的pop操作）<br> <br>使用这两种操作，由一个操作数序列就可以得到一系列的输出序列，下图所示为由<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>生成序列<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span>的过程。（原始状态如上图所示） 。<br> <br>你的程序将对给定的<span class="hljs-built_in">n</span>，计算并输出由操作数序列<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，…，<span class="hljs-built_in">n</span>经过操作可能得到的输出序列的总数。<br> <br>输入描述<br>输入文件只含一个整数<span class="hljs-built_in">n</span>（<span class="hljs-number">1</span>≤<span class="hljs-built_in">n</span>≤<span class="hljs-number">18</span>）<br> <br>输出描述<br>输出文件只有一行，即可能输出序列的总数目<br> <br>样例输入<br><span class="hljs-number">3</span><br>样例输出<br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span> a[<span class="hljs-number">18</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">42</span>,<span class="hljs-number">132</span>,<span class="hljs-number">429</span>,<span class="hljs-number">1430</span>,<span class="hljs-number">4862</span>,<span class="hljs-number">16796</span>,<span class="hljs-number">58786</span>,<span class="hljs-number">208012</span>,<span class="hljs-number">742900</span>,<span class="hljs-number">2674440</span>,<span class="hljs-number">9694845</span>,<span class="hljs-number">35357670</span>,<span class="hljs-number">129644790</span>,<span class="hljs-number">477638700</span>&#125;;<br><br><span class="hljs-attribute">scanf</span>(“%d”,&amp;n);<br> <br><span class="hljs-attribute">printf</span>(“%d”,ans[n-<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><p>在OI考试中最后难的题数据最后的几个，他们往往不会创造新的数据，此时就可以直接输出最后几个数据了。</p><p><img src="https://cdn.rthsoftware.cn/cached-08752e028a4bcc89d1a2a03e04c31f2b-avif/mapbad/1e34e78f64edab76a4b9a1d49b51ba76736798c7.png" alt="image|331x498"></p><p>怎么进队拿国一?看懂洛谷A+B。刷题是一种出路，枚举是一种思想。打表是一种勇气，搜索是一种信仰。剪枝是一种精神，骗分是一种日常。爆零是一种宿命，WA是一种绝望。TLE是一种痛苦，RE是一种放弃。UKE是一种无奈，AC是一种原谅。弃赛是一种颓废，AK是一种梦想。吊打是一种必然，进队是一种奢望。</p><p>模拟只会猜题意，贪心只能过样例，数学上来先打表，组合数学靠运气，DP一般看规律，计算几何瞎暴力，图论强行套模板，数论只会GCD，递归递推伤不起，搜索茫然TLE，分治做得像枚举，暴力枚举数第一，数据结构干瞪眼，算法建树眼迷离，怒刷水题找信心，考试一来全懵逼，天若有情天亦老，我为暴力续一秒。十年OI一场空，不开long long见祖宗。比赛时节家家雨，OI赛场全WA。超时不会优化，只能原地爆炸。数学是火，点亮物理的灯；物理是灯，照亮化学的路；化学是路，通向生物的坑；生物是坑，埋葬学理的人。 文言是火，点亮历史宫灯；历史是灯，照亮社会之路；社会是路，通向哲学大坑；哲学是坑，埋葬文科生。 值得一看的东西~</p><p>$\Huge The\ End$<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这篇的原帖在[这里](https://discourse.xinyoudui.com/t/topic/20256)，也是我自己发的。">[1]</span></a></sup></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这篇的原帖在<a href="https://discourse.xinyoudui.com/t/topic/20256">这里</a>，也是我自己发的。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>教程</tag>
      
      <tag>笔记</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.17总结</title>
    <link href="/2025/07/17/%E5%A4%8F%E4%BB%A4%E8%90%A57-17%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/17/%E5%A4%8F%E4%BB%A4%E8%90%A57-17%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>昨天休息所以没有总结。</p><h1 id="数上问题"><a href="#数上问题" class="headerlink" title="数上问题"></a>数上问题</h1><h2 id="数的定义和性质"><a href="#数的定义和性质" class="headerlink" title="数的定义和性质"></a>数的定义和性质</h2><p>什么是树？</p><ul><li>有$n-1$条边且连通</li><li>有$n-1$条边且无环</li><li>任意两点之间有唯一路径</li></ul><h3 id="T1-构图判树"><a href="#T1-构图判树" class="headerlink" title="T1 构图判树"></a>T1 构图判树</h3><p>直接找所有的包含区间，找到就加边，如果超过了，就输出<code>no</code>。</p><p>条件：数只有$n-1$条变F.</p><h2 id="有根数"><a href="#有根数" class="headerlink" title="有根数"></a>有根数</h2><p>指定一个顶点<code>r</code>为根节点，就可以解决很多问题。</p><p>节点到根节点的深度称为深度，深度相同的节点位于同一层。高度是深度的最大值。</p><p>还有一堆：</p><p>![屏幕截图 2025-07-17 090206.png (1152×611)](<a href="https://cdn.rthe.cn/cached-291d9a866a7015d6cbd9ededa3895386-avif/mapbad/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://cdn.rthe.cn/cached-291d9a866a7015d6cbd9ededa3895386-avif/mapbad/屏幕截图</a> 2025-07-17 090206.png)</p><h2 id="树上DFS"><a href="#树上DFS" class="headerlink" title="树上DFS"></a>树上DFS</h2><p>白点：没访问过</p><p>黑点：已经访问但是没有回溯</p><p>黑点：已返回且已回溯</p><p><code>dfs</code>时可以使用时间戳。分别标记访问到时和回溯到时。根节点标记为时间0。</p><h3 id="T2-数后代"><a href="#T2-数后代" class="headerlink" title="T2 数后代"></a>T2 数后代</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> cnt[N];<br>vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; f[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; g[N];<br><br><span class="hljs-type">int</span> ans[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span></span>&#123;<br>    dep[x]=dep[fa]<span class="hljs-number">+1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:f[x])&#123;<br>        <span class="hljs-type">int</span> di=p.first,i=p.second;<br>        ans[i]-=cnt[di];<br>    &#125;<br>    cnt[dep[x]]++;<span class="hljs-comment">//放这里！！！！！！！！！！</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> y:g[x])&#123;<br>        <span class="hljs-keyword">if</span>(y!=g[x])&#123;<br>            <span class="hljs-built_in">dfs</span>(y,x);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:f[x])&#123;<br>        <span class="hljs-type">int</span> di=p.first,i=p.second;<br>        ans[i]+=cnt[di];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T3-树上炸弹"><a href="#T3-树上炸弹" class="headerlink" title="T3 树上炸弹"></a>T3 树上炸弹</h3><p>核心思路就是用只能往下的炸弹模拟既能上又能下的炸弹，再扩展。</p><p>也可以<code>dp</code>：</p><p>令$f[u][i]$为子树$u$里的炸弹$(p,w)$中，满足$i\le w-d(p,u)$的有多少个。那么：</p><ul><li>在子树$u$中，能炸到点$u$的炸弹数量就是$f[u][0]$。</li><li>在子树$a_1$里但不在子树$u$里，能炸到$u$的炸弹数量就是$f[a_1][1]-f[u][2]$。</li><li>在子树$a_2$里但不在子树$a_1$里，能炸到$u$的炸弹数量就是$f[a_2][2]-f[1_1][3]$。</li><li>………..</li></ul><h3 id="T4-Padel-Prize-Pursuit"><a href="#T4-Padel-Prize-Pursuit" class="headerlink" title="T4 Padel Prize Pursuit"></a>T4 Padel Prize Pursuit</h3><p>考虑一个有$m-1$个节点的图，点从$0$到$m$编号。每一个点代表了一枚奖牌。也就是一天或一场比赛。若第$i$枚奖牌下一次易主是在第$j$场比赛之后，那么就从$i$向$j$连接一条边。</p><p>考虑从根节点向下走到一个点$v$的过程。我们维护一个数组$d[0…n-1]$，当我们走到点$v$时，$d[i]$就是人$i$持有奖牌$v$个晚上。</p><p>在维护数组$d$时，顺便维护$d$的<code>argmax</code>（即$d$在哪个下标$i$的位置取得了最大值）。</p><h2 id="k祖先问题"><a href="#k祖先问题" class="headerlink" title="k祖先问题"></a>k祖先问题</h2><p>给你一个有$n$个点的有根树，点从$1$编号到$n$。回答$q$个询问，询问内容为<em>求点$u$的第$k$个祖先</em>。</p><p>这里使用倍增。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> log=<span class="hljs-built_in">bitwidth</span>(n);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jump</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;log;i++)&#123;<br>        <span class="hljs-keyword">if</span>(k&gt;&gt;i&amp;<span class="hljs-number">1</span>)&#123;<br>            u=anc[u][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CF1175E【非例题】"><a href="#CF1175E【非例题】" class="headerlink" title="CF1175E【非例题】"></a>CF1175E【非例题】</h3><p>预处理：</p><ul><li>把区间按左端点从小到大排序，左端点相同的按照右端点从大到小排序。</li><li>去除无用的区间</li><li>找出每个区间的父节点</li><li>计算出倍增表</li></ul><p>对于每个询问$[x,y]$：</p><ul><li>二分查找最后一个满足左端点小于等于$x$的区间，设此区间的编号为$i$。</li><li>在$i$所在的有根树上，从节点$i$出发，向上跳到第一个右端点大于等于$y$的区间，计算跳过的距离。</li></ul><h2 id="LCA问题"><a href="#LCA问题" class="headerlink" title="LCA问题"></a>LCA问题</h2><p>给一棵有根树，回答$t$个问题：求点$u$与点$v$的最近公共祖先。</p><h3 id="方法1-使用is-anc函数"><a href="#方法1-使用is-anc函数" class="headerlink" title="方法1 使用is_anc函数"></a>方法1 使用<code>is_anc</code>函数</h3><p>有一个函数<code>is_anc(x,y)</code>来判断点$x$是不是点$y$的祖先，那么就可以实现这个问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_anc</span>(u,v)) <span class="hljs-keyword">return</span> u;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_anc</span>(v,u)) <span class="hljs-keyword">return</span> v;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=log<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(anc[u][i]&amp;&amp;!<span class="hljs-built_in">is_anc</span>(anc[u][i],v))&#123;<br>            u=anc[u][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> anc[u][<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法2-使用节点深度"><a href="#方法2-使用节点深度" class="headerlink" title="方法2 使用节点深度"></a>方法2 使用节点深度</h3><p>如果已经求出了每个点$u$的深度$depth[u]$，那么就可以求$u$和$v$的最近公共祖先。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(depth[u]&lt;depth[v]) <span class="hljs-built_in">swap</span>(u,v);<br>    u=<span class="hljs-built_in">jump</span>(u,depth[u]-depth[v]);<br>    <span class="hljs-keyword">if</span>(u==v) <span class="hljs-keyword">return</span> u;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=log<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(anc[u][i]!=anc[v][i])&#123;<br>            u=anc[u][i];<br>            v=anc[v][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> anc[u][<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T6-【模板】-最近公共祖先"><a href="#T6-【模板】-最近公共祖先" class="headerlink" title="T6 【模板】 最近公共祖先"></a>T6 【模板】 最近公共祖先</h3><p>这题用上面两种方法任选其一完成即可。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.15总结</title>
    <link href="/2025/07/15/%E5%A4%8F%E4%BB%A4%E8%90%A57-15%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/15/%E5%A4%8F%E4%BB%A4%E8%90%A57-15%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天<del>又</del>模考了。</p><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p>$8:30\sim8:40$自习，题目坏了</p><p>$8:40-9:03$做T1，AC</p><p>$9:04\sim9:30$做T2，69tps</p><p>$9:30\sim10:00$想T3-T4</p><p>$10:00\sim10:40$尝试T4</p><p>$10:40\sim11:20$尝试T3</p><p>$11:20\sim12:00$再次T2，变成60tps</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>（T1太简单，先不写了）</p><p>每个值出现了几次？</p><p><code>map&lt;long long,int&gt; cnt</code></p><p>记录整体操作，加了多少s。</p><p>set 把$x-s改成y-s$，注意x&#x3D;&#x3D;y</p><p>这题用到了计数排序的思想，定义$a_i$表示数字$i$出现了$a_i$次。</p><p>出现<code>INFLATION</code>时，记录一个偏移量，到时候读取时下表要减去这个偏移量。</p><p><del>不知道为什么还没过</del></p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>核心思路是通过逐步缩小序列中最大元素与最小元素的差距，最终使所有元素相等。</p><p>就是每次都把最下的那一部分增加一个值，然后排序。重复操作直到所有的值相同。</p><p>步骤：</p><ul><li><p>计算增量：<code>d = (最大元素 - 最小元素 + 1) / 2</code>。这里加 1 是为了向上取整。</p></li><li><p>寻找可加的前缀：遍历序列，找到最大的 <code>i</code> 使得前 <code>i</code> 个元素加 <code>d</code> 后不超过当前最大元素。</p></li><li><p>执行操作：为前 <code>i</code> 个元素加 <code>d</code>，记录操作（<code>i</code> 和 <code>d</code>），然后排序序列。</p></li></ul><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>用dp。</p><p>核心逻辑：<br>每张牌可以选择 “打出” 或 “不打出”。若打出，则需要考虑它在当前轮次的消耗（基于已打出的牌数，费用翻倍）。但直接按轮次处理会很复杂，可通过逆向思维优化（就是滚动数组）：</p><ul><li>假设最后一张打出的牌是$i$，此时它的消耗是$C_i$（因为之后没有牌了，无需考虑翻倍）。</li><li>倒数第二张打出的牌$j$，消耗是$2\times C_j$（因为后面有 1 张牌，所以它的费用在打出后翻倍一次）。</li><li>以此类推，第$t$张（从后往前数）的消耗是$2^{t-1}×C$。</li></ul><p>因此，逆向定义状态：<code>dp[s]</code> 表示 “还需打出一些牌，当前剩余能量为 <code>s</code> 时的最大伤害”，则转移方程为：<br>对于每张牌$i$，若选择它作为 “下一张要打出的牌”（即当前轮次的第一张），则消耗 <code>C_i</code>，剩余能量变为$(s - C_i) &#x2F; 2$（因为后续牌的费用会翻倍，相当于剩余能量需除以 2 来匹配），即：$dp[s] &#x3D; max(dp[s], dp[(s - C_i)&#x2F;2] + D_i)$（需满足$s ≥ C_i$且$(s - C_i)$为非负偶数）。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.14总结</title>
    <link href="/2025/07/14/%E5%A4%8F%E4%BB%A4%E8%90%A57-14%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/14/%E5%A4%8F%E4%BB%A4%E8%90%A57-14%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h1><h2 id="lower-bound与upper-bound"><a href="#lower-bound与upper-bound" class="headerlink" title="lower_bound与upper_bound"></a><code>lower_bound</code>与<code>upper_bound</code></h2><p>用于查找在一个有序数组中的元素。<code>lower_bound(a,b,x)</code>返回第一个<strong>不小于<code>x</code></strong> 的元素的指针或迭代器。如果不存在就返回<code>e</code>；<code>upper_bound(a,b,x)</code>是返回第一个<strong>大于<code>x</code></strong> 的指针或迭代器。如不存在返回<code>e</code>。</p><p>lower_bound是大于等于，upper_bound是大于。</p><p>参数：<code>初始地址，结束地址，数字</code>返回的参数也是地址，要减去开始地址。</p><p>示例：<code>lower_bound(a+1,a+n+1,n)-a</code>，这样就是一个下标了。</p><p>这两个也支持<code>cmp</code>。原理与<code>sort</code>一样。<code>sort</code>的<code>cmp</code>的一个重要的注意事项：<code>cmp(x,y)</code>与<code>cmp(y,x)</code>绝对不能返回一样。</p><p><del>不知道为什么写着突然就这样了</del><br><img src="https://cdn.luogu.com.cn/upload/image_hosting/dxxgh9pe.png" alt="CPU:?"></p><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>可以在自己定义的数据结构里重载运算符。<strong>尽量不要重载int等常用类型的运算符！！！</strong> 否则肯可能出现各种奇怪的错误，比如会把<code>for</code>的<code>&lt;</code>也重载了。</p><p>但是如果是自己的数据结构，可以在二分时重载运算符。这样二分的判断函数更加简单。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>一个二分搜索的简单模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">ll <span class="hljs-title">erfensousuo</span><span class="hljs-params">(T check,ll ok,ll ng)</span></span>&#123;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">abs</span>(ok-ng)&gt;<span class="hljs-number">1</span>)&#123;<br>ll x=(ok+ng)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(x))&#123;<br>ok=x;<br>&#125;<br><span class="hljs-keyword">else</span> ng=x;<br>&#125;<br><span class="hljs-keyword">return</span> ok;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="普通二分"><a href="#普通二分" class="headerlink" title="普通二分"></a>普通二分</h3><h4 id="T1-相交的区间"><a href="#T1-相交的区间" class="headerlink" title="T1 相交的区间"></a>T1 相交的区间</h4><p>给定一个区间，计算完全在这个区间左边的区间有多少个。</p><p>$x&#x3D;lower_bound(a+1,a+n+1,l_i)$</p><p>通过容斥原理排除大量的解，然后把L与R拆开。</p><h4 id="T2-超速检测"><a href="#T2-超速检测" class="headerlink" title="T2 超速检测"></a>T2 超速检测</h4><p>去年$\Huge CSP-S$的T2。</p><p>先算出每一辆车在那一段超速，再简单的<code>lower_bound</code>一下，判断区间内的第一个和最后一个测速仪。这样，就变成了昨天的区间选点问题。</p><p>保留最少的区间（每辆车的超速范围），使得每个区间（超度范围）都有点（测速仪）。</p><h3 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h3><h4 id="T3-项目计划"><a href="#T3-项目计划" class="headerlink" title="T3 项目计划"></a>T3 项目计划</h4><p>$a_i&gt;x$最多用$x$个人，$a_i\le x$最多用$a_i$个人。</p><p>判定性问题：$sum+&#x3D;min(a_i,x)$，$if(sum&gt;&#x3D;x\times k)$</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6w7v38nu.png" alt="部门人员解决方法"></p><p>上图的意思就是说如果项目弄着弄着没人了，那么只要让另一个人来替补就可以了。</p><p>假设有x个房间。一个部门如果有大于x个人，就拉x个人，否则全部拉来。不够的，就换一个部门，按顺序放进一个房间。这样，有的人都可以用上。</p><h4 id="T4-花束"><a href="#T4-花束" class="headerlink" title="T4 花束"></a>T4 花束</h4><p>可以做$P$个，$1\sim P$都可以。</p><p>约束条件：</p><ul><li>$m\times x+n\le R$</li><li>$m+n\times y\le B$</li><li>$0\le m$</li><li>$0\le n$</li><li>$n,m$为整数</li></ul><p>在这些条件下，$m+n&#x3D;K$是否成立。</p><p>把$m\times x+n\le R$写成$m(x-1)+(m+n)\le R$，所以$m\le(R-K)&#x2F;(x-1)$。</p><p>同理可得$n\le (B-K)&#x2F;(y-1)$。</p><p>于是，只要判断是否有$K\le\int{\frac{R-K}{x-1}}+\int{\frac{B-K}{y-1}}$。</p><h4 id="T5-平均数和中位数"><a href="#T5-平均数和中位数" class="headerlink" title="T5 平均数和中位数"></a>T5 平均数和中位数</h4><p>分数二分，所以这题要对精度很敏感。</p><p>这里要用<code>double</code>这个在<code>printf</code>输出时有一个注意点：<code>double</code>是<code>lf</code>，<code>long double</code>是<code>Lf</code>，是一个大写的区别。</p><p>分数在二分时，每次<code>check</code>就可以把答案缩小一半。多进行几次<code>check</code>，就可以把范围弄到很小。</p><h4 id="T6-扫地机器人"><a href="#T6-扫地机器人" class="headerlink" title="T6 扫地机器人"></a>T6 扫地机器人</h4><p>取一个非负整数$L$，判断花$L$秒能不能清理完所有垃圾。</p><p>其中，1、2类机器人的活动范围是固定的。所以问题变成3类机器人能不能在$L$秒内清理完剩余的垃圾。</p><p>这样。我们就可以想到加一个条件：不要让两个3类机器人迎面相遇。这样会浪费3类机器人的时间。</p><p>那么继续思考，就不难想到如果在其他类机器人清理完之后，如果还有其他垃圾的话，那么左边的垃圾都是他负责。否则就一个向右走。</p><h4 id="T7-种树"><a href="#T7-种树" class="headerlink" title="T7 种树"></a>T7 种树</h4><p>$\Huge 又是CSP真题$</p><p>代码有点长，还没搞明白，先不写</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.13总结</title>
    <link href="/2025/07/13/%E5%A4%8F%E4%BB%A4%E8%90%A57-13%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/13/%E5%A4%8F%E4%BB%A4%E8%90%A57-13%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天又模考了。</p><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p>$8:30\sim8:50做T1，AC$<br>$8:50\sim9:07做T2，AC$<br>$9:07\sim10:35思考T3-T4$<br>$10:35\sim11:00做T4，失败$<br>$11:00\sim12:00做T3，做了3次，22分$</p><h2 id="时间线详解"><a href="#时间线详解" class="headerlink" title="时间线详解"></a>时间线详解</h2><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><p>考试的时候想着两层<code>for</code>里面嵌套两个<code>for</code>，但是复杂度直接起飞，TLE67。</p><p>第二次尝试从嵌套两个变成一个，但是还是TLR67。</p><p>最后，用了两个$O(n\times m)$复杂度的<code>for</code>，竟然过了。</p><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><p>这题是个找规律，发现了规律：行或列，会有一个在正负1之间有一个完全平方数，行和列分别时奇数的和偶数的。</p><p>找到这个规律之后，就可以直接根据规律写了，时间复杂度时$O(t)$。</p><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><p>这题用dp</p><p>状态定义：$f[i][j][k]:从前i个问题里选j个，所选问题的优美度之和不小于k，所选总满意度的最大值$</p><p>$如果无法做到。令$f[i][j][k]&#x3D;-inf$</p><p>$0\le i\le N$<br>$0\le j\le i$<br>$0\le k\le K$</p><h4 id="递推式"><a href="#递推式" class="headerlink" title="递推式"></a>递推式</h4><p>考虑第$i$个问题选或不选。</p><ul><li>选：$f[i-1][j-1][max(0,k-b_i)]+A_i$</li><li>不选：$f[i-1][j][k]&#x3D;1$</li></ul><p>$$<br>f[i][j][k]&#x3D;max(f[i-1][j-1][max(0,k-b_i)]+A_i,f[i-1][j][k]&#x3D;1)<br>$$</p><p>子问题数量$O(N\times D\times K)$</p><p>内存：$1.25\times 10^8\times 8B&#x3D;爆炸，超256MiB$</p><h4 id="节约空间"><a href="#节约空间" class="headerlink" title="节约空间"></a>节约空间</h4><p>$f[i][0][0]&#x3D;0,0\le i\le N$</p><p>01背包的省空间写法：滚动数组</p><p>我们注意到有一个维度是只用一次的（你说一次性也行），就只要从前往后枚举，就可以节省空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">long</span> <span class="hljs-type">long</span> f[maxn][maxn];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-built_in">min</span>(i,d);j&gt;=<span class="hljs-number">1</span>;k++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=K【大写！】;k++)<br>            f[j][k]=<span class="hljs-built_in">max</span>(f[j<span class="hljs-number">-1</span>][<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,k-b[i])]+a[i],f[j][k]);<br></code></pre></td></tr></table></figure><p>这里$1\le i\le N,1\le j$</p><h3 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h3><p>考试的时候没有想通这个逻辑。</p><p>就是如果一个人出现了两次超过同一个人，就不可能在同一圈，因为其他人都是不能后退的。</p><p>如果想通了这个逻辑，就很简单了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n,q;<br>cin&gt;&gt;n&gt;&gt;q;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">overmake</span><span class="hljs-params">(n,<span class="hljs-number">-1</span>)</span></span>;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> last=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>    <span class="hljs-type">int</span> x;<br>    cin&gt;&gt;x;<br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(overmake[x]&gt;=last)&#123;<br>            ans++;<br>            last=i;<br>        &#125;<br>        overmake[x]=i;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        overmake[-x]=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br>cout&lt;&lt;ans;<br></code></pre></td></tr></table></figure><h1 id="Huge-the-end"><a href="#Huge-the-end" class="headerlink" title="$\Huge the \  end$"></a>$\Huge the \  end$</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7-12贪心学习笔记&amp;总结</title>
    <link href="/2025/07/12/%E5%A4%8F%E4%BB%A4%E8%90%A57-12%E8%B4%AA%E5%BF%83%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0&amp;%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/12/%E5%A4%8F%E4%BB%A4%E8%90%A57-12%E8%B4%AA%E5%BF%83%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0&amp;%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><p>贪心就是在当前条件下的最优解。与DP不同，贪心是保证在当前条件下的最优解。</p><h2 id="正常贪心"><a href="#正常贪心" class="headerlink" title="正常贪心"></a>正常贪心</h2><p>（我只能用这几个字来和区间区别了）</p><h3 id="T1-摩天轮"><a href="#T1-摩天轮" class="headerlink" title="T1 摩天轮"></a>T1 摩天轮</h3><p>思路：最大的应该最重与最轻的匹配。如果如果和另一个人匹配，会浪费一些重量。</p><p>让凑对的人最多（让座舱最满）</p><p>证明正确：假设不是最优，尝试使用不是这个的方法。看看有没有反例。</p><p>要从“第一步怎么走”入手。</p><h3 id="T2-萨鲁曼的部队"><a href="#T2-萨鲁曼的部队" class="headerlink" title="T2 萨鲁曼的部队"></a>T2 萨鲁曼的部队</h3><p>直到要不能满足了再去考虑这个点。</p><p>在$[x,x+r]$中找一个点，打一个标记。</p><h3 id="T3-小木棍"><a href="#T3-小木棍" class="headerlink" title="T3 小木棍"></a>T3 小木棍</h3><p><del>出了原题错题不可做题</del>而且<strong>CSP-J2024也是T3</strong></p><p>8用的木棍最多，所以先全选8，位数最小。</p><p>在确定了$n-1$位以后，最高位就确定了。</p><p>优先让前几位小。总共x位,$x&#x3D;(\frac{n}{7})向上取整$。</p><p>按照$\frac{n}{7}$的余数分类讨</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/pv2fo23n.png" alt="这题分类讨论的类别"></p><ol><li>位数最少</li><li>从高往低尽量小。</li></ol><h2 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h2><p>就一句：<br>$$<br>全是\huge经典\Huge模板\times N<br>$$</p><h3 id="区间安排问题"><a href="#区间安排问题" class="headerlink" title="区间安排问题"></a>区间安排问题</h3><p>按照左端点排序是考虑这样的情况：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ob5cnv2q.png" alt="按照左端点排序的问题"></p><p>考虑逐步开放所有可放的区间，当有区间可以进入时，就进入。相当于找对最后影响最小的区间。即按照右端点排序。</p><h3 id="区间选点问题"><a href="#区间选点问题" class="headerlink" title="区间选点问题"></a>区间选点问题</h3><p>没有例题先不写</p><h3 id="区间覆盖问题1"><a href="#区间覆盖问题1" class="headerlink" title="区间覆盖问题1"></a>区间覆盖问题1</h3><p>问题：数轴上有$n$个区间$[L_i,R_i]$，从中选取尽量少的区间覆盖$[x,y]$。</p><p>$L$从小到大，$R$从大到小</p><h3 id="区间覆盖问题1-2"><a href="#区间覆盖问题1-2" class="headerlink" title="区间覆盖问题1.2"></a>区间覆盖问题1.2</h3><p>问题：数轴上有$n$个区间$[L_i,R_i]$，从中选取尽量少的区间覆盖$[x,y]$。区别是这个问题是时段。所以$x&#x3D;r+1$</p><h3 id="区间覆盖问题2"><a href="#区间覆盖问题2" class="headerlink" title="区间覆盖问题2"></a>区间覆盖问题2</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/fru31xsk.png" alt="区间覆盖问题2"></p><h3 id="一般的点和区间配对问题"><a href="#一般的点和区间配对问题" class="headerlink" title="一般的点和区间配对问题"></a>一般的点和区间配对问题</h3><p>点和区间配对：</p><p>所有能和这个点配对的区间中，要选取R的最小值，且能覆盖这个点。因为R大的区间有可能覆盖下一个点。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/t7p1zn0o.png"></p><h4 id="T7-带区间限制的装箱问题"><a href="#T7-带区间限制的装箱问题" class="headerlink" title="T7 带区间限制的装箱问题"></a>T7 带区间限制的装箱问题</h4><p>这题中，可以把盒子当成上一题的点，球当成上一题的区间。</p><p>区别是，这里有$10^9$个点，不能逐个枚举，要忽略无用的点。</p><h4 id="T8-代金券"><a href="#T8-代金券" class="headerlink" title="T8 代金券"></a>T8 代金券</h4><p>$[L_i,1^{9}]（正无穷）$</p><p>经典错误：</p><ul><li>$D_i越大越先用$</li><li>$L_i越小越先用$</li></ul><p>原则：</p><ul><li>优先使用优惠大的代金券</li><li>多用代金券</li></ul><h3 id="区间分组问题"><a href="#区间分组问题" class="headerlink" title="区间分组问题"></a>区间分组问题</h3><h4 id="T9-牛栏预定（区间分组问题）"><a href="#T9-牛栏预定（区间分组问题）" class="headerlink" title="T9 牛栏预定（区间分组问题）"></a>T9 牛栏预定（区间分组问题）</h4><p>把区间分组，每一组的区间两两不相交。</p><p>R从往大。L从小往大。</p><ol><li>取L的最小区间$[L_1,R_1]$</li><li><code>upper_bound</code> $L_2&gt;R_1$</li><li>……，得到1组。</li></ol><h4 id="T10-CSP2021-S-1-廊桥分配"><a href="#T10-CSP2021-S-1-廊桥分配" class="headerlink" title="T10 CSP2021-S-1-廊桥分配"></a>T10 CSP2021-S-1-廊桥分配</h4><p>这道题的一个关键就是你无法调整飞机靠不靠廊桥，只能控制放几个在国内或国际。飞机是有位置就靠上去，没位置就停在远机位。</p><p>对国内区，国际区其实是一样的。</p><p>$计算出停靠在国内区i廊桥上的飞机数量C_{1,i}，国际区i号廊桥上的数量C_{2,i}。$</p><p>$计算出C_1和c_2的前缀和序列S_1和S_2。$</p><p>答案是$max_{0\le i\le n}(s_{1,i}+s_{2,i})$</p><h2 id="带反悔的贪心"><a href="#带反悔的贪心" class="headerlink" title="带反悔的贪心"></a>带反悔的贪心</h2><h3 id="T13-股票"><a href="#T13-股票" class="headerlink" title="T13 股票"></a>T13 股票</h3><p>这题其实有多种解法，这里选择反悔的贪心。</p><p>在第$i$天，如果有价值低于$P_i$的股票，就把最便宜的一股买下，但是保留<strong>反悔</strong>的选项，可以撤消这个行为。</p><h3 id="T14-奶牛优惠券"><a href="#T14-奶牛优惠券" class="headerlink" title="T14 奶牛优惠券"></a>T14 奶牛优惠券</h3><p>$先买C_i前K小的牛。如果还有钱，以后每次买剩余中的min(C_i+Δ_K,P_i)最小的牛。其中，Δ_K代表了最小优惠。$</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>笔记</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>笔记</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.11总结</title>
    <link href="/2025/07/11/%E5%A4%8F%E4%BB%A4%E8%90%A57-11%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/11/%E5%A4%8F%E4%BB%A4%E8%90%A57-11%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天第一次模考，写一篇总结。</p><h1 id="7-11模考总结"><a href="#7-11模考总结" class="headerlink" title="7.11模考总结"></a>7.11模考总结</h1><h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><p><del>（记不清了，都是似乎）</del><br>$8:30\sim8:40$看题目<br>$8:40\sim8:55$写T1<br>$8:55\sim9:15$写T2<br>$9:00\sim9:30$优化T2，并失败<br>$9:30\sim9:40$想T3<br>$9:40\sim10:00$写T4暴力<br>$10:00\sim11:00$又写T2<br>$11:00\sim12:00$检查<br><strong>得分情况：</strong></p><table><thead><tr><th>题目</th><th>1.小信分糖果</th><th>2.派发礼物</th><th>3.小信打分</th><th>4.小信的生产线</th></tr></thead><tbody><tr><td>得分</td><td>TLE+WA+AC10tps</td><td>TLE+AC+WA50tps</td><td>WA0tps</td><td>MLE+RE+WA+AC0tps</td></tr></tbody></table><h2 id="错题-错因"><a href="#错题-错因" class="headerlink" title="错题&amp;错因"></a>错题&amp;错因</h2><h3 id="小信分糖果"><a href="#小信分糖果" class="headerlink" title="小信分糖果"></a>小信分糖果</h3><p>在考试的时候没想到把小的赋值为大的，写成了把最大的设成最小的。</p><p>改了就$\Huge AC$了。</p><h3 id="小信的生产线"><a href="#小信的生产线" class="headerlink" title="小信的生产线"></a>小信的生产线</h3><p>在考试的时候想用模拟的方法过，但是遇到了<code>bool</code>数组太大的问题，就一直专注于解决这个问题了，就没有留足够的时间思考其他解放。</p><p>正解就是通过区间来维护商品可以到达的位置。当两个生产线之间有机械臂时就并集。这里原本应该考虑到多个机械臂在同一位置的情况，但是因为这个数据的缘故，所以不用判断也可以通过。</p><h3 id="派发礼物"><a href="#派发礼物" class="headerlink" title="派发礼物"></a>派发礼物</h3><p>想的是用DP，状态转移方程：<br>$$<br>dp[i][k]&#x3D;\min_{j&lt;i}(dp[j][k-1]+\text{cost}(j+1..i))<br>$$<br>$\Huge But$<del>显然</del>拿不了满分。</p><p>正解<del>还</del>是用DP，但是状态转移方程不一样。</p><p>状态定义：<br><em>定义<code>dp[i][k]</code>表示前 i个礼物使用 k天分发的最小惩罚。</em></p><p>枚举前j个礼物用k-1天发，剩下j+1到i个第k天发。</p><h1 id="Huge-The-end"><a href="#Huge-The-end" class="headerlink" title="$\Huge The\ end$"></a>$\Huge The\ end$</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：B4223 [常州市赛 2024] 早起的鸟儿有虫吃</title>
    <link href="/2025/07/11/B4223%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/11/B4223%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/qfhcn7tr">洛谷同文链接</a></p><h1 id="题解：B4223-常州市赛-2024-早起的鸟儿有虫吃"><a href="#题解：B4223-常州市赛-2024-早起的鸟儿有虫吃" class="headerlink" title="题解：B4223 [常州市赛 2024] 早起的鸟儿有虫吃"></a>题解：B4223 [常州市赛 2024] 早起的鸟儿有虫吃</h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个函数求解</title>
    <link href="/2025/07/10/%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E6%B1%82%E8%A7%A3/"/>
    <url>/2025/07/10/%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E6%B1%82%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>有一个人才写了一个方程：<br>$$<br>(\frac{1+2\times\sqrt{2}+x}{2})\times(\frac{1+2\times\sqrt{2}+x}{2}-1)\times(\frac{1+2\times\sqrt{2}+x}{2}-2\times\sqrt{2})\times(\frac{1+2\times\sqrt{2}+x}{2}-x)&#x3D;6\times\sqrt{2}<br>$$<br>让我们求解。</p><p>这能忍？</p><p>开解！</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>显然，<del>直接解是不可能的</del>，所以要<del>借助科技的力量</del>，就是转化为一个函数，找这个函数与 x 轴的交点，即 y&#x3D;0 的位置。</p><p>转化为函数之后长这样：<br>$$<br>y&#x3D;(\frac{1+2\times\sqrt{2}+x}{2})\times(\frac{1+2\times\sqrt{2}+x}{2}-1)\times(\frac{1+2\times\sqrt{2}+x}{2}-2\times\sqrt{2})\times(\frac{1+2\times\sqrt{2}+x}{2}-x)-6\times\sqrt{2}<br>$$</p><h2 id="带入！"><a href="#带入！" class="headerlink" title="带入！"></a>带入！</h2><div class="note note-success">            <p>（奇怪的是，函数图像的网站竟然支持直接$\LaTeX$写函数）</p>          </div><p>奇迹出现了！！！！！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/imj19x9j.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/w6wl7a3c.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/xn8x2o8n.png"></div><div class="group-image-wrap"><img src="https://cdn.luogu.com.cn/upload/image_hosting/17opvwhw.png"></div></div></div><p>$\Huge这个方程竟然无解$</p><p>原帖：<a href="https://discourse.xinyoudui.com/t/topic/39622">这里</a><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="这个原帖还是我的，只是搬运了而已">[1]</span></a></sup></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>这个原帖还是我的，只是搬运了而已<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P12592题解</title>
    <link href="/2025/07/10/P12592%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/10/P12592%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/1ebywmac">洛谷同文链接</a></p><h1 id="P12592-重生有惊喜-题解"><a href="#P12592-重生有惊喜-题解" class="headerlink" title="P12592 重生有惊喜 题解"></a>P12592 重生有惊喜 题解</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个字符串，你可以任意次交换任意两个字符，问能否通过这些操作让字符串变成<strong>回文串</strong>。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为可以任意次交换字符，这就意味着我们可以重新排列字符顺序。</p><p>要判断是否能构成回文串，只需要判断字符出现的频次是否满足回文的结构要求。</p><h3 id="回文的字符判断方法"><a href="#回文的字符判断方法" class="headerlink" title="回文的字符判断方法"></a>回文的字符判断方法</h3><ul><li>若字符串长度是<strong>偶数</strong>：所有字符必须出现<strong>偶数次</strong>。</li><li>若字符串长度是<strong>奇数</strong>：<strong>最多只有一个字符</strong>可以出现<strong>奇数次</strong>，其余字符必须出现偶数次。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>我们只需统计每个字符出现的次数，判断有多少个字符出现了奇数次即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br>T = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(T):<br>    s = <span class="hljs-built_in">input</span>()<br>    a = Counter(s)<br>    b = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> a.values() <span class="hljs-keyword">if</span> c % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> b &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B4206题解</title>
    <link href="/2025/07/10/B4206%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/10/B4206%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/eygmqzi7">洛谷同文链接</a></p><h1 id="B4206-常州市程序设计小能手-2021-数字翻转"><a href="#B4206-常州市程序设计小能手-2021-数字翻转" class="headerlink" title="B4206 [常州市程序设计小能手 2021] 数字翻转"></a>B4206 [常州市程序设计小能手 2021] 数字翻转</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p><del>首先考虑打表</del>，看一眼数据范围，$10^{14}$，啥都不用想，就算你打出了数组代码也一定会太长。</p><p>那么，我们就可以写一个函数，遍历 $L$ 到 $R$ 之间的数，检查，如果是，就增加答案数。</p><p>70 分的超时代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> change[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-comment">//#define int unsigned long long</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">daozhi</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)&#123;<br>ans+=x%<span class="hljs-number">10</span>;<br>x/=<span class="hljs-number">10</span>;<br>ans*=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans/<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">weishu</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)&#123;<br>ans++;<br>x/=<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function">string <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>x=<span class="hljs-built_in">daozhi</span>(x);<br><span class="hljs-type">int</span> n=<span class="hljs-built_in">weishu</span>(x);<br>string ans=<span class="hljs-built_in">to_string</span>(x);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>ans[i]=change[ans[i]-<span class="hljs-string">&#x27;0&#x27;</span>]+<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin&gt;&gt;T;<br><span class="hljs-keyword">while</span>(T--)&#123;<br><span class="hljs-type">int</span> l,r;<br>cin&gt;&gt;l&gt;&gt;r;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(i)==<span class="hljs-built_in">to_string</span>(i))&#123;<br>ans++;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans&lt;&lt;endl;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><p>可以看到，在 70 分代码中，数字在翻转时调用了很多的函数，导致时间复杂度爆炸。我们可以优化这个翻转的过程。</p><h4 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h4><p>首先看到翻转数字的部分。我把两部分分开了，但是可以把两部分合到一起。</p><p>再看到检查函数部分。我的写法是每一位先翻转再把翻转后的结果返回并比较两个结果的关系。但是其实可以一边剥离每一位，另一边检查这一位翻转后是否有意义，并合成回原数字。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll q,r,l,a[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)&#123;<br>        cin&gt;&gt;l&gt;&gt;r;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=l;j&lt;=r;j++)&#123;<br>            <span class="hljs-type">bool</span> vis=<span class="hljs-literal">true</span>;<br>            <span class="hljs-type">int</span> t=j,f=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(t)&#123;<br>                <span class="hljs-keyword">if</span>(a[t%<span class="hljs-number">10</span>]==<span class="hljs-number">-1</span>)&#123;<br>                    vis=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                f=f*<span class="hljs-number">10</span>+a[t%<span class="hljs-number">10</span>];<br>                t/=<span class="hljs-number">10</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(f==j&amp;&amp;vis==<span class="hljs-number">1</span>)&#123;<br>                cnt++;<br>            &#125;<br>        &#125;<br>        cout&lt;&lt;cnt&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/record/216743302">通过记录</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B4219题解</title>
    <link href="/2025/07/10/B4219%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/10/B4219%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/66rctor1">洛谷同文链接</a></p><h1 id="B4219-常州市程序设计小能手-2023-数学作业-题解"><a href="#B4219-常州市程序设计小能手-2023-数学作业-题解" class="headerlink" title="B4219 [常州市程序设计小能手 2023] 数学作业 题解"></a>B4219 [常州市程序设计小能手 2023] 数学作业 题解</h1><h4 id="题目传送门"><a href="#题目传送门" class="headerlink" title="题目传送门"></a><a href="https://www.luogu.com.cn/problem/B4219">题目传送门</a></h4><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先输入 $n$，将小于等于 $n$ 的所有斐波那契数提前初始化好，存在数组中。也可以提前用打表处理好。然后用 DFS 对于每一个斐波那契数进行选或不选的搜索即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> sum)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(sum+a[i]==n)&#123;<br>        ans++;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">+1</span>,sum);<br>    <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">+1</span>,sum+a[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，观察一下数据范围：数据范围是 $n\le10^{12}$，而小于等于 $10^{12}$ 的斐波那契数共有大约 $58$ 个，但是我们的算法复杂度为 $O(2^n)$，显然直接就 TLE 了。</p><p>于是我们就得想一个优化方法。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="使用前缀和优化"><a href="#使用前缀和优化" class="headerlink" title="使用前缀和优化"></a>使用前缀和优化</h3><p>我们可以创建前缀和数组 $h$ 使 $h_i$ 表示数列 $f$ 从 $f_0$ 到 $f_{i-1}$的和，若当前选择的斐波那契数和 $s$ 加上后面所有斐波那契数的和还是小于 $n$，则直接退出搜索。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">  <span class="hljs-keyword">if</span>(i&gt;=m)&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<span class="hljs-comment">//我这里是模拟递归</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">int</span> i;<br>ll s;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ll n;<br>cin&gt;&gt;n;<br>vector&lt;ll&gt; fib;<br><span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">1</span>)&#123;<br>fib.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">2</span>)&#123;<br>fib.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>ll a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>ll c=a+b;<br><span class="hljs-keyword">if</span>(c&gt;n) <span class="hljs-keyword">break</span>;<br>fib.<span class="hljs-built_in">push_back</span>(c);<span class="hljs-comment">//计算数列</span><br>a=b;<br>b=c;<br>&#125;<br>&#125;<br><span class="hljs-built_in">reverse</span>(fib.<span class="hljs-built_in">begin</span>(),fib.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//反转数列</span><br><br><span class="hljs-type">int</span> m=fib.<span class="hljs-built_in">size</span>();<br><br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//特判</span><br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) cout&lt;&lt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">vector&lt;ll&gt; <span class="hljs-title">prefix</span><span class="hljs-params">(m<span class="hljs-number">+1</span>,<span class="hljs-number">0</span>)</span></span>;<span class="hljs-comment">//前缀和数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>prefix[i]=fib[i]+prefix[i<span class="hljs-number">+1</span>];<span class="hljs-comment">//计算前缀和</span><br>&#125;<br><br>stack&lt;node&gt; st;<br><br>st.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,n&#125;);<span class="hljs-comment">//初始化栈</span><br><br>ll ans=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>node temp=st.<span class="hljs-built_in">top</span>();<br>st.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> i=temp.i;<br>ll s=temp.s;<br><br><span class="hljs-keyword">if</span>(s==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果s=0，答案+1</span><br>ans++;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(i&gt;=m)&#123;<span class="hljs-comment">//如果i&gt;=m，跳过</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(fib[i]&gt;s)&#123;<span class="hljs-comment">//如果当前数大于s，将当前数入栈</span><br>st.<span class="hljs-built_in">push</span>(&#123;i<span class="hljs-number">+1</span>,s&#125;);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>((i<span class="hljs-number">+1</span>&lt;m)?prefix[i<span class="hljs-number">+1</span>]&lt;s:<span class="hljs-number">0</span>&lt;s)&#123;<span class="hljs-comment">//如果当前数小于s，将当前数入栈，将当前数的下一个数入栈</span><br>st.<span class="hljs-built_in">push</span>(&#123;i<span class="hljs-number">+1</span>,s-fib[i]&#125;);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果当前数小于s，将当前数入栈，将当前数的下一个数入栈</span><br>st.<span class="hljs-built_in">push</span>(&#123;i<span class="hljs-number">+1</span>,s&#125;);<br>st.<span class="hljs-built_in">push</span>(&#123;i<span class="hljs-number">+2</span>,s-fib[i]&#125;);<br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P3843 [TJOI2007] 迷路 题解</title>
    <link href="/2025/07/10/P3843%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/07/10/P3843%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/unhlmhyr">洛谷同文链接</a></p><h1 id="P3843-TJOI2007-迷路-题解"><a href="#P3843-TJOI2007-迷路-题解" class="headerlink" title="P3843 [TJOI2007] 迷路 题解"></a>P3843 [TJOI2007] 迷路 题解</h1><p><a href="https://www.luogu.com.cn/problem/P3843">题目传送门</a></p><h2 id="14-分错因："><a href="#14-分错因：" class="headerlink" title="14 分错因："></a>14 分错因：</h2><p>有很大可能是看错了题， $d$ 是每个任务总共要走的路程，而两个人每秒只能走一个单位。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为小 A 和小 B 的运动轨迹是周期性的，会循环，因此我们只需要 $\gcd$ 一下，求出最小公倍数，然后暴力枚举，用两点之间距离公式来计算所有时刻的距离，最后取 $\min$ 并输出就可以了。</p><p>两点距离公式：<br>$\sqrt{(x_1−x_2)×(x_1−x_2)+(y_1−y_2)×(y_1−y_2)}$。</p><p>剩下问题见于代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>?a:<span class="hljs-built_in">gcd</span>(b,a%b);<span class="hljs-comment">//求最大公约数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lcm</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a/<span class="hljs-built_in">gcd</span>(a,b)*b;<span class="hljs-comment">//调用gcd，求最小公倍数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">path_read</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;x_coords,vector&lt;<span class="hljs-type">int</span>&gt;&amp;y_coords)</span></span>&#123;<span class="hljs-comment">//读取轨道坐标</span><br>    <span class="hljs-type">int</span> sx,sy,m;<br>    cin&gt;&gt;sx&gt;&gt;sy&gt;&gt;m;<span class="hljs-comment">//起始点坐标，指令条数</span><br>    x_coords.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空坐标</span><br>    y_coords.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-type">int</span> current_x=sx;<br>    <span class="hljs-type">int</span> current_y=sy;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)&#123;<span class="hljs-comment">//m条指令</span><br>        <span class="hljs-type">int</span> d;<br>        <span class="hljs-type">char</span> c;<br>        cin&gt;&gt;d&gt;&gt;c;<br>        <span class="hljs-type">int</span> s=<span class="hljs-built_in">abs</span>(d);<br>        <span class="hljs-type">int</span> dir_x=<span class="hljs-number">0</span>,dir_y=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>            dir_x=d&gt;<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>; <br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            dir_y=d&gt;<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>; <br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;s;++j)&#123;<span class="hljs-comment">//s步</span><br>            current_x+=dir_x;<br>            current_y+=dir_y;<br>            x_coords.<span class="hljs-built_in">push_back</span>(current_x);<span class="hljs-comment">//将坐标存入</span><br>            y_coords.<span class="hljs-built_in">push_back</span>(current_y);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;a_x,a_y,b_x,b_y;<br>    <span class="hljs-built_in">path_read</span>(a_x,a_y);<span class="hljs-comment">//读取小A的轨道</span><br>    <span class="hljs-built_in">path_read</span>(b_x,b_y);<span class="hljs-comment">//读取小B的轨道</span><br><br>    <span class="hljs-type">int</span> ta=a_x.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//小A的轨道长度</span><br>    <span class="hljs-type">int</span> tb=b_x.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//小B的轨道长度</span><br><br>    <span class="hljs-keyword">if</span>(ta==<span class="hljs-number">0</span>||tb==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//特判，如果轨道长度为0，直接输出0.00</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0.00\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> L=<span class="hljs-built_in">lcm</span>(ta,tb);<span class="hljs-comment">//计算最小公倍数</span><br>    <span class="hljs-type">double</span> min_dist=<span class="hljs-number">1e18</span>;<span class="hljs-comment">//初始化最小距离为1e18</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;t&lt;L;++t)&#123;<span class="hljs-comment">//枚举每个时刻</span><br>        <span class="hljs-type">int</span> a_idx=t%ta;<span class="hljs-comment">//小A的当前位置</span><br>        <span class="hljs-type">int</span> b_idx=t%tb;<span class="hljs-comment">//小B的当前位置</span><br><span class="hljs-type">int</span> dx=a_x[a_idx]-b_x[b_idx];<span class="hljs-comment">//下一个x坐标</span><br>        <span class="hljs-type">int</span> dy=a_y[a_idx]-b_y[b_idx];<span class="hljs-comment">//下一个y坐标</span><br>        <span class="hljs-type">double</span> dist=<span class="hljs-built_in">sqrt</span>(dx*dx+dy*dy);<span class="hljs-comment">//计算距离</span><br>        min_dist=<span class="hljs-built_in">min</span>(min_dist,dist);<span class="hljs-comment">//更新最小距离</span><br>    &#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>,min_dist);<span class="hljs-comment">//输出最小距离，保留两位小数，没得说</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//完美结束</span><br>&#125;<br></code></pre></td></tr></table></figure><p>完美结束。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>夏令营7.10总结</title>
    <link href="/2025/07/10/%E5%A4%8F%E4%BB%A4%E8%90%A57-10%E6%80%BB%E7%BB%93/"/>
    <url>/2025/07/10/%E5%A4%8F%E4%BB%A4%E8%90%A57-10%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今天是夏令营的第一天</p><h2 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h2><p>学习了枚举，就是一种<em>优雅的暴力</em></p><p>开始做题~</p><h3 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>题意为给定一个 N，求满足 $A\le B \le C$ 且 $A\times B\times C\le N$ 的整数 $a,b,c$ 的数量。</p><p>数据范围是</p><ul><li>$1\le N\le 10^{11}$，要用 <code>long long</code>。</li><li>答案 $\le 2^{63}$，也要用 <code>long long</code>。</li></ul><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>枚举 AB，计算 C 的可能个数。</p><p>使用双重循环，第一层枚举 $A^3$，第二层枚举 $A\times B^2$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;a*a*a&lt;=n;a++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b=a;a*b*b&lt;=n;b++)&#123;<br><span class="hljs-type">int</span> c=n/(a*b);<br><span class="hljs-keyword">if</span>(c&lt;b) <span class="hljs-keyword">continue</span>;<br>ans+=c-b<span class="hljs-number">+1</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>求大于 X 的一个十进制数 N，使得 N 的全部位数按位数排序后为等差数列。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>是长度为 L 的，各项为 0 到 9 的，首项不是 9 的等差数列。</p><p>数列由首项与公差决定。</p><ul><li>首项: 1,2,…,9</li><li>公差: -9,-8,…,9</li></ul><p>直接枚举，枚举量小于 200。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> x;<br>cin&gt;&gt;x;<br><span class="hljs-type">int</span> ans=x*<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> len=<span class="hljs-built_in">to_string</span>(x).<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;a&lt;=<span class="hljs-number">9</span>;a++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d=<span class="hljs-number">-9</span>;d&lt;=<span class="hljs-number">9</span>;d++)&#123;<br><span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br><span class="hljs-type">int</span> t=a+d*i;<br><span class="hljs-keyword">if</span>(t&lt;<span class="hljs-number">0</span>||t&gt;<span class="hljs-number">9</span>) <span class="hljs-keyword">break</span>;<br>sum=sum*<span class="hljs-number">10</span>+t;<br>&#125;<br><span class="hljs-keyword">if</span>(sum&gt;=x)&#123;<br>ans=<span class="hljs-built_in">min</span>(ans,sum);<br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定正整数 N 和 M，找到最小正整数 X，使得 X 可以表示为 a，b 两个整数的乘积且 $1\le a,b\le N$（a，b 可以相同）且 $M\le X$。</p><p>数据范围：</p><ul><li>$1\le N\le 10^{12}$</li><li>$1\le N\le 10^{18}$</li></ul><h5 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h5><p>找到 a,b 满足：</p><ul><li>$1\le a,b\le N$</li><li>$m\le a\times b$</li></ul><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>枚举 a，从 1 到 $min(N,\sqrt{M})$</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;a&lt;=n;a++)&#123;<br><span class="hljs-type">int</span> b=(m+(a<span class="hljs-number">-1</span>))/a;<br><span class="hljs-keyword">if</span>(b&lt;=n)&#123;<br><span class="hljs-keyword">if</span>(ans==<span class="hljs-number">-1</span>||ans&gt;a*b)&#123;<br>ans=a*b;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a*a&gt;=m)&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h2><p>睡觉………………</p><h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2><p><del><strong>题目逐渐变得难了起来…</strong></del></p><h3 id="T4（随堂练习）"><a href="#T4（随堂练习）" class="headerlink" title="T4（随堂练习）"></a>T4（随堂练习）</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>有三种物品，是易拉罐，普通罐头和开罐器。易拉罐可以获得 x 点体力，普通罐头要消耗开罐器的一点耐久，获得 x 点体力，开罐器可以开罐 x 次。从 N 个中拿走 N 个，求最大可以获取的体力值。</p><p>数据范围：</p><ul><li>$1\le M\le N\le2\times10^5$</li><li>$1\le x_i\le10^9$</li></ul><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><ul><li>无论是什么东西，都优先拿 x 更大的。</li><li>如果要拿普通罐头，则一定要打开。打不开的干脆不拿。</li><li>由拿的普通罐头数量决定开罐器的数量。尽量不要多拿。</li><li>其实也可以那小于 m 个物品，效果一样。</li></ul><h4 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h4><ol><li>把物品分类后按 x 的大小排序</li><li>计算每种物品的前缀和数组</li><li>枚举拿几个普通罐头，几个开罐器，几个易拉罐头。</li></ol><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br>vector&lt;<span class="hljs-type">int</span>&gt; X[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-type">int</span> t,x;<br>cin&gt;&gt;t&gt;&gt;x;<br>X[t].<span class="hljs-built_in">push_back</span>(x);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-built_in">sort</span>(X[i].<span class="hljs-built_in">rbegin</span>(),X[i].<span class="hljs-built_in">rend</span>());<br>&#125;<br>vector&lt;ll&gt; sum[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>sum[i].<span class="hljs-built_in">resize</span>(X[i].<span class="hljs-built_in">size</span>()<span class="hljs-number">+1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;X[i].<span class="hljs-built_in">size</span>();j++)&#123;<br>sum[i][j<span class="hljs-number">+1</span>]=sum[i][j]+X[i][j];<br>&#125;<br>&#125;<br>ll ans=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=(<span class="hljs-type">int</span>)X[<span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>();i++)&#123;<br><span class="hljs-keyword">if</span>(i&gt;m) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(sum[<span class="hljs-number">2</span>][j]&lt;i) j++;<br><span class="hljs-keyword">if</span>(j&gt;(<span class="hljs-type">int</span>)X[<span class="hljs-number">2</span>].<span class="hljs-built_in">size</span>()||i+j&gt;m) <span class="hljs-keyword">break</span>;<br><span class="hljs-type">int</span> k=<span class="hljs-built_in">min</span>(m-i-j,(<span class="hljs-type">int</span>)X[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>());<br>ans=<span class="hljs-built_in">max</span>(ans,sum[<span class="hljs-number">0</span>][k]+sum[<span class="hljs-number">1</span>][i]);<br>&#125;<br>cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>夏令营</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用hexo-fluid与常用操作</title>
    <link href="/2025/07/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo-fluid%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/07/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo-fluid%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-warning">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-info">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-danger">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-info">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-primary">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你创建VmWare Workstation17虚拟机</title>
    <link href="/2025/06/29/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAVmWare-Workstation17%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2025/06/29/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%88%9B%E5%BB%BAVmWare-Workstation17%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p><del>众所周知</del>，VmWare Workstation 是一款十分好的虚拟机软件，而 VmWare Workstation 17，则更好了：相比于之前的版本，它支持个人使用，无需破解即可使用。</p><p><a href="https://pan.quark.cn/s/fb7ca018d7a8">下载链接（无限有效）</a></p><h2 id="安装-VmWare-17"><a href="#安装-VmWare-17" class="headerlink" title="安装 VmWare 17"></a>安装 VmWare 17</h2><p>下载完之后直接按照正常的安装方法安装就可以了。这里需要注意，到了许可证那一步的时候，要选择<strong>个人使用</strong>，这样就不用输入许可证号了。</p><p>安装完成后，你应该看到这样一个界面。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/buf7n7z6.png" alt="vmware主界面"></p><h2 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h2><h3 id="下载下载工具"><a href="#下载下载工具" class="headerlink" title="下载下载工具"></a>下载下载工具</h3><p>这里以 windows10 为例，其他系统请自行寻找：<br>前往<a href="https://www.microsoft.com/zh-cn/software-download/windows10">这里</a>，下载镜像下载器。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="也可以直接下载镜像，（iso文件），在windows官网，这里不做详细介绍。">[1]</span></a></sup></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qqqvx7fp.png" alt="镜像下载器下载页面"></p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>打开下载器。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/n1csvw6x.png" alt="镜像下载器"></p><p>等待准备完成。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/je2gtl4d.png" alt="镜像下载器"></p><p>点击接受。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/3zefi8d4.png" alt="点击接受按钮"></p><p><del>又</del>等待准备完成。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/je2gtl4d.png" alt="镜像下载器"></p><p>点击<strong>为另一台电脑创建安装介质</strong>选项。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/u0mdv60r.png" alt="为另一台电脑创建安装介质后点击下一步"></p><p>自行选择系统信息，注意要先取消勾选下面的那个。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qsxz7ske.png" alt="选择系统类型"></p><p>将介质改为 ISO 文件。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xniz7yc9.png" alt="镜像下载器"></p><p>选择保存路径，建议在 D 盘专门建一个虚拟机文件夹，并创建子目录专门用于存放各种系统的 ISO 镜像文件。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xqq9f9ks.png" alt="选择保存路径"></p><p>又叕叕叕叕叕等待。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hwrhw4nq.png" alt="镜像下载器"></p><p>等待下载完成。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qvc2a45p.png" alt="镜像下载器"></p><p>下载完后，直接退出即可。</p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><h3 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h3><p>打开 VmWare，点击<strong>创建新的虚拟机</strong>。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/0knykvvr.png"></p><p>点击典型（或者高级也行，但是这里以典型为例）并点击下一步。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/b1bneubi.png"></p><p>选择中间的选项，并浏览刚刚下载的 ISO 文件。这时如果出现了“已检测到……”的字样，说明镜像已经搞定了。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/gdbz0ew4.png"></p><p>选择虚拟机的目录并命名，建议放在刚刚的 D 盘的虚拟机目录里。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8l1z2r1h.png"></p><p>设置磁盘大小。这里就使用 60G，也可以自行调整。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/om3fohnk.png"></p><p>确认信息。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/afq03i0h.png"></p><p>以后要更改配置的话在左边右键，点管理即可。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/lcjsbqvw.png"></p><p>点击完成，等磁盘创建完之后就开机了。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/wc6wc1pc.png"></p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><h4 id="安装部分"><a href="#安装部分" class="headerlink" title="安装部分"></a>安装部分</h4><p>在这个页面，赶紧点击屏幕中心部分，然后乱按一通键盘。如果出现 time out 的字样，就重启，在来一次。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6swnpnem.png"></p><p>出现这个页面，说明成功了。直接下一页即可。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7q3bg1h3.png"></p><p>点击现在安装。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hr7mpz0f.png"></p><p>等他这么一下子。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ihzmdmak.png"></p><p>点击我没有产品密钥。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/myhk9r4m.png"></p><p>选择版本，这里选择专业版。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6omr9qhi.png"></p><p>点击接受，然后下一页。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bx1t1wu3.png"></p><p>点下面这个自定义：仅安装 windows。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/68mcia9z.png"></p><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>硬盘分区。这里先点新建，直接点应用，在弹窗里点击确定，然后再在三个分区里点“驱动器0分区3”，类型是主分区的这个。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zwwgp0yp.png"></p><h4 id="安装系统-1"><a href="#安装系统-1" class="headerlink" title="安装系统"></a>安装系统</h4><p>等他安装，这要用一些时间。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/gzue5x1f.png"></p><p>等他出现这个，就<del>继续等</del>。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/t8fq0tvs.png"></p><p>然后虚拟机会重启。又可以见到<del>奇怪的翻译</del>了。设置地区。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8ute7rgq.png"></p><p>设置键盘布局。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/w0569dbo.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/prheemeq.png"></p><p>这里选通过个人设置。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rhk5bnrh.png"></p><p>这里可以<strong>点左下角的脱机账户，再点有限的体验</strong>免登录微软账号。当然你直接登录微软账号也可以，但是我不推荐。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/w6bbnpxk.png"></p><p>设置用户名和密码，密码可以为空。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/abmtqz5j.png"></p><p>后面就是一堆接受和跳过。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/g0axbmdk.png"></p><p>然后，你就进入桌面了。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6z8bq2k1.png"></p><p>再安装Vmware tools，就可以随意调整屏幕大小了。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Vmware tools是个好东西，可以随意调整屏幕大小，还能让虚拟机和主机之间的文件沟通更加顺畅。">[2]</span></a></sup></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/zzs6w69j.png"></p><p>按提示安装即可。</p><h2 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h2><p>求赞。（用于 luogu，原文章在<a href="https://www.luogu.com.cn/article/mtpxcv12">这里</a>）。<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="这篇文章是洛谷上我自己的原创文章，经过升级改版而来，图片使用洛谷图床，可能无法加载，可以过一段时间再试一次。">[3]</span></a></sup></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>也可以直接下载镜像，（iso文件），在windows官网，这里不做详细介绍。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Vmware tools是个好东西，可以随意调整屏幕大小，还能让虚拟机和主机之间的文件沟通更加顺畅。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>这篇文章是洛谷上我自己的原创文章，经过升级改版而来，图片使用洛谷图床，可能无法加载，可以过一段时间再试一次。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题解：B4205 [常州市赛 2021] 特殊字符</title>
    <link href="/2025/06/14/B4205%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/06/14/B4205%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/bpl6y4yw">洛谷同文链接</a></p><h1 id="题解：B4205-常州市赛-2021-特殊字符"><a href="#题解：B4205-常州市赛-2021-特殊字符" class="headerlink" title="题解：B4205 [常州市赛 2021] 特殊字符"></a>题解：B4205 [常州市赛 2021] 特殊字符</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>因为 $n\le10^6$ 且 $K\le10^9 $，直接构造整个字符串会超时甚至内存爆炸。因此考虑模拟加上跳过模拟扩展的片段。</p><h2 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h2><p>对于每个特殊字符，从左往右遍历：</p><ul><li><p>若遇到一段连续的 $c$ 长度为 $t$，取出后续的 <code>min(t,n-i)</code> 个字符 $p$。</p></li><li><p>经过处理后，这段会变成 $p$ 重复 $t$ 遍。</p></li><li><p>然后判断：</p><ul><li>若当前 $K$ 还在这段之前，正常推进；</li><li>若 $K$ 落在这段里，用取模找出具体落在 $p$ 的哪一位。</li></ul></li><li><p>若不是特殊字符，就正常推进 $K$。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><br><span class="hljs-type">int</span> n,k;<br>string s;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;k;<br>cin&gt;&gt;s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c=<span class="hljs-string">&#x27;a&#x27;</span>;c&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;c++)&#123;<br>ll d=k;<br><span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;  <br><span class="hljs-keyword">if</span>(s[i]==c) t++;<span class="hljs-comment">//符合条件，t++</span><br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(t)&#123;<br>ll z=<span class="hljs-built_in">min</span>(t,n-i);<span class="hljs-comment">//取t和n-i的最小值</span><br><span class="hljs-keyword">if</span>(d&gt;z*t)&#123;<span class="hljs-comment">//如果d&gt;z*t，d减去z*t，i加上z-1，t置0</span><br>d-=z*t;<br>i+=z<span class="hljs-number">-1</span>;<br>t=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>d%=z;<br><span class="hljs-keyword">if</span>(!d) d=z;<br>cout&lt;&lt;s[i+d<span class="hljs-number">-1</span>];<br>d=<span class="hljs-number">0</span>;<br>t=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i!=n)&#123;<span class="hljs-comment">//如果t=0，i!=n，d--，如果d=0，输出s[i]</span><br>d--;<br><span class="hljs-keyword">if</span>(d==<span class="hljs-number">0</span>)&#123;<br>cout&lt;&lt;s[i];<br><span class="hljs-keyword">break</span>;<br>&#125;   <br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(d) cout&lt;&lt;<span class="hljs-string">&quot;*&quot;</span>;<span class="hljs-comment">//如果d&gt;0，输出*</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="时空间复杂度分析"><a href="#时空间复杂度分析" class="headerlink" title="时空间复杂度分析"></a>时空间复杂度分析</h2><p>时间复杂度：$O(26\times n)$，每个字符模拟一遍。<br>空间复杂度：$O(n)$，仅存储字符串。</p><p><a href="https://www.luogu.com.cn/record/218392364">AC 记录</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>原创</tag>
      
      <tag>洛谷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2011/11/11/%E6%B5%8B%E8%AF%95/"/>
    <url>/2011/11/11/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>$$</p><p>\sqrt{2}</p><p>$$<br>$\sqrt{2}$<br>1$\sqrt{2}$1<br>s$\sqrt{2}$d<br>的$\sqrt{2}$的</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/je2gtl4d.png" alt="1ds fdasd a14cxds dsf f 5 d dsad 14"></p><p>后排兜售爆米花炸鸡可乐，前往前排需要翻过1733排座位<br>$$<br>{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\sqrt{\huge但是灌水区已经不在了}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}<br>$$</p><p>于是，只要判断是否有$K\le\int{\frac{R-K}{x-1}}+\int{\frac{B-K}{y-1}}$。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
